{
  "parameters": [
    {
      "type": "ParameterTypeNumber",
      "index": 0,
      "name": "waveform",
      "paramId": "waveform",
      "minimum": 1,
      "maximum": 4,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s07",
      "constrainFunc": "param_07_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 1,
      "name": "slide",
      "paramId": "slide",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 400,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s04",
      "constrainFunc": "param_08_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 2,
      "name": "note",
      "paramId": "note",
      "minimum": 0,
      "maximum": 127,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s06",
      "constrainFunc": "param_09_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 3,
      "name": "slide_time",
      "paramId": "slide_time",
      "minimum": 0,
      "maximum": 4000,
      "exponent": 1,
      "steps": 0,
      "initialValue": 12,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s36",
      "constrainFunc": "param_10_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 4,
      "name": "noteon",
      "paramId": "noteon",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s05",
      "constrainFunc": "param_11_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 5,
      "name": "attack",
      "paramId": "attack",
      "minimum": 0,
      "maximum": 4000,
      "exponent": 1,
      "steps": 0,
      "initialValue": 50,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s38",
      "constrainFunc": "param_12_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 6,
      "name": "reverb_mix",
      "paramId": "reverb_mix",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0.5,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_13_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 7,
      "name": "filter_mix",
      "paramId": "filter_mix",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s03",
      "constrainFunc": "param_14_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 8,
      "name": "decay",
      "paramId": "decay",
      "minimum": 0,
      "maximum": 4000,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s28",
      "constrainFunc": "param_15_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 9,
      "name": "sustain",
      "paramId": "sustain",
      "minimum": 0,
      "maximum": 4000,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s27",
      "constrainFunc": "param_16_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 10,
      "name": "filter_freq",
      "paramId": "filter_freq",
      "minimum": 0,
      "maximum": 15000,
      "exponent": 1,
      "steps": 0,
      "initialValue": 18000,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s24",
      "constrainFunc": "param_17_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 11,
      "name": "release",
      "paramId": "release",
      "minimum": 0,
      "maximum": 4000,
      "exponent": 1,
      "steps": 0,
      "initialValue": 100,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s39",
      "constrainFunc": "param_18_value_constrain"
    },
    {
      "type": "ParameterTypeBang",
      "index": 12,
      "name": "message_01_bangval",
      "paramId": "message_obj-40/bangval",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": false,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "message_s02"
    },
    {
      "type": "ParameterTypeBang",
      "index": 13,
      "name": "message_02_bangval",
      "paramId": "message_obj-60/bangval",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": false,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "message_s01"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 14,
      "name": "numberobj_13_value",
      "paramId": "number_obj-18/value",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s02"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 15,
      "name": "numberobj_14_value",
      "paramId": "number_obj-63/value",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s01"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 16,
      "name": "decay",
      "paramId": "patcher_obj-15/decay",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 50,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Decay",
      "unit": "%",
      "order": 4,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s03",
      "constrainFunc": "param_01_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 17,
      "name": "mix",
      "paramId": "patcher_obj-15/mix",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 50,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Mix",
      "unit": "%",
      "order": 6,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_02_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 18,
      "name": "jitter",
      "paramId": "patcher_obj-15/jitter",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 50,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Jitter",
      "unit": "%",
      "order": 5,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_03_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 19,
      "name": "damp",
      "paramId": "patcher_obj-15/damp",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 50,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Damp",
      "unit": "%",
      "order": 1,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s06",
      "constrainFunc": "param_04_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 20,
      "name": "size",
      "paramId": "patcher_obj-15/size",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 50,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Size",
      "unit": "%",
      "order": 3,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s04",
      "constrainFunc": "param_05_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 21,
      "name": "diff",
      "paramId": "patcher_obj-15/diff",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 50,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Diff",
      "unit": "%",
      "order": 2,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s05",
      "constrainFunc": "param_06_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 22,
      "name": "numberobj_01_value",
      "paramId": "patcher_obj-15/number_obj-26/value",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0.52,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s05"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 23,
      "name": "numberobj_02_value",
      "paramId": "patcher_obj-15/number_obj-2/value",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 50,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s06"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 24,
      "name": "numberobj_03_value",
      "paramId": "patcher_obj-15/number_obj-119/value",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0.5,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s01"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 25,
      "name": "numberobj_04_value",
      "paramId": "patcher_obj-15/number_obj-67/value",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 19.999003208318815,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s02"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 26,
      "name": "numberobj_05_value",
      "paramId": "patcher_obj-15/number_obj-3/value",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 50,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s03"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 27,
      "name": "numberobj_06_value",
      "paramId": "patcher_obj-15/number_obj-54/value",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 50,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s04"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 28,
      "name": "numberobj_07_value",
      "paramId": "patcher_obj-15/number_obj-4/value",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 8824.127247224236,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s11"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 29,
      "name": "numberobj_08_value",
      "paramId": "patcher_obj-15/number_obj-9/value",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 2,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s12"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 30,
      "name": "numberobj_09_value",
      "paramId": "patcher_obj-15/number_obj-21/value",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0.805,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s07"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 31,
      "name": "numberobj_10_value",
      "paramId": "patcher_obj-15/number_obj-23/value",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 50,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s08"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 32,
      "name": "numberobj_11_value",
      "paramId": "patcher_obj-15/number_obj-16/value",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0.5,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s09"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 33,
      "name": "numberobj_12_value",
      "paramId": "patcher_obj-15/number_obj-18/value",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 50,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "numberobj_a1_s10"
    }
  ],
  "numParameters": 34,
  "numSignalInParameters": 0,
  "numSignalOutParameters": 0,
  "numInputChannels": 0,
  "numOutputChannels": 2,
  "numMidiInputPorts": 1,
  "numMidiOutputPorts": 0,
  "externalDataRefs": [],
  "patcherSerial": 0,
  "inports": [],
  "outports": [],
  "inlets": [
    {
      "type": "midi"
    }
  ],
  "outlets": [
    {
      "type": "signal",
      "index": 1,
      "tag": "out1",
      "meta": ""
    },
    {
      "type": "signal",
      "index": 2,
      "tag": "out2",
      "meta": ""
    }
  ],
  "paramConversion": {
    "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
    "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 1:\n    case 4:\n    case 6:\n    case 7:\n    case 14:\n    case 15:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 127 ? 127 : value));\n            let normalizedValue = (value - 0) / (127 - 0);\n            return normalizedValue;\n        }\n    case 3:\n    case 5:\n    case 8:\n    case 9:\n    case 11:\n        {\n            value = (value < 0 ? 0 : (value > 4000 ? 4000 : value));\n            let normalizedValue = (value - 0) / (4000 - 0);\n            return normalizedValue;\n        }\n    case 10:\n        {\n            value = (value < 0 ? 0 : (value > 15000 ? 15000 : value));\n            let normalizedValue = (value - 0) / (15000 - 0);\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 1 ? 1 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - 1) / (4 - 1);\n            return normalizedValue;\n        }\n    default:\n        index -= 16;\n\n        if (index < this.patcher_01.getNumParameters())\n            return this.patcher_01.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
    "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 1:\n    case 4:\n    case 6:\n    case 7:\n    case 14:\n    case 15:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (127 - 0);\n            }\n        }\n    case 3:\n    case 5:\n    case 8:\n    case 9:\n    case 11:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (4000 - 0);\n            }\n        }\n    case 10:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (15000 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (4 - 1);\n            }\n        }\n    default:\n        index -= 16;\n\n        if (index < this.patcher_01.getNumParameters())\n            return this.patcher_01.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
    "getNumParameters": "function getNumParameters() {\n    return 16 + this.patcher_01.getNumParameters();\n}",
    "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 4 ? 4 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 4000 ? 4000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 4000 ? 4000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 6:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 7:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 8:\n        {\n            v = (v > 4000 ? 4000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 9:\n        {\n            v = (v > 4000 ? 4000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 10:\n        {\n            v = (v > 15000 ? 15000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 11:\n        {\n            v = (v > 4000 ? 4000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        index -= 16;\n\n        if (index < this.patcher_01.getNumParameters())\n            return this.patcher_01.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
    "subpatches": {
      "patcher_01": {
        "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
        "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 6:\n    case 8:\n    case 9:\n    case 12:\n    case 14:\n    case 16:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 7:\n    case 10:\n    case 11:\n    case 13:\n    case 15:\n    case 17:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 18;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
        "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 6:\n    case 8:\n    case 9:\n    case 12:\n    case 14:\n    case 16:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 7:\n    case 10:\n    case 11:\n    case 13:\n    case 15:\n    case 17:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    default:\n        index -= 18;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
        "getNumParameters": "function getNumParameters() {\n    return 18 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters() + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters() + this.p_08.getNumParameters();\n}",
        "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        index -= 18;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.constrainParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.constrainParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.constrainParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
        "subpatches": {
          "p_01": {
            "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
            "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
            "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "subpatches": {},
            "isPolyphonic": false
          },
          "p_02": {
            "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
            "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
            "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "subpatches": {},
            "isPolyphonic": false
          },
          "p_03": {
            "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
            "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
            "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "subpatches": {},
            "isPolyphonic": false
          },
          "p_04": {
            "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
            "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
            "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "subpatches": {},
            "isPolyphonic": false
          },
          "p_05": {
            "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
            "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
            "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "subpatches": {},
            "isPolyphonic": false
          },
          "p_06": {
            "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
            "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
            "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "subpatches": {},
            "isPolyphonic": false
          },
          "p_07": {
            "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
            "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
            "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "subpatches": {},
            "isPolyphonic": false
          },
          "p_08": {
            "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
            "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
            "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "subpatches": {},
            "isPolyphonic": false
          }
        },
        "isPolyphonic": false
      }
    },
    "isPolyphonic": false
  },
  "presetid": "rnbo",
  "meta": {
    "architecture": "x64",
    "filename": "Capstone.maxpat",
    "maxversion": "8.5.1",
    "rnboversion": "1.0.1"
  }
}