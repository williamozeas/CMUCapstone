/*******************************************************************************************************************
Cycling '74 License for Max-Generated Code for Export
Copyright (c) 2022 Cycling '74
The code that Max generates automatically and that end users are capable of exporting and using, and any
  associated documentation files (the “Software”) is a work of authorship for which Cycling '74 is the author
  and owner for copyright purposes.  A license is hereby granted, free of charge, to any person obtaining a
  copy of the Software (“Licensee”) to use, copy, modify, merge, publish, and distribute copies of the Software,
  and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The Software is licensed to Licensee only for non-commercial use. Users who wish to make commercial use of the
  Software must contact the copyright owner to determine if a license for commercial use is available, and the
  terms and conditions for same, which may include fees or royalties. For commercial use, please send inquiries
  to licensing@cycling74.com.  The determination of whether a use is commercial use or non-commercial use is based
  upon the use, not the user. The Software may be used by individuals, institutions, governments, corporations, or
  other business whether for-profit or non-profit so long as the use itself is not a commercialization of the
  materials or a use that generates or is intended to generate income, revenue, sales or profit.
The above copyright notice and this license shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
  THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

Please see https://support.cycling74.com/hc/en-us/articles/10730637742483-RNBO-Export-Licensing-FAQ for additional information
*******************************************************************************************************************/

#include "RNBO_Common.h"
#include "RNBO_AudioSignal.h"

namespace RNBO {


#define floor(x) ((long)(x))

#if defined(__GNUC__) || defined(__clang__)
    #define RNBO_RESTRICT __restrict__
#elif defined(_MSC_VER)
    #define RNBO_RESTRICT __restrict
#endif

#define FIXEDSIZEARRAYINIT(...) { }

class rnbomatic : public PatcherInterfaceImpl {
public:

class RNBOSubpatcher_1051 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_1025 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1051;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1025()
            {
            }
            
            ~RNBOSubpatcher_1025()
            {
            }
            
            virtual RNBOSubpatcher_1051* getPatcher() const {
                return static_cast<RNBOSubpatcher_1051 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                this->xfade_tilde_01_perform(in5, in1, in3, out1, n);
                this->xfade_tilde_02_perform(in5, in2, in4, out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 5;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void xfade_tilde_01_perform(
                const Sample * pos,
                const Sample * in1,
                const Sample * in2,
                Sample * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] * this->xfade_tilde_01_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_01_func_next(pos[(Index)i], 1);
                }
            }
            
            void xfade_tilde_02_perform(
                const Sample * pos,
                const Sample * in1,
                const Sample * in2,
                Sample * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] * this->xfade_tilde_02_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_02_func_next(pos[(Index)i], 1);
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number xfade_tilde_01_func_next(number pos, int channel) {
                {
                    {
                        number nchan_1 = 2 - 1;
            
                        {
                            pos = pos * nchan_1;
                        }
            
                        {
                            if (pos > nchan_1)
                                pos = nchan_1;
                            else if (pos < 0)
                                pos = 0;
                        }
            
                        pos = pos - channel;
            
                        if (pos > -1 && pos < 1) {
                            {
                                return rnbo_cos(1.57079632679489661923 * pos);
                            }
                        } else {
                            return 0;
                        }
                    }
                }
            }
            
            void xfade_tilde_01_func_reset() {}
            
            number xfade_tilde_02_func_next(number pos, int channel) {
                {
                    {
                        number nchan_1 = 2 - 1;
            
                        {
                            pos = pos * nchan_1;
                        }
            
                        {
                            if (pos > nchan_1)
                                pos = nchan_1;
                            else if (pos < 0)
                                pos = 0;
                        }
            
                        pos = pos - channel;
            
                        if (pos > -1 && pos < 1) {
                            {
                                return rnbo_cos(1.57079632679489661923 * pos);
                            }
                        } else {
                            return 0;
                        }
                    }
                }
            }
            
            void xfade_tilde_02_func_reset() {}
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                xfade_tilde_01_pos = 0;
                xfade_tilde_02_pos = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number xfade_tilde_01_pos;
                number xfade_tilde_02_pos;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1026 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1051;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1026()
            {
            }
            
            ~RNBOSubpatcher_1026()
            {
            }
            
            virtual RNBOSubpatcher_1051* getPatcher() const {
                return static_cast<RNBOSubpatcher_1051 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() {
                return this->sr;
            }
            
            Index vectorsize() {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
                SampleValue * in8 = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
                SampleValue * in9 = (numInputs >= 9 && inputs[8] ? inputs[8] : this->zeroBuffer);
                this->dspexpr_05_perform(in8, in9, this->signals[0], n);
                this->dspexpr_10_perform(this->signals[0], this->dspexpr_10_in2, this->signals[1], n);
                this->dspexpr_01_perform(this->signals[0], this->dspexpr_01_in2, this->signals[2], n);
            
                this->comb_tilde_01_perform(
                    in1,
                    this->signals[2],
                    this->comb_tilde_01_gain,
                    this->comb_tilde_01_ffGain,
                    this->comb_tilde_01_fbGain,
                    this->signals[3],
                    n
                );
            
                this->dspexpr_02_perform(this->signals[0], this->dspexpr_02_in2, this->signals[2], n);
            
                this->comb_tilde_02_perform(
                    in2,
                    this->signals[2],
                    this->comb_tilde_02_gain,
                    this->comb_tilde_02_ffGain,
                    this->comb_tilde_02_fbGain,
                    this->signals[4],
                    n
                );
            
                this->dspexpr_03_perform(this->signals[0], this->dspexpr_03_in2, this->signals[2], n);
            
                this->comb_tilde_03_perform(
                    in3,
                    this->signals[2],
                    this->comb_tilde_03_gain,
                    this->comb_tilde_03_ffGain,
                    this->comb_tilde_03_fbGain,
                    this->signals[5],
                    n
                );
            
                this->dspexpr_06_perform(this->signals[0], this->dspexpr_06_in2, this->signals[2], n);
            
                this->comb_tilde_04_perform(
                    in4,
                    this->signals[2],
                    this->comb_tilde_04_gain,
                    this->comb_tilde_04_ffGain,
                    this->comb_tilde_04_fbGain,
                    this->signals[6],
                    n
                );
            
                this->dspexpr_08_perform(this->signals[0], this->dspexpr_08_in2, this->signals[2], n);
                this->dspexpr_09_perform(this->signals[0], this->dspexpr_09_in2, this->signals[7], n);
            
                this->comb_tilde_05_perform(
                    in5,
                    this->signals[2],
                    this->comb_tilde_05_gain,
                    this->comb_tilde_05_ffGain,
                    this->comb_tilde_05_fbGain,
                    this->signals[0],
                    n
                );
            
                this->comb_tilde_06_perform(
                    in6,
                    this->signals[7],
                    this->comb_tilde_06_gain,
                    this->comb_tilde_06_ffGain,
                    this->comb_tilde_06_fbGain,
                    this->signals[2],
                    n
                );
            
                this->comb_tilde_07_perform(
                    in7,
                    this->signals[1],
                    this->comb_tilde_07_gain,
                    this->comb_tilde_07_ffGain,
                    this->comb_tilde_07_fbGain,
                    this->signals[7],
                    n
                );
            
                this->signaladder_05_perform(
                    this->signals[7],
                    this->signals[2],
                    this->signals[0],
                    this->signals[5],
                    this->signals[5],
                    n
                );
            
                this->dspexpr_07_perform(this->signals[5], this->dspexpr_07_in2, this->signals[1], n);
            
                this->signaladder_06_perform(
                    this->signals[6],
                    this->signals[4],
                    this->signals[3],
                    this->signals[1],
                    this->signals[1],
                    n
                );
            
                this->dspexpr_04_perform(this->signals[1], this->dspexpr_04_in2, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->comb_tilde_01_dspsetup(forceDSPSetup);
                this->comb_tilde_02_dspsetup(forceDSPSetup);
                this->comb_tilde_03_dspsetup(forceDSPSetup);
                this->comb_tilde_04_dspsetup(forceDSPSetup);
                this->comb_tilde_05_dspsetup(forceDSPSetup);
                this->comb_tilde_06_dspsetup(forceDSPSetup);
                this->comb_tilde_07_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 5:
                    return addressOf(this->comb_tilde_01_feedForward_bufferobj);
                    break;
                case 6:
                    return addressOf(this->comb_tilde_01_feedBack_bufferobj);
                    break;
                case 7:
                    return addressOf(this->comb_tilde_02_feedForward_bufferobj);
                    break;
                case 8:
                    return addressOf(this->comb_tilde_02_feedBack_bufferobj);
                    break;
                case 9:
                    return addressOf(this->comb_tilde_03_feedForward_bufferobj);
                    break;
                case 10:
                    return addressOf(this->comb_tilde_03_feedBack_bufferobj);
                    break;
                case 11:
                    return addressOf(this->comb_tilde_04_feedForward_bufferobj);
                    break;
                case 12:
                    return addressOf(this->comb_tilde_04_feedBack_bufferobj);
                    break;
                case 13:
                    return addressOf(this->comb_tilde_05_feedForward_bufferobj);
                    break;
                case 14:
                    return addressOf(this->comb_tilde_05_feedBack_bufferobj);
                    break;
                case 15:
                    return addressOf(this->comb_tilde_06_feedForward_bufferobj);
                    break;
                case 16:
                    return addressOf(this->comb_tilde_06_feedBack_bufferobj);
                    break;
                case 17:
                    return addressOf(this->comb_tilde_07_feedForward_bufferobj);
                    break;
                case 18:
                    return addressOf(this->comb_tilde_07_feedBack_bufferobj);
                    break;
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 14;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 5) {
                    this->comb_tilde_01_feedForward_buffer = new Float64Buffer(this->comb_tilde_01_feedForward_bufferobj);
                }
            
                if (index == 6) {
                    this->comb_tilde_01_feedBack_buffer = new Float64Buffer(this->comb_tilde_01_feedBack_bufferobj);
                }
            
                if (index == 7) {
                    this->comb_tilde_02_feedForward_buffer = new Float64Buffer(this->comb_tilde_02_feedForward_bufferobj);
                }
            
                if (index == 8) {
                    this->comb_tilde_02_feedBack_buffer = new Float64Buffer(this->comb_tilde_02_feedBack_bufferobj);
                }
            
                if (index == 9) {
                    this->comb_tilde_03_feedForward_buffer = new Float64Buffer(this->comb_tilde_03_feedForward_bufferobj);
                }
            
                if (index == 10) {
                    this->comb_tilde_03_feedBack_buffer = new Float64Buffer(this->comb_tilde_03_feedBack_bufferobj);
                }
            
                if (index == 11) {
                    this->comb_tilde_04_feedForward_buffer = new Float64Buffer(this->comb_tilde_04_feedForward_bufferobj);
                }
            
                if (index == 12) {
                    this->comb_tilde_04_feedBack_buffer = new Float64Buffer(this->comb_tilde_04_feedBack_bufferobj);
                }
            
                if (index == 13) {
                    this->comb_tilde_05_feedForward_buffer = new Float64Buffer(this->comb_tilde_05_feedForward_bufferobj);
                }
            
                if (index == 14) {
                    this->comb_tilde_05_feedBack_buffer = new Float64Buffer(this->comb_tilde_05_feedBack_bufferobj);
                }
            
                if (index == 15) {
                    this->comb_tilde_06_feedForward_buffer = new Float64Buffer(this->comb_tilde_06_feedForward_bufferobj);
                }
            
                if (index == 16) {
                    this->comb_tilde_06_feedBack_buffer = new Float64Buffer(this->comb_tilde_06_feedBack_bufferobj);
                }
            
                if (index == 17) {
                    this->comb_tilde_07_feedForward_buffer = new Float64Buffer(this->comb_tilde_07_feedForward_bufferobj);
                }
            
                if (index == 18) {
                    this->comb_tilde_07_feedBack_buffer = new Float64Buffer(this->comb_tilde_07_feedBack_bufferobj);
                }
            }
            
            void initialize() {
                this->comb_tilde_01_feedForward_bufferobj = initDataRef("comb_tilde_01_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_01_feedBack_bufferobj = initDataRef("comb_tilde_01_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_02_feedForward_bufferobj = initDataRef("comb_tilde_02_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_02_feedBack_bufferobj = initDataRef("comb_tilde_02_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_03_feedForward_bufferobj = initDataRef("comb_tilde_03_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_03_feedBack_bufferobj = initDataRef("comb_tilde_03_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_04_feedForward_bufferobj = initDataRef("comb_tilde_04_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_04_feedBack_bufferobj = initDataRef("comb_tilde_04_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_05_feedForward_bufferobj = initDataRef("comb_tilde_05_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_05_feedBack_bufferobj = initDataRef("comb_tilde_05_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_06_feedForward_bufferobj = initDataRef("comb_tilde_06_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_06_feedBack_bufferobj = initDataRef("comb_tilde_06_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_07_feedForward_bufferobj = initDataRef("comb_tilde_07_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_07_feedBack_bufferobj = initDataRef("comb_tilde_07_feedBack_bufferobj", true, nullptr);
                this->assign_defaults();
                this->setState();
                this->comb_tilde_01_feedForward_bufferobj->setIndex(5);
                this->comb_tilde_01_feedForward_buffer = new Float64Buffer(this->comb_tilde_01_feedForward_bufferobj);
                this->comb_tilde_01_feedBack_bufferobj->setIndex(6);
                this->comb_tilde_01_feedBack_buffer = new Float64Buffer(this->comb_tilde_01_feedBack_bufferobj);
                this->comb_tilde_02_feedForward_bufferobj->setIndex(7);
                this->comb_tilde_02_feedForward_buffer = new Float64Buffer(this->comb_tilde_02_feedForward_bufferobj);
                this->comb_tilde_02_feedBack_bufferobj->setIndex(8);
                this->comb_tilde_02_feedBack_buffer = new Float64Buffer(this->comb_tilde_02_feedBack_bufferobj);
                this->comb_tilde_03_feedForward_bufferobj->setIndex(9);
                this->comb_tilde_03_feedForward_buffer = new Float64Buffer(this->comb_tilde_03_feedForward_bufferobj);
                this->comb_tilde_03_feedBack_bufferobj->setIndex(10);
                this->comb_tilde_03_feedBack_buffer = new Float64Buffer(this->comb_tilde_03_feedBack_bufferobj);
                this->comb_tilde_04_feedForward_bufferobj->setIndex(11);
                this->comb_tilde_04_feedForward_buffer = new Float64Buffer(this->comb_tilde_04_feedForward_bufferobj);
                this->comb_tilde_04_feedBack_bufferobj->setIndex(12);
                this->comb_tilde_04_feedBack_buffer = new Float64Buffer(this->comb_tilde_04_feedBack_bufferobj);
                this->comb_tilde_05_feedForward_bufferobj->setIndex(13);
                this->comb_tilde_05_feedForward_buffer = new Float64Buffer(this->comb_tilde_05_feedForward_bufferobj);
                this->comb_tilde_05_feedBack_bufferobj->setIndex(14);
                this->comb_tilde_05_feedBack_buffer = new Float64Buffer(this->comb_tilde_05_feedBack_bufferobj);
                this->comb_tilde_06_feedForward_bufferobj->setIndex(15);
                this->comb_tilde_06_feedForward_buffer = new Float64Buffer(this->comb_tilde_06_feedForward_bufferobj);
                this->comb_tilde_06_feedBack_bufferobj->setIndex(16);
                this->comb_tilde_06_feedBack_buffer = new Float64Buffer(this->comb_tilde_06_feedBack_bufferobj);
                this->comb_tilde_07_feedForward_bufferobj->setIndex(17);
                this->comb_tilde_07_feedForward_buffer = new Float64Buffer(this->comb_tilde_07_feedForward_bufferobj);
                this->comb_tilde_07_feedBack_bufferobj->setIndex(18);
                this->comb_tilde_07_feedBack_buffer = new Float64Buffer(this->comb_tilde_07_feedBack_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 9;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->comb_tilde_01_feedForward_init();
                this->comb_tilde_01_feedBack_init();
                this->comb_tilde_01_init();
                this->comb_tilde_02_feedForward_init();
                this->comb_tilde_02_feedBack_init();
                this->comb_tilde_02_init();
                this->comb_tilde_03_feedForward_init();
                this->comb_tilde_03_feedBack_init();
                this->comb_tilde_03_init();
                this->comb_tilde_04_feedForward_init();
                this->comb_tilde_04_feedBack_init();
                this->comb_tilde_04_init();
                this->comb_tilde_05_feedForward_init();
                this->comb_tilde_05_feedBack_init();
                this->comb_tilde_05_init();
                this->comb_tilde_06_feedForward_init();
                this->comb_tilde_06_feedBack_init();
                this->comb_tilde_06_init();
                this->comb_tilde_07_feedForward_init();
                this->comb_tilde_07_feedBack_init();
                this->comb_tilde_07_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->comb_tilde_01_feedForward_buffer = this->comb_tilde_01_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_01_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_01_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_01_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->comb_tilde_01_feedBack_buffer = this->comb_tilde_01_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_01_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_01_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_01_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->comb_tilde_02_feedForward_buffer = this->comb_tilde_02_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_02_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_02_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_02_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->comb_tilde_02_feedBack_buffer = this->comb_tilde_02_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_02_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_02_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_02_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->comb_tilde_03_feedForward_buffer = this->comb_tilde_03_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_03_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_03_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_03_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->comb_tilde_03_feedBack_buffer = this->comb_tilde_03_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_03_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_03_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_03_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            
                this->comb_tilde_04_feedForward_buffer = this->comb_tilde_04_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_04_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_04_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_04_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(11);
                }
            
                this->comb_tilde_04_feedBack_buffer = this->comb_tilde_04_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_04_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_04_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_04_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(12);
                }
            
                this->comb_tilde_05_feedForward_buffer = this->comb_tilde_05_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_05_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_05_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_05_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(13);
                }
            
                this->comb_tilde_05_feedBack_buffer = this->comb_tilde_05_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_05_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_05_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_05_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(14);
                }
            
                this->comb_tilde_06_feedForward_buffer = this->comb_tilde_06_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_06_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_06_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_06_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(15);
                }
            
                this->comb_tilde_06_feedBack_buffer = this->comb_tilde_06_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_06_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_06_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_06_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(16);
                }
            
                this->comb_tilde_07_feedForward_buffer = this->comb_tilde_07_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_07_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_07_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_07_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(17);
                }
            
                this->comb_tilde_07_feedBack_buffer = this->comb_tilde_07_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_07_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_07_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_07_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(18);
                }
            }
            
            void dspexpr_05_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_10_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 75;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_01_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 110;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_01_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_01_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_01_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_01_feedForward_write(x[(Index)i]);
                    this->comb_tilde_01_feedBack_write(ov);
                    this->comb_tilde_01_feedForward_step();
                    this->comb_tilde_01_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_02_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 160;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_02_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_02_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_02_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_02_feedForward_write(x[(Index)i]);
                    this->comb_tilde_02_feedBack_write(ov);
                    this->comb_tilde_02_feedForward_step();
                    this->comb_tilde_02_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_03_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 50;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_03_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_03_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_03_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_03_feedForward_write(x[(Index)i]);
                    this->comb_tilde_03_feedBack_write(ov);
                    this->comb_tilde_03_feedForward_step();
                    this->comb_tilde_03_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_06_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 25;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_04_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_04_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_04_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_04_feedForward_write(x[(Index)i]);
                    this->comb_tilde_04_feedBack_write(ov);
                    this->comb_tilde_04_feedForward_step();
                    this->comb_tilde_04_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_08_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 69;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_09_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 80;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_05_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_05_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_05_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_05_feedForward_write(x[(Index)i]);
                    this->comb_tilde_05_feedBack_write(ov);
                    this->comb_tilde_05_feedForward_step();
                    this->comb_tilde_05_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_06_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_06_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_06_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_06_feedForward_write(x[(Index)i]);
                    this->comb_tilde_06_feedBack_write(ov);
                    this->comb_tilde_06_feedForward_step();
                    this->comb_tilde_06_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_07_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_07_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_07_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_07_feedForward_write(x[(Index)i]);
                    this->comb_tilde_07_feedBack_write(ov);
                    this->comb_tilde_07_feedForward_step();
                    this->comb_tilde_07_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signaladder_05_perform(
                const Sample * in1,
                const Sample * in2,
                const Sample * in3,
                const Sample * in4,
                Sample * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_07_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_06_perform(
                const Sample * in1,
                const Sample * in2,
                const Sample * in3,
                const Sample * in4,
                Sample * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_04_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 0.355;//#map:_###_obj_###_:1
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void comb_tilde_01_feedForward_step() {
                this->comb_tilde_01_feedForward_reader++;
            
                if (this->comb_tilde_01_feedForward_reader >= (int)(this->comb_tilde_01_feedForward_buffer->getSize()))
                    this->comb_tilde_01_feedForward_reader = 0;
            }
            
            number comb_tilde_01_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_01_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_01_feedForward_wrap))
                );
            }
            
            void comb_tilde_01_feedForward_write(number v) {
                this->comb_tilde_01_feedForward_writer = this->comb_tilde_01_feedForward_reader;
                this->comb_tilde_01_feedForward_buffer[(Index)this->comb_tilde_01_feedForward_writer] = v;
            }
            
            number comb_tilde_01_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_01_feedForward__maxdelay : size);
                number val = this->comb_tilde_01_feedForward_read(effectiveSize, 0);
                this->comb_tilde_01_feedForward_write(v);
                this->comb_tilde_01_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_01_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_01_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_01_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_01_feedForward_init() {
                auto result = this->comb_tilde_01_feedForward_calcSizeInSamples();
                this->comb_tilde_01_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_01_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_01_feedForward_clear() {
                this->comb_tilde_01_feedForward_buffer->setZero();
            }
            
            void comb_tilde_01_feedForward_reset() {
                auto result = this->comb_tilde_01_feedForward_calcSizeInSamples();
                this->comb_tilde_01_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_01_feedForward_buffer);
                this->comb_tilde_01_feedForward_wrap = this->comb_tilde_01_feedForward_buffer->getSize() - 1;
                this->comb_tilde_01_feedForward_clear();
            
                if (this->comb_tilde_01_feedForward_reader >= this->comb_tilde_01_feedForward__maxdelay || this->comb_tilde_01_feedForward_writer >= this->comb_tilde_01_feedForward__maxdelay) {
                    this->comb_tilde_01_feedForward_reader = 0;
                    this->comb_tilde_01_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_01_feedForward_dspsetup() {
                this->comb_tilde_01_feedForward_reset();
            }
            
            number comb_tilde_01_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_01_feedForward_size() {
                return this->comb_tilde_01_feedForward__maxdelay;
            }
            
            void comb_tilde_01_feedBack_step() {
                this->comb_tilde_01_feedBack_reader++;
            
                if (this->comb_tilde_01_feedBack_reader >= (int)(this->comb_tilde_01_feedBack_buffer->getSize()))
                    this->comb_tilde_01_feedBack_reader = 0;
            }
            
            number comb_tilde_01_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_01_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_01_feedBack_wrap))
                );
            }
            
            void comb_tilde_01_feedBack_write(number v) {
                this->comb_tilde_01_feedBack_writer = this->comb_tilde_01_feedBack_reader;
                this->comb_tilde_01_feedBack_buffer[(Index)this->comb_tilde_01_feedBack_writer] = v;
            }
            
            number comb_tilde_01_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_01_feedBack__maxdelay : size);
                number val = this->comb_tilde_01_feedBack_read(effectiveSize, 0);
                this->comb_tilde_01_feedBack_write(v);
                this->comb_tilde_01_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_01_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_01_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_01_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_01_feedBack_init() {
                auto result = this->comb_tilde_01_feedBack_calcSizeInSamples();
                this->comb_tilde_01_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_01_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_01_feedBack_clear() {
                this->comb_tilde_01_feedBack_buffer->setZero();
            }
            
            void comb_tilde_01_feedBack_reset() {
                auto result = this->comb_tilde_01_feedBack_calcSizeInSamples();
                this->comb_tilde_01_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_01_feedBack_buffer);
                this->comb_tilde_01_feedBack_wrap = this->comb_tilde_01_feedBack_buffer->getSize() - 1;
                this->comb_tilde_01_feedBack_clear();
            
                if (this->comb_tilde_01_feedBack_reader >= this->comb_tilde_01_feedBack__maxdelay || this->comb_tilde_01_feedBack_writer >= this->comb_tilde_01_feedBack__maxdelay) {
                    this->comb_tilde_01_feedBack_reader = 0;
                    this->comb_tilde_01_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_01_feedBack_dspsetup() {
                this->comb_tilde_01_feedBack_reset();
            }
            
            number comb_tilde_01_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_01_feedBack_size() {
                return this->comb_tilde_01_feedBack__maxdelay;
            }
            
            void comb_tilde_01_init() {
                this->comb_tilde_01_feedForward_init();
                this->comb_tilde_01_feedBack_init();
            }
            
            void comb_tilde_01_clear() {
                this->comb_tilde_01_feedForward_clear();
                this->comb_tilde_01_feedBack_clear();
            }
            
            void comb_tilde_01_reset() {
                this->comb_tilde_01_init();
                this->comb_tilde_01_clear();
            }
            
            void comb_tilde_01_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_01_reset();
                this->comb_tilde_01_setupDone = true;
                this->comb_tilde_01_feedForward_dspsetup();
                this->comb_tilde_01_feedBack_dspsetup();
            }
            
            void comb_tilde_02_feedForward_step() {
                this->comb_tilde_02_feedForward_reader++;
            
                if (this->comb_tilde_02_feedForward_reader >= (int)(this->comb_tilde_02_feedForward_buffer->getSize()))
                    this->comb_tilde_02_feedForward_reader = 0;
            }
            
            number comb_tilde_02_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_02_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_02_feedForward_wrap))
                );
            }
            
            void comb_tilde_02_feedForward_write(number v) {
                this->comb_tilde_02_feedForward_writer = this->comb_tilde_02_feedForward_reader;
                this->comb_tilde_02_feedForward_buffer[(Index)this->comb_tilde_02_feedForward_writer] = v;
            }
            
            number comb_tilde_02_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_02_feedForward__maxdelay : size);
                number val = this->comb_tilde_02_feedForward_read(effectiveSize, 0);
                this->comb_tilde_02_feedForward_write(v);
                this->comb_tilde_02_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_02_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_02_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_02_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_02_feedForward_init() {
                auto result = this->comb_tilde_02_feedForward_calcSizeInSamples();
                this->comb_tilde_02_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_02_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_02_feedForward_clear() {
                this->comb_tilde_02_feedForward_buffer->setZero();
            }
            
            void comb_tilde_02_feedForward_reset() {
                auto result = this->comb_tilde_02_feedForward_calcSizeInSamples();
                this->comb_tilde_02_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_02_feedForward_buffer);
                this->comb_tilde_02_feedForward_wrap = this->comb_tilde_02_feedForward_buffer->getSize() - 1;
                this->comb_tilde_02_feedForward_clear();
            
                if (this->comb_tilde_02_feedForward_reader >= this->comb_tilde_02_feedForward__maxdelay || this->comb_tilde_02_feedForward_writer >= this->comb_tilde_02_feedForward__maxdelay) {
                    this->comb_tilde_02_feedForward_reader = 0;
                    this->comb_tilde_02_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_02_feedForward_dspsetup() {
                this->comb_tilde_02_feedForward_reset();
            }
            
            number comb_tilde_02_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_02_feedForward_size() {
                return this->comb_tilde_02_feedForward__maxdelay;
            }
            
            void comb_tilde_02_feedBack_step() {
                this->comb_tilde_02_feedBack_reader++;
            
                if (this->comb_tilde_02_feedBack_reader >= (int)(this->comb_tilde_02_feedBack_buffer->getSize()))
                    this->comb_tilde_02_feedBack_reader = 0;
            }
            
            number comb_tilde_02_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_02_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_02_feedBack_wrap))
                );
            }
            
            void comb_tilde_02_feedBack_write(number v) {
                this->comb_tilde_02_feedBack_writer = this->comb_tilde_02_feedBack_reader;
                this->comb_tilde_02_feedBack_buffer[(Index)this->comb_tilde_02_feedBack_writer] = v;
            }
            
            number comb_tilde_02_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_02_feedBack__maxdelay : size);
                number val = this->comb_tilde_02_feedBack_read(effectiveSize, 0);
                this->comb_tilde_02_feedBack_write(v);
                this->comb_tilde_02_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_02_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_02_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_02_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_02_feedBack_init() {
                auto result = this->comb_tilde_02_feedBack_calcSizeInSamples();
                this->comb_tilde_02_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_02_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_02_feedBack_clear() {
                this->comb_tilde_02_feedBack_buffer->setZero();
            }
            
            void comb_tilde_02_feedBack_reset() {
                auto result = this->comb_tilde_02_feedBack_calcSizeInSamples();
                this->comb_tilde_02_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_02_feedBack_buffer);
                this->comb_tilde_02_feedBack_wrap = this->comb_tilde_02_feedBack_buffer->getSize() - 1;
                this->comb_tilde_02_feedBack_clear();
            
                if (this->comb_tilde_02_feedBack_reader >= this->comb_tilde_02_feedBack__maxdelay || this->comb_tilde_02_feedBack_writer >= this->comb_tilde_02_feedBack__maxdelay) {
                    this->comb_tilde_02_feedBack_reader = 0;
                    this->comb_tilde_02_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_02_feedBack_dspsetup() {
                this->comb_tilde_02_feedBack_reset();
            }
            
            number comb_tilde_02_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_02_feedBack_size() {
                return this->comb_tilde_02_feedBack__maxdelay;
            }
            
            void comb_tilde_02_init() {
                this->comb_tilde_02_feedForward_init();
                this->comb_tilde_02_feedBack_init();
            }
            
            void comb_tilde_02_clear() {
                this->comb_tilde_02_feedForward_clear();
                this->comb_tilde_02_feedBack_clear();
            }
            
            void comb_tilde_02_reset() {
                this->comb_tilde_02_init();
                this->comb_tilde_02_clear();
            }
            
            void comb_tilde_02_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_02_reset();
                this->comb_tilde_02_setupDone = true;
                this->comb_tilde_02_feedForward_dspsetup();
                this->comb_tilde_02_feedBack_dspsetup();
            }
            
            void comb_tilde_03_feedForward_step() {
                this->comb_tilde_03_feedForward_reader++;
            
                if (this->comb_tilde_03_feedForward_reader >= (int)(this->comb_tilde_03_feedForward_buffer->getSize()))
                    this->comb_tilde_03_feedForward_reader = 0;
            }
            
            number comb_tilde_03_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_03_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_03_feedForward_wrap))
                );
            }
            
            void comb_tilde_03_feedForward_write(number v) {
                this->comb_tilde_03_feedForward_writer = this->comb_tilde_03_feedForward_reader;
                this->comb_tilde_03_feedForward_buffer[(Index)this->comb_tilde_03_feedForward_writer] = v;
            }
            
            number comb_tilde_03_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_03_feedForward__maxdelay : size);
                number val = this->comb_tilde_03_feedForward_read(effectiveSize, 0);
                this->comb_tilde_03_feedForward_write(v);
                this->comb_tilde_03_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_03_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_03_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_03_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_03_feedForward_init() {
                auto result = this->comb_tilde_03_feedForward_calcSizeInSamples();
                this->comb_tilde_03_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_03_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_03_feedForward_clear() {
                this->comb_tilde_03_feedForward_buffer->setZero();
            }
            
            void comb_tilde_03_feedForward_reset() {
                auto result = this->comb_tilde_03_feedForward_calcSizeInSamples();
                this->comb_tilde_03_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_03_feedForward_buffer);
                this->comb_tilde_03_feedForward_wrap = this->comb_tilde_03_feedForward_buffer->getSize() - 1;
                this->comb_tilde_03_feedForward_clear();
            
                if (this->comb_tilde_03_feedForward_reader >= this->comb_tilde_03_feedForward__maxdelay || this->comb_tilde_03_feedForward_writer >= this->comb_tilde_03_feedForward__maxdelay) {
                    this->comb_tilde_03_feedForward_reader = 0;
                    this->comb_tilde_03_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_03_feedForward_dspsetup() {
                this->comb_tilde_03_feedForward_reset();
            }
            
            number comb_tilde_03_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_03_feedForward_size() {
                return this->comb_tilde_03_feedForward__maxdelay;
            }
            
            void comb_tilde_03_feedBack_step() {
                this->comb_tilde_03_feedBack_reader++;
            
                if (this->comb_tilde_03_feedBack_reader >= (int)(this->comb_tilde_03_feedBack_buffer->getSize()))
                    this->comb_tilde_03_feedBack_reader = 0;
            }
            
            number comb_tilde_03_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_03_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_03_feedBack_wrap))
                );
            }
            
            void comb_tilde_03_feedBack_write(number v) {
                this->comb_tilde_03_feedBack_writer = this->comb_tilde_03_feedBack_reader;
                this->comb_tilde_03_feedBack_buffer[(Index)this->comb_tilde_03_feedBack_writer] = v;
            }
            
            number comb_tilde_03_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_03_feedBack__maxdelay : size);
                number val = this->comb_tilde_03_feedBack_read(effectiveSize, 0);
                this->comb_tilde_03_feedBack_write(v);
                this->comb_tilde_03_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_03_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_03_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_03_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_03_feedBack_init() {
                auto result = this->comb_tilde_03_feedBack_calcSizeInSamples();
                this->comb_tilde_03_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_03_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_03_feedBack_clear() {
                this->comb_tilde_03_feedBack_buffer->setZero();
            }
            
            void comb_tilde_03_feedBack_reset() {
                auto result = this->comb_tilde_03_feedBack_calcSizeInSamples();
                this->comb_tilde_03_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_03_feedBack_buffer);
                this->comb_tilde_03_feedBack_wrap = this->comb_tilde_03_feedBack_buffer->getSize() - 1;
                this->comb_tilde_03_feedBack_clear();
            
                if (this->comb_tilde_03_feedBack_reader >= this->comb_tilde_03_feedBack__maxdelay || this->comb_tilde_03_feedBack_writer >= this->comb_tilde_03_feedBack__maxdelay) {
                    this->comb_tilde_03_feedBack_reader = 0;
                    this->comb_tilde_03_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_03_feedBack_dspsetup() {
                this->comb_tilde_03_feedBack_reset();
            }
            
            number comb_tilde_03_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_03_feedBack_size() {
                return this->comb_tilde_03_feedBack__maxdelay;
            }
            
            void comb_tilde_03_init() {
                this->comb_tilde_03_feedForward_init();
                this->comb_tilde_03_feedBack_init();
            }
            
            void comb_tilde_03_clear() {
                this->comb_tilde_03_feedForward_clear();
                this->comb_tilde_03_feedBack_clear();
            }
            
            void comb_tilde_03_reset() {
                this->comb_tilde_03_init();
                this->comb_tilde_03_clear();
            }
            
            void comb_tilde_03_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_03_reset();
                this->comb_tilde_03_setupDone = true;
                this->comb_tilde_03_feedForward_dspsetup();
                this->comb_tilde_03_feedBack_dspsetup();
            }
            
            void comb_tilde_04_feedForward_step() {
                this->comb_tilde_04_feedForward_reader++;
            
                if (this->comb_tilde_04_feedForward_reader >= (int)(this->comb_tilde_04_feedForward_buffer->getSize()))
                    this->comb_tilde_04_feedForward_reader = 0;
            }
            
            number comb_tilde_04_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_04_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_04_feedForward_wrap))
                );
            }
            
            void comb_tilde_04_feedForward_write(number v) {
                this->comb_tilde_04_feedForward_writer = this->comb_tilde_04_feedForward_reader;
                this->comb_tilde_04_feedForward_buffer[(Index)this->comb_tilde_04_feedForward_writer] = v;
            }
            
            number comb_tilde_04_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_04_feedForward__maxdelay : size);
                number val = this->comb_tilde_04_feedForward_read(effectiveSize, 0);
                this->comb_tilde_04_feedForward_write(v);
                this->comb_tilde_04_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_04_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_04_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_04_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_04_feedForward_init() {
                auto result = this->comb_tilde_04_feedForward_calcSizeInSamples();
                this->comb_tilde_04_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_04_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_04_feedForward_clear() {
                this->comb_tilde_04_feedForward_buffer->setZero();
            }
            
            void comb_tilde_04_feedForward_reset() {
                auto result = this->comb_tilde_04_feedForward_calcSizeInSamples();
                this->comb_tilde_04_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_04_feedForward_buffer);
                this->comb_tilde_04_feedForward_wrap = this->comb_tilde_04_feedForward_buffer->getSize() - 1;
                this->comb_tilde_04_feedForward_clear();
            
                if (this->comb_tilde_04_feedForward_reader >= this->comb_tilde_04_feedForward__maxdelay || this->comb_tilde_04_feedForward_writer >= this->comb_tilde_04_feedForward__maxdelay) {
                    this->comb_tilde_04_feedForward_reader = 0;
                    this->comb_tilde_04_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_04_feedForward_dspsetup() {
                this->comb_tilde_04_feedForward_reset();
            }
            
            number comb_tilde_04_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_04_feedForward_size() {
                return this->comb_tilde_04_feedForward__maxdelay;
            }
            
            void comb_tilde_04_feedBack_step() {
                this->comb_tilde_04_feedBack_reader++;
            
                if (this->comb_tilde_04_feedBack_reader >= (int)(this->comb_tilde_04_feedBack_buffer->getSize()))
                    this->comb_tilde_04_feedBack_reader = 0;
            }
            
            number comb_tilde_04_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_04_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_04_feedBack_wrap))
                );
            }
            
            void comb_tilde_04_feedBack_write(number v) {
                this->comb_tilde_04_feedBack_writer = this->comb_tilde_04_feedBack_reader;
                this->comb_tilde_04_feedBack_buffer[(Index)this->comb_tilde_04_feedBack_writer] = v;
            }
            
            number comb_tilde_04_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_04_feedBack__maxdelay : size);
                number val = this->comb_tilde_04_feedBack_read(effectiveSize, 0);
                this->comb_tilde_04_feedBack_write(v);
                this->comb_tilde_04_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_04_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_04_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_04_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_04_feedBack_init() {
                auto result = this->comb_tilde_04_feedBack_calcSizeInSamples();
                this->comb_tilde_04_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_04_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_04_feedBack_clear() {
                this->comb_tilde_04_feedBack_buffer->setZero();
            }
            
            void comb_tilde_04_feedBack_reset() {
                auto result = this->comb_tilde_04_feedBack_calcSizeInSamples();
                this->comb_tilde_04_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_04_feedBack_buffer);
                this->comb_tilde_04_feedBack_wrap = this->comb_tilde_04_feedBack_buffer->getSize() - 1;
                this->comb_tilde_04_feedBack_clear();
            
                if (this->comb_tilde_04_feedBack_reader >= this->comb_tilde_04_feedBack__maxdelay || this->comb_tilde_04_feedBack_writer >= this->comb_tilde_04_feedBack__maxdelay) {
                    this->comb_tilde_04_feedBack_reader = 0;
                    this->comb_tilde_04_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_04_feedBack_dspsetup() {
                this->comb_tilde_04_feedBack_reset();
            }
            
            number comb_tilde_04_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_04_feedBack_size() {
                return this->comb_tilde_04_feedBack__maxdelay;
            }
            
            void comb_tilde_04_init() {
                this->comb_tilde_04_feedForward_init();
                this->comb_tilde_04_feedBack_init();
            }
            
            void comb_tilde_04_clear() {
                this->comb_tilde_04_feedForward_clear();
                this->comb_tilde_04_feedBack_clear();
            }
            
            void comb_tilde_04_reset() {
                this->comb_tilde_04_init();
                this->comb_tilde_04_clear();
            }
            
            void comb_tilde_04_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_04_reset();
                this->comb_tilde_04_setupDone = true;
                this->comb_tilde_04_feedForward_dspsetup();
                this->comb_tilde_04_feedBack_dspsetup();
            }
            
            void comb_tilde_05_feedForward_step() {
                this->comb_tilde_05_feedForward_reader++;
            
                if (this->comb_tilde_05_feedForward_reader >= (int)(this->comb_tilde_05_feedForward_buffer->getSize()))
                    this->comb_tilde_05_feedForward_reader = 0;
            }
            
            number comb_tilde_05_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_05_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_05_feedForward_wrap))
                );
            }
            
            void comb_tilde_05_feedForward_write(number v) {
                this->comb_tilde_05_feedForward_writer = this->comb_tilde_05_feedForward_reader;
                this->comb_tilde_05_feedForward_buffer[(Index)this->comb_tilde_05_feedForward_writer] = v;
            }
            
            number comb_tilde_05_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_05_feedForward__maxdelay : size);
                number val = this->comb_tilde_05_feedForward_read(effectiveSize, 0);
                this->comb_tilde_05_feedForward_write(v);
                this->comb_tilde_05_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_05_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_05_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_05_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_05_feedForward_init() {
                auto result = this->comb_tilde_05_feedForward_calcSizeInSamples();
                this->comb_tilde_05_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_05_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_05_feedForward_clear() {
                this->comb_tilde_05_feedForward_buffer->setZero();
            }
            
            void comb_tilde_05_feedForward_reset() {
                auto result = this->comb_tilde_05_feedForward_calcSizeInSamples();
                this->comb_tilde_05_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_05_feedForward_buffer);
                this->comb_tilde_05_feedForward_wrap = this->comb_tilde_05_feedForward_buffer->getSize() - 1;
                this->comb_tilde_05_feedForward_clear();
            
                if (this->comb_tilde_05_feedForward_reader >= this->comb_tilde_05_feedForward__maxdelay || this->comb_tilde_05_feedForward_writer >= this->comb_tilde_05_feedForward__maxdelay) {
                    this->comb_tilde_05_feedForward_reader = 0;
                    this->comb_tilde_05_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_05_feedForward_dspsetup() {
                this->comb_tilde_05_feedForward_reset();
            }
            
            number comb_tilde_05_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_05_feedForward_size() {
                return this->comb_tilde_05_feedForward__maxdelay;
            }
            
            void comb_tilde_05_feedBack_step() {
                this->comb_tilde_05_feedBack_reader++;
            
                if (this->comb_tilde_05_feedBack_reader >= (int)(this->comb_tilde_05_feedBack_buffer->getSize()))
                    this->comb_tilde_05_feedBack_reader = 0;
            }
            
            number comb_tilde_05_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_05_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_05_feedBack_wrap))
                );
            }
            
            void comb_tilde_05_feedBack_write(number v) {
                this->comb_tilde_05_feedBack_writer = this->comb_tilde_05_feedBack_reader;
                this->comb_tilde_05_feedBack_buffer[(Index)this->comb_tilde_05_feedBack_writer] = v;
            }
            
            number comb_tilde_05_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_05_feedBack__maxdelay : size);
                number val = this->comb_tilde_05_feedBack_read(effectiveSize, 0);
                this->comb_tilde_05_feedBack_write(v);
                this->comb_tilde_05_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_05_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_05_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_05_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_05_feedBack_init() {
                auto result = this->comb_tilde_05_feedBack_calcSizeInSamples();
                this->comb_tilde_05_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_05_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_05_feedBack_clear() {
                this->comb_tilde_05_feedBack_buffer->setZero();
            }
            
            void comb_tilde_05_feedBack_reset() {
                auto result = this->comb_tilde_05_feedBack_calcSizeInSamples();
                this->comb_tilde_05_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_05_feedBack_buffer);
                this->comb_tilde_05_feedBack_wrap = this->comb_tilde_05_feedBack_buffer->getSize() - 1;
                this->comb_tilde_05_feedBack_clear();
            
                if (this->comb_tilde_05_feedBack_reader >= this->comb_tilde_05_feedBack__maxdelay || this->comb_tilde_05_feedBack_writer >= this->comb_tilde_05_feedBack__maxdelay) {
                    this->comb_tilde_05_feedBack_reader = 0;
                    this->comb_tilde_05_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_05_feedBack_dspsetup() {
                this->comb_tilde_05_feedBack_reset();
            }
            
            number comb_tilde_05_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_05_feedBack_size() {
                return this->comb_tilde_05_feedBack__maxdelay;
            }
            
            void comb_tilde_05_init() {
                this->comb_tilde_05_feedForward_init();
                this->comb_tilde_05_feedBack_init();
            }
            
            void comb_tilde_05_clear() {
                this->comb_tilde_05_feedForward_clear();
                this->comb_tilde_05_feedBack_clear();
            }
            
            void comb_tilde_05_reset() {
                this->comb_tilde_05_init();
                this->comb_tilde_05_clear();
            }
            
            void comb_tilde_05_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_05_reset();
                this->comb_tilde_05_setupDone = true;
                this->comb_tilde_05_feedForward_dspsetup();
                this->comb_tilde_05_feedBack_dspsetup();
            }
            
            void comb_tilde_06_feedForward_step() {
                this->comb_tilde_06_feedForward_reader++;
            
                if (this->comb_tilde_06_feedForward_reader >= (int)(this->comb_tilde_06_feedForward_buffer->getSize()))
                    this->comb_tilde_06_feedForward_reader = 0;
            }
            
            number comb_tilde_06_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_06_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_06_feedForward_wrap))
                );
            }
            
            void comb_tilde_06_feedForward_write(number v) {
                this->comb_tilde_06_feedForward_writer = this->comb_tilde_06_feedForward_reader;
                this->comb_tilde_06_feedForward_buffer[(Index)this->comb_tilde_06_feedForward_writer] = v;
            }
            
            number comb_tilde_06_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_06_feedForward__maxdelay : size);
                number val = this->comb_tilde_06_feedForward_read(effectiveSize, 0);
                this->comb_tilde_06_feedForward_write(v);
                this->comb_tilde_06_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_06_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_06_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_06_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_06_feedForward_init() {
                auto result = this->comb_tilde_06_feedForward_calcSizeInSamples();
                this->comb_tilde_06_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_06_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_06_feedForward_clear() {
                this->comb_tilde_06_feedForward_buffer->setZero();
            }
            
            void comb_tilde_06_feedForward_reset() {
                auto result = this->comb_tilde_06_feedForward_calcSizeInSamples();
                this->comb_tilde_06_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_06_feedForward_buffer);
                this->comb_tilde_06_feedForward_wrap = this->comb_tilde_06_feedForward_buffer->getSize() - 1;
                this->comb_tilde_06_feedForward_clear();
            
                if (this->comb_tilde_06_feedForward_reader >= this->comb_tilde_06_feedForward__maxdelay || this->comb_tilde_06_feedForward_writer >= this->comb_tilde_06_feedForward__maxdelay) {
                    this->comb_tilde_06_feedForward_reader = 0;
                    this->comb_tilde_06_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_06_feedForward_dspsetup() {
                this->comb_tilde_06_feedForward_reset();
            }
            
            number comb_tilde_06_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_06_feedForward_size() {
                return this->comb_tilde_06_feedForward__maxdelay;
            }
            
            void comb_tilde_06_feedBack_step() {
                this->comb_tilde_06_feedBack_reader++;
            
                if (this->comb_tilde_06_feedBack_reader >= (int)(this->comb_tilde_06_feedBack_buffer->getSize()))
                    this->comb_tilde_06_feedBack_reader = 0;
            }
            
            number comb_tilde_06_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_06_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_06_feedBack_wrap))
                );
            }
            
            void comb_tilde_06_feedBack_write(number v) {
                this->comb_tilde_06_feedBack_writer = this->comb_tilde_06_feedBack_reader;
                this->comb_tilde_06_feedBack_buffer[(Index)this->comb_tilde_06_feedBack_writer] = v;
            }
            
            number comb_tilde_06_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_06_feedBack__maxdelay : size);
                number val = this->comb_tilde_06_feedBack_read(effectiveSize, 0);
                this->comb_tilde_06_feedBack_write(v);
                this->comb_tilde_06_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_06_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_06_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_06_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_06_feedBack_init() {
                auto result = this->comb_tilde_06_feedBack_calcSizeInSamples();
                this->comb_tilde_06_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_06_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_06_feedBack_clear() {
                this->comb_tilde_06_feedBack_buffer->setZero();
            }
            
            void comb_tilde_06_feedBack_reset() {
                auto result = this->comb_tilde_06_feedBack_calcSizeInSamples();
                this->comb_tilde_06_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_06_feedBack_buffer);
                this->comb_tilde_06_feedBack_wrap = this->comb_tilde_06_feedBack_buffer->getSize() - 1;
                this->comb_tilde_06_feedBack_clear();
            
                if (this->comb_tilde_06_feedBack_reader >= this->comb_tilde_06_feedBack__maxdelay || this->comb_tilde_06_feedBack_writer >= this->comb_tilde_06_feedBack__maxdelay) {
                    this->comb_tilde_06_feedBack_reader = 0;
                    this->comb_tilde_06_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_06_feedBack_dspsetup() {
                this->comb_tilde_06_feedBack_reset();
            }
            
            number comb_tilde_06_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_06_feedBack_size() {
                return this->comb_tilde_06_feedBack__maxdelay;
            }
            
            void comb_tilde_06_init() {
                this->comb_tilde_06_feedForward_init();
                this->comb_tilde_06_feedBack_init();
            }
            
            void comb_tilde_06_clear() {
                this->comb_tilde_06_feedForward_clear();
                this->comb_tilde_06_feedBack_clear();
            }
            
            void comb_tilde_06_reset() {
                this->comb_tilde_06_init();
                this->comb_tilde_06_clear();
            }
            
            void comb_tilde_06_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_06_reset();
                this->comb_tilde_06_setupDone = true;
                this->comb_tilde_06_feedForward_dspsetup();
                this->comb_tilde_06_feedBack_dspsetup();
            }
            
            void comb_tilde_07_feedForward_step() {
                this->comb_tilde_07_feedForward_reader++;
            
                if (this->comb_tilde_07_feedForward_reader >= (int)(this->comb_tilde_07_feedForward_buffer->getSize()))
                    this->comb_tilde_07_feedForward_reader = 0;
            }
            
            number comb_tilde_07_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_07_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_07_feedForward_wrap))
                );
            }
            
            void comb_tilde_07_feedForward_write(number v) {
                this->comb_tilde_07_feedForward_writer = this->comb_tilde_07_feedForward_reader;
                this->comb_tilde_07_feedForward_buffer[(Index)this->comb_tilde_07_feedForward_writer] = v;
            }
            
            number comb_tilde_07_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_07_feedForward__maxdelay : size);
                number val = this->comb_tilde_07_feedForward_read(effectiveSize, 0);
                this->comb_tilde_07_feedForward_write(v);
                this->comb_tilde_07_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_07_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_07_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_07_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_07_feedForward_init() {
                auto result = this->comb_tilde_07_feedForward_calcSizeInSamples();
                this->comb_tilde_07_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_07_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_07_feedForward_clear() {
                this->comb_tilde_07_feedForward_buffer->setZero();
            }
            
            void comb_tilde_07_feedForward_reset() {
                auto result = this->comb_tilde_07_feedForward_calcSizeInSamples();
                this->comb_tilde_07_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_07_feedForward_buffer);
                this->comb_tilde_07_feedForward_wrap = this->comb_tilde_07_feedForward_buffer->getSize() - 1;
                this->comb_tilde_07_feedForward_clear();
            
                if (this->comb_tilde_07_feedForward_reader >= this->comb_tilde_07_feedForward__maxdelay || this->comb_tilde_07_feedForward_writer >= this->comb_tilde_07_feedForward__maxdelay) {
                    this->comb_tilde_07_feedForward_reader = 0;
                    this->comb_tilde_07_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_07_feedForward_dspsetup() {
                this->comb_tilde_07_feedForward_reset();
            }
            
            number comb_tilde_07_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_07_feedForward_size() {
                return this->comb_tilde_07_feedForward__maxdelay;
            }
            
            void comb_tilde_07_feedBack_step() {
                this->comb_tilde_07_feedBack_reader++;
            
                if (this->comb_tilde_07_feedBack_reader >= (int)(this->comb_tilde_07_feedBack_buffer->getSize()))
                    this->comb_tilde_07_feedBack_reader = 0;
            }
            
            number comb_tilde_07_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_07_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_07_feedBack_wrap))
                );
            }
            
            void comb_tilde_07_feedBack_write(number v) {
                this->comb_tilde_07_feedBack_writer = this->comb_tilde_07_feedBack_reader;
                this->comb_tilde_07_feedBack_buffer[(Index)this->comb_tilde_07_feedBack_writer] = v;
            }
            
            number comb_tilde_07_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_07_feedBack__maxdelay : size);
                number val = this->comb_tilde_07_feedBack_read(effectiveSize, 0);
                this->comb_tilde_07_feedBack_write(v);
                this->comb_tilde_07_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_07_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_07_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_07_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_07_feedBack_init() {
                auto result = this->comb_tilde_07_feedBack_calcSizeInSamples();
                this->comb_tilde_07_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_07_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_07_feedBack_clear() {
                this->comb_tilde_07_feedBack_buffer->setZero();
            }
            
            void comb_tilde_07_feedBack_reset() {
                auto result = this->comb_tilde_07_feedBack_calcSizeInSamples();
                this->comb_tilde_07_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_07_feedBack_buffer);
                this->comb_tilde_07_feedBack_wrap = this->comb_tilde_07_feedBack_buffer->getSize() - 1;
                this->comb_tilde_07_feedBack_clear();
            
                if (this->comb_tilde_07_feedBack_reader >= this->comb_tilde_07_feedBack__maxdelay || this->comb_tilde_07_feedBack_writer >= this->comb_tilde_07_feedBack__maxdelay) {
                    this->comb_tilde_07_feedBack_reader = 0;
                    this->comb_tilde_07_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_07_feedBack_dspsetup() {
                this->comb_tilde_07_feedBack_reset();
            }
            
            number comb_tilde_07_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_07_feedBack_size() {
                return this->comb_tilde_07_feedBack__maxdelay;
            }
            
            void comb_tilde_07_init() {
                this->comb_tilde_07_feedForward_init();
                this->comb_tilde_07_feedBack_init();
            }
            
            void comb_tilde_07_clear() {
                this->comb_tilde_07_feedForward_clear();
                this->comb_tilde_07_feedBack_clear();
            }
            
            void comb_tilde_07_reset() {
                this->comb_tilde_07_init();
                this->comb_tilde_07_clear();
            }
            
            void comb_tilde_07_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_07_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_07_reset();
                this->comb_tilde_07_setupDone = true;
                this->comb_tilde_07_feedForward_dspsetup();
                this->comb_tilde_07_feedBack_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                comb_tilde_01_x = 0;
                comb_tilde_01_delayTime = 110;
                comb_tilde_01_gain = 0;
                comb_tilde_01_ffGain = 1;
                comb_tilde_01_fbGain = 0;
                dspexpr_01_in1 = 0;
                dspexpr_01_in2 = 110;
                comb_tilde_02_x = 0;
                comb_tilde_02_delayTime = 160;
                comb_tilde_02_gain = 0;
                comb_tilde_02_ffGain = 1;
                comb_tilde_02_fbGain = 0;
                dspexpr_02_in1 = 0;
                dspexpr_02_in2 = 160;
                comb_tilde_03_x = 0;
                comb_tilde_03_delayTime = 50;
                comb_tilde_03_gain = 0;
                comb_tilde_03_ffGain = 1;
                comb_tilde_03_fbGain = 0;
                dspexpr_03_in1 = 0;
                dspexpr_03_in2 = 50;
                dspexpr_04_in1 = 0;
                dspexpr_04_in2 = 0.355;
                comb_tilde_04_x = 0;
                comb_tilde_04_delayTime = 25;
                comb_tilde_04_gain = 0;
                comb_tilde_04_ffGain = 1;
                comb_tilde_04_fbGain = 0;
                dspexpr_05_in1 = 0;
                dspexpr_05_in2 = 0;
                dspexpr_06_in1 = 0;
                dspexpr_06_in2 = 25;
                dspexpr_07_in1 = 0;
                dspexpr_07_in2 = -1;
                comb_tilde_05_x = 0;
                comb_tilde_05_delayTime = 69;
                comb_tilde_05_gain = 0;
                comb_tilde_05_ffGain = 1;
                comb_tilde_05_fbGain = 0;
                dspexpr_08_in1 = 0;
                dspexpr_08_in2 = 69;
                comb_tilde_06_x = 0;
                comb_tilde_06_delayTime = 80;
                comb_tilde_06_gain = 0;
                comb_tilde_06_ffGain = 1;
                comb_tilde_06_fbGain = 0;
                dspexpr_09_in1 = 0;
                dspexpr_09_in2 = 80;
                comb_tilde_07_x = 0;
                comb_tilde_07_delayTime = 75;
                comb_tilde_07_gain = 0;
                comb_tilde_07_ffGain = 1;
                comb_tilde_07_fbGain = 0;
                dspexpr_10_in1 = 0;
                dspexpr_10_in2 = 75;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                comb_tilde_01_feedForward__maxdelay = 0;
                comb_tilde_01_feedForward_sizemode = 0;
                comb_tilde_01_feedForward_wrap = 0;
                comb_tilde_01_feedForward_reader = 0;
                comb_tilde_01_feedForward_writer = 0;
                comb_tilde_01_feedBack__maxdelay = 0;
                comb_tilde_01_feedBack_sizemode = 0;
                comb_tilde_01_feedBack_wrap = 0;
                comb_tilde_01_feedBack_reader = 0;
                comb_tilde_01_feedBack_writer = 0;
                comb_tilde_01_setupDone = false;
                comb_tilde_02_feedForward__maxdelay = 0;
                comb_tilde_02_feedForward_sizemode = 0;
                comb_tilde_02_feedForward_wrap = 0;
                comb_tilde_02_feedForward_reader = 0;
                comb_tilde_02_feedForward_writer = 0;
                comb_tilde_02_feedBack__maxdelay = 0;
                comb_tilde_02_feedBack_sizemode = 0;
                comb_tilde_02_feedBack_wrap = 0;
                comb_tilde_02_feedBack_reader = 0;
                comb_tilde_02_feedBack_writer = 0;
                comb_tilde_02_setupDone = false;
                comb_tilde_03_feedForward__maxdelay = 0;
                comb_tilde_03_feedForward_sizemode = 0;
                comb_tilde_03_feedForward_wrap = 0;
                comb_tilde_03_feedForward_reader = 0;
                comb_tilde_03_feedForward_writer = 0;
                comb_tilde_03_feedBack__maxdelay = 0;
                comb_tilde_03_feedBack_sizemode = 0;
                comb_tilde_03_feedBack_wrap = 0;
                comb_tilde_03_feedBack_reader = 0;
                comb_tilde_03_feedBack_writer = 0;
                comb_tilde_03_setupDone = false;
                comb_tilde_04_feedForward__maxdelay = 0;
                comb_tilde_04_feedForward_sizemode = 0;
                comb_tilde_04_feedForward_wrap = 0;
                comb_tilde_04_feedForward_reader = 0;
                comb_tilde_04_feedForward_writer = 0;
                comb_tilde_04_feedBack__maxdelay = 0;
                comb_tilde_04_feedBack_sizemode = 0;
                comb_tilde_04_feedBack_wrap = 0;
                comb_tilde_04_feedBack_reader = 0;
                comb_tilde_04_feedBack_writer = 0;
                comb_tilde_04_setupDone = false;
                comb_tilde_05_feedForward__maxdelay = 0;
                comb_tilde_05_feedForward_sizemode = 0;
                comb_tilde_05_feedForward_wrap = 0;
                comb_tilde_05_feedForward_reader = 0;
                comb_tilde_05_feedForward_writer = 0;
                comb_tilde_05_feedBack__maxdelay = 0;
                comb_tilde_05_feedBack_sizemode = 0;
                comb_tilde_05_feedBack_wrap = 0;
                comb_tilde_05_feedBack_reader = 0;
                comb_tilde_05_feedBack_writer = 0;
                comb_tilde_05_setupDone = false;
                comb_tilde_06_feedForward__maxdelay = 0;
                comb_tilde_06_feedForward_sizemode = 0;
                comb_tilde_06_feedForward_wrap = 0;
                comb_tilde_06_feedForward_reader = 0;
                comb_tilde_06_feedForward_writer = 0;
                comb_tilde_06_feedBack__maxdelay = 0;
                comb_tilde_06_feedBack_sizemode = 0;
                comb_tilde_06_feedBack_wrap = 0;
                comb_tilde_06_feedBack_reader = 0;
                comb_tilde_06_feedBack_writer = 0;
                comb_tilde_06_setupDone = false;
                comb_tilde_07_feedForward__maxdelay = 0;
                comb_tilde_07_feedForward_sizemode = 0;
                comb_tilde_07_feedForward_wrap = 0;
                comb_tilde_07_feedForward_reader = 0;
                comb_tilde_07_feedForward_writer = 0;
                comb_tilde_07_feedBack__maxdelay = 0;
                comb_tilde_07_feedBack_sizemode = 0;
                comb_tilde_07_feedBack_wrap = 0;
                comb_tilde_07_feedBack_reader = 0;
                comb_tilde_07_feedBack_writer = 0;
                comb_tilde_07_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number comb_tilde_01_x;
                number comb_tilde_01_delayTime;
                number comb_tilde_01_gain;
                number comb_tilde_01_ffGain;
                number comb_tilde_01_fbGain;
                number dspexpr_01_in1;
                number dspexpr_01_in2;
                number comb_tilde_02_x;
                number comb_tilde_02_delayTime;
                number comb_tilde_02_gain;
                number comb_tilde_02_ffGain;
                number comb_tilde_02_fbGain;
                number dspexpr_02_in1;
                number dspexpr_02_in2;
                number comb_tilde_03_x;
                number comb_tilde_03_delayTime;
                number comb_tilde_03_gain;
                number comb_tilde_03_ffGain;
                number comb_tilde_03_fbGain;
                number dspexpr_03_in1;
                number dspexpr_03_in2;
                number dspexpr_04_in1;
                number dspexpr_04_in2;
                number comb_tilde_04_x;
                number comb_tilde_04_delayTime;
                number comb_tilde_04_gain;
                number comb_tilde_04_ffGain;
                number comb_tilde_04_fbGain;
                number dspexpr_05_in1;
                number dspexpr_05_in2;
                number dspexpr_06_in1;
                number dspexpr_06_in2;
                number dspexpr_07_in1;
                number dspexpr_07_in2;
                number comb_tilde_05_x;
                number comb_tilde_05_delayTime;
                number comb_tilde_05_gain;
                number comb_tilde_05_ffGain;
                number comb_tilde_05_fbGain;
                number dspexpr_08_in1;
                number dspexpr_08_in2;
                number comb_tilde_06_x;
                number comb_tilde_06_delayTime;
                number comb_tilde_06_gain;
                number comb_tilde_06_ffGain;
                number comb_tilde_06_fbGain;
                number dspexpr_09_in1;
                number dspexpr_09_in2;
                number comb_tilde_07_x;
                number comb_tilde_07_delayTime;
                number comb_tilde_07_gain;
                number comb_tilde_07_ffGain;
                number comb_tilde_07_fbGain;
                number dspexpr_10_in1;
                number dspexpr_10_in2;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef comb_tilde_01_feedForward_buffer;
                Index comb_tilde_01_feedForward__maxdelay;
                Int comb_tilde_01_feedForward_sizemode;
                Index comb_tilde_01_feedForward_wrap;
                Int comb_tilde_01_feedForward_reader;
                Int comb_tilde_01_feedForward_writer;
                Float64BufferRef comb_tilde_01_feedBack_buffer;
                Index comb_tilde_01_feedBack__maxdelay;
                Int comb_tilde_01_feedBack_sizemode;
                Index comb_tilde_01_feedBack_wrap;
                Int comb_tilde_01_feedBack_reader;
                Int comb_tilde_01_feedBack_writer;
                bool comb_tilde_01_setupDone;
                Float64BufferRef comb_tilde_02_feedForward_buffer;
                Index comb_tilde_02_feedForward__maxdelay;
                Int comb_tilde_02_feedForward_sizemode;
                Index comb_tilde_02_feedForward_wrap;
                Int comb_tilde_02_feedForward_reader;
                Int comb_tilde_02_feedForward_writer;
                Float64BufferRef comb_tilde_02_feedBack_buffer;
                Index comb_tilde_02_feedBack__maxdelay;
                Int comb_tilde_02_feedBack_sizemode;
                Index comb_tilde_02_feedBack_wrap;
                Int comb_tilde_02_feedBack_reader;
                Int comb_tilde_02_feedBack_writer;
                bool comb_tilde_02_setupDone;
                Float64BufferRef comb_tilde_03_feedForward_buffer;
                Index comb_tilde_03_feedForward__maxdelay;
                Int comb_tilde_03_feedForward_sizemode;
                Index comb_tilde_03_feedForward_wrap;
                Int comb_tilde_03_feedForward_reader;
                Int comb_tilde_03_feedForward_writer;
                Float64BufferRef comb_tilde_03_feedBack_buffer;
                Index comb_tilde_03_feedBack__maxdelay;
                Int comb_tilde_03_feedBack_sizemode;
                Index comb_tilde_03_feedBack_wrap;
                Int comb_tilde_03_feedBack_reader;
                Int comb_tilde_03_feedBack_writer;
                bool comb_tilde_03_setupDone;
                Float64BufferRef comb_tilde_04_feedForward_buffer;
                Index comb_tilde_04_feedForward__maxdelay;
                Int comb_tilde_04_feedForward_sizemode;
                Index comb_tilde_04_feedForward_wrap;
                Int comb_tilde_04_feedForward_reader;
                Int comb_tilde_04_feedForward_writer;
                Float64BufferRef comb_tilde_04_feedBack_buffer;
                Index comb_tilde_04_feedBack__maxdelay;
                Int comb_tilde_04_feedBack_sizemode;
                Index comb_tilde_04_feedBack_wrap;
                Int comb_tilde_04_feedBack_reader;
                Int comb_tilde_04_feedBack_writer;
                bool comb_tilde_04_setupDone;
                Float64BufferRef comb_tilde_05_feedForward_buffer;
                Index comb_tilde_05_feedForward__maxdelay;
                Int comb_tilde_05_feedForward_sizemode;
                Index comb_tilde_05_feedForward_wrap;
                Int comb_tilde_05_feedForward_reader;
                Int comb_tilde_05_feedForward_writer;
                Float64BufferRef comb_tilde_05_feedBack_buffer;
                Index comb_tilde_05_feedBack__maxdelay;
                Int comb_tilde_05_feedBack_sizemode;
                Index comb_tilde_05_feedBack_wrap;
                Int comb_tilde_05_feedBack_reader;
                Int comb_tilde_05_feedBack_writer;
                bool comb_tilde_05_setupDone;
                Float64BufferRef comb_tilde_06_feedForward_buffer;
                Index comb_tilde_06_feedForward__maxdelay;
                Int comb_tilde_06_feedForward_sizemode;
                Index comb_tilde_06_feedForward_wrap;
                Int comb_tilde_06_feedForward_reader;
                Int comb_tilde_06_feedForward_writer;
                Float64BufferRef comb_tilde_06_feedBack_buffer;
                Index comb_tilde_06_feedBack__maxdelay;
                Int comb_tilde_06_feedBack_sizemode;
                Index comb_tilde_06_feedBack_wrap;
                Int comb_tilde_06_feedBack_reader;
                Int comb_tilde_06_feedBack_writer;
                bool comb_tilde_06_setupDone;
                Float64BufferRef comb_tilde_07_feedForward_buffer;
                Index comb_tilde_07_feedForward__maxdelay;
                Int comb_tilde_07_feedForward_sizemode;
                Index comb_tilde_07_feedForward_wrap;
                Int comb_tilde_07_feedForward_reader;
                Int comb_tilde_07_feedForward_writer;
                Float64BufferRef comb_tilde_07_feedBack_buffer;
                Index comb_tilde_07_feedBack__maxdelay;
                Int comb_tilde_07_feedBack_sizemode;
                Index comb_tilde_07_feedBack_wrap;
                Int comb_tilde_07_feedBack_reader;
                Int comb_tilde_07_feedBack_writer;
                bool comb_tilde_07_setupDone;
                number stackprotect_count;
                DataRef comb_tilde_01_feedForward_bufferobj;
                DataRef comb_tilde_01_feedBack_bufferobj;
                DataRef comb_tilde_02_feedForward_bufferobj;
                DataRef comb_tilde_02_feedBack_bufferobj;
                DataRef comb_tilde_03_feedForward_bufferobj;
                DataRef comb_tilde_03_feedBack_bufferobj;
                DataRef comb_tilde_04_feedForward_bufferobj;
                DataRef comb_tilde_04_feedBack_bufferobj;
                DataRef comb_tilde_05_feedForward_bufferobj;
                DataRef comb_tilde_05_feedBack_bufferobj;
                DataRef comb_tilde_06_feedForward_bufferobj;
                DataRef comb_tilde_06_feedBack_bufferobj;
                DataRef comb_tilde_07_feedForward_bufferobj;
                DataRef comb_tilde_07_feedBack_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1027 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1051;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1027()
            {
            }
            
            ~RNBOSubpatcher_1027()
            {
            }
            
            virtual RNBOSubpatcher_1051* getPatcher() const {
                return static_cast<RNBOSubpatcher_1051 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                SampleValue * out5 = (numOutputs >= 5 && outputs[4] ? outputs[4] : this->dummyBuffer);
                SampleValue * out6 = (numOutputs >= 6 && outputs[5] ? outputs[5] : this->dummyBuffer);
                SampleValue * out7 = (numOutputs >= 7 && outputs[6] ? outputs[6] : this->dummyBuffer);
                SampleValue * out8 = (numOutputs >= 8 && outputs[7] ? outputs[7] : this->dummyBuffer);
                SampleValue * out9 = (numOutputs >= 9 && outputs[8] ? outputs[8] : this->dummyBuffer);
                SampleValue * out10 = (numOutputs >= 10 && outputs[9] ? outputs[9] : this->dummyBuffer);
                SampleValue * out11 = (numOutputs >= 11 && outputs[10] ? outputs[10] : this->dummyBuffer);
                SampleValue * out12 = (numOutputs >= 12 && outputs[11] ? outputs[11] : this->dummyBuffer);
                SampleValue * out13 = (numOutputs >= 13 && outputs[12] ? outputs[12] : this->dummyBuffer);
                SampleValue * out14 = (numOutputs >= 14 && outputs[13] ? outputs[13] : this->dummyBuffer);
                SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
                SampleValue * in8 = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
                this->signalforwarder_06_perform(in1, out2, n);
                this->signalforwarder_07_perform(in1, out1, n);
                this->signalforwarder_08_perform(in2, out12, n);
                this->signalforwarder_09_perform(in3, out13, n);
                this->signalforwarder_10_perform(in3, out3, n);
                this->signalforwarder_11_perform(in4, out14, n);
                this->signalforwarder_12_perform(in4, out4, n);
                this->signalforwarder_13_perform(in5, out8, n);
                this->signalforwarder_14_perform(in5, out9, n);
                this->signalforwarder_15_perform(in6, out5, n);
                this->signalforwarder_16_perform(in7, out10, n);
                this->signalforwarder_17_perform(in7, out6, n);
                this->signalforwarder_18_perform(in8, out11, n);
                this->signalforwarder_19_perform(in8, out7, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 8;
            }
            
            Index getNumOutputChannels() const {
                return 14;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void signalforwarder_06_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_07_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_08_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_09_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_10_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_11_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_12_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_13_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_14_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_15_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_16_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_17_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_18_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_19_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1028 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1051;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1028()
            {
            }
            
            ~RNBOSubpatcher_1028()
            {
            }
            
            virtual RNBOSubpatcher_1051* getPatcher() const {
                return static_cast<RNBOSubpatcher_1051 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() {
                return this->sr;
            }
            
            Index vectorsize() {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->allpass_tilde_04_perform(
                    in1,
                    this->allpass_tilde_04_delayTime,
                    this->allpass_tilde_04_gain,
                    this->signals[0],
                    n
                );
            
                this->allpass_tilde_03_perform(
                    this->signals[0],
                    this->allpass_tilde_03_delayTime,
                    this->allpass_tilde_03_gain,
                    this->signals[1],
                    n
                );
            
                this->allpass_tilde_02_perform(
                    this->signals[1],
                    this->allpass_tilde_02_delayTime,
                    this->allpass_tilde_02_gain,
                    this->signals[0],
                    n
                );
            
                this->allpass_tilde_01_perform(
                    this->signals[0],
                    this->allpass_tilde_01_delayTime,
                    this->allpass_tilde_01_gain,
                    out1,
                    n
                );
            
                this->allpass_tilde_08_perform(
                    in2,
                    this->allpass_tilde_08_delayTime,
                    this->allpass_tilde_08_gain,
                    this->signals[0],
                    n
                );
            
                this->allpass_tilde_07_perform(
                    this->signals[0],
                    this->allpass_tilde_07_delayTime,
                    this->allpass_tilde_07_gain,
                    this->signals[1],
                    n
                );
            
                this->allpass_tilde_06_perform(
                    this->signals[1],
                    this->allpass_tilde_06_delayTime,
                    this->allpass_tilde_06_gain,
                    this->signals[0],
                    n
                );
            
                this->allpass_tilde_05_perform(
                    this->signals[0],
                    this->allpass_tilde_05_delayTime,
                    this->allpass_tilde_05_gain,
                    out2,
                    n
                );
            
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 2; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->allpass_tilde_04_dspsetup(forceDSPSetup);
                this->allpass_tilde_03_dspsetup(forceDSPSetup);
                this->allpass_tilde_02_dspsetup(forceDSPSetup);
                this->allpass_tilde_01_dspsetup(forceDSPSetup);
                this->allpass_tilde_08_dspsetup(forceDSPSetup);
                this->allpass_tilde_07_dspsetup(forceDSPSetup);
                this->allpass_tilde_06_dspsetup(forceDSPSetup);
                this->allpass_tilde_05_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 5:
                    return addressOf(this->allpass_tilde_01_feedForward_bufferobj);
                    break;
                case 6:
                    return addressOf(this->allpass_tilde_01_feedBack_bufferobj);
                    break;
                case 7:
                    return addressOf(this->allpass_tilde_02_feedForward_bufferobj);
                    break;
                case 8:
                    return addressOf(this->allpass_tilde_02_feedBack_bufferobj);
                    break;
                case 9:
                    return addressOf(this->allpass_tilde_03_feedForward_bufferobj);
                    break;
                case 10:
                    return addressOf(this->allpass_tilde_03_feedBack_bufferobj);
                    break;
                case 11:
                    return addressOf(this->allpass_tilde_04_feedForward_bufferobj);
                    break;
                case 12:
                    return addressOf(this->allpass_tilde_04_feedBack_bufferobj);
                    break;
                case 13:
                    return addressOf(this->allpass_tilde_05_feedForward_bufferobj);
                    break;
                case 14:
                    return addressOf(this->allpass_tilde_05_feedBack_bufferobj);
                    break;
                case 15:
                    return addressOf(this->allpass_tilde_06_feedForward_bufferobj);
                    break;
                case 16:
                    return addressOf(this->allpass_tilde_06_feedBack_bufferobj);
                    break;
                case 17:
                    return addressOf(this->allpass_tilde_07_feedForward_bufferobj);
                    break;
                case 18:
                    return addressOf(this->allpass_tilde_07_feedBack_bufferobj);
                    break;
                case 19:
                    return addressOf(this->allpass_tilde_08_feedForward_bufferobj);
                    break;
                case 20:
                    return addressOf(this->allpass_tilde_08_feedBack_bufferobj);
                    break;
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 16;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 5) {
                    this->allpass_tilde_01_feedForward_buffer = new Float64Buffer(this->allpass_tilde_01_feedForward_bufferobj);
                }
            
                if (index == 6) {
                    this->allpass_tilde_01_feedBack_buffer = new Float64Buffer(this->allpass_tilde_01_feedBack_bufferobj);
                }
            
                if (index == 7) {
                    this->allpass_tilde_02_feedForward_buffer = new Float64Buffer(this->allpass_tilde_02_feedForward_bufferobj);
                }
            
                if (index == 8) {
                    this->allpass_tilde_02_feedBack_buffer = new Float64Buffer(this->allpass_tilde_02_feedBack_bufferobj);
                }
            
                if (index == 9) {
                    this->allpass_tilde_03_feedForward_buffer = new Float64Buffer(this->allpass_tilde_03_feedForward_bufferobj);
                }
            
                if (index == 10) {
                    this->allpass_tilde_03_feedBack_buffer = new Float64Buffer(this->allpass_tilde_03_feedBack_bufferobj);
                }
            
                if (index == 11) {
                    this->allpass_tilde_04_feedForward_buffer = new Float64Buffer(this->allpass_tilde_04_feedForward_bufferobj);
                }
            
                if (index == 12) {
                    this->allpass_tilde_04_feedBack_buffer = new Float64Buffer(this->allpass_tilde_04_feedBack_bufferobj);
                }
            
                if (index == 13) {
                    this->allpass_tilde_05_feedForward_buffer = new Float64Buffer(this->allpass_tilde_05_feedForward_bufferobj);
                }
            
                if (index == 14) {
                    this->allpass_tilde_05_feedBack_buffer = new Float64Buffer(this->allpass_tilde_05_feedBack_bufferobj);
                }
            
                if (index == 15) {
                    this->allpass_tilde_06_feedForward_buffer = new Float64Buffer(this->allpass_tilde_06_feedForward_bufferobj);
                }
            
                if (index == 16) {
                    this->allpass_tilde_06_feedBack_buffer = new Float64Buffer(this->allpass_tilde_06_feedBack_bufferobj);
                }
            
                if (index == 17) {
                    this->allpass_tilde_07_feedForward_buffer = new Float64Buffer(this->allpass_tilde_07_feedForward_bufferobj);
                }
            
                if (index == 18) {
                    this->allpass_tilde_07_feedBack_buffer = new Float64Buffer(this->allpass_tilde_07_feedBack_bufferobj);
                }
            
                if (index == 19) {
                    this->allpass_tilde_08_feedForward_buffer = new Float64Buffer(this->allpass_tilde_08_feedForward_bufferobj);
                }
            
                if (index == 20) {
                    this->allpass_tilde_08_feedBack_buffer = new Float64Buffer(this->allpass_tilde_08_feedBack_bufferobj);
                }
            }
            
            void initialize() {
                this->allpass_tilde_01_feedForward_bufferobj = initDataRef("allpass_tilde_01_feedForward_bufferobj", true, nullptr);
                this->allpass_tilde_01_feedBack_bufferobj = initDataRef("allpass_tilde_01_feedBack_bufferobj", true, nullptr);
                this->allpass_tilde_02_feedForward_bufferobj = initDataRef("allpass_tilde_02_feedForward_bufferobj", true, nullptr);
                this->allpass_tilde_02_feedBack_bufferobj = initDataRef("allpass_tilde_02_feedBack_bufferobj", true, nullptr);
                this->allpass_tilde_03_feedForward_bufferobj = initDataRef("allpass_tilde_03_feedForward_bufferobj", true, nullptr);
                this->allpass_tilde_03_feedBack_bufferobj = initDataRef("allpass_tilde_03_feedBack_bufferobj", true, nullptr);
                this->allpass_tilde_04_feedForward_bufferobj = initDataRef("allpass_tilde_04_feedForward_bufferobj", true, nullptr);
                this->allpass_tilde_04_feedBack_bufferobj = initDataRef("allpass_tilde_04_feedBack_bufferobj", true, nullptr);
                this->allpass_tilde_05_feedForward_bufferobj = initDataRef("allpass_tilde_05_feedForward_bufferobj", true, nullptr);
                this->allpass_tilde_05_feedBack_bufferobj = initDataRef("allpass_tilde_05_feedBack_bufferobj", true, nullptr);
                this->allpass_tilde_06_feedForward_bufferobj = initDataRef("allpass_tilde_06_feedForward_bufferobj", true, nullptr);
                this->allpass_tilde_06_feedBack_bufferobj = initDataRef("allpass_tilde_06_feedBack_bufferobj", true, nullptr);
                this->allpass_tilde_07_feedForward_bufferobj = initDataRef("allpass_tilde_07_feedForward_bufferobj", true, nullptr);
                this->allpass_tilde_07_feedBack_bufferobj = initDataRef("allpass_tilde_07_feedBack_bufferobj", true, nullptr);
                this->allpass_tilde_08_feedForward_bufferobj = initDataRef("allpass_tilde_08_feedForward_bufferobj", true, nullptr);
                this->allpass_tilde_08_feedBack_bufferobj = initDataRef("allpass_tilde_08_feedBack_bufferobj", true, nullptr);
                this->assign_defaults();
                this->setState();
                this->allpass_tilde_01_feedForward_bufferobj->setIndex(5);
                this->allpass_tilde_01_feedForward_buffer = new Float64Buffer(this->allpass_tilde_01_feedForward_bufferobj);
                this->allpass_tilde_01_feedBack_bufferobj->setIndex(6);
                this->allpass_tilde_01_feedBack_buffer = new Float64Buffer(this->allpass_tilde_01_feedBack_bufferobj);
                this->allpass_tilde_02_feedForward_bufferobj->setIndex(7);
                this->allpass_tilde_02_feedForward_buffer = new Float64Buffer(this->allpass_tilde_02_feedForward_bufferobj);
                this->allpass_tilde_02_feedBack_bufferobj->setIndex(8);
                this->allpass_tilde_02_feedBack_buffer = new Float64Buffer(this->allpass_tilde_02_feedBack_bufferobj);
                this->allpass_tilde_03_feedForward_bufferobj->setIndex(9);
                this->allpass_tilde_03_feedForward_buffer = new Float64Buffer(this->allpass_tilde_03_feedForward_bufferobj);
                this->allpass_tilde_03_feedBack_bufferobj->setIndex(10);
                this->allpass_tilde_03_feedBack_buffer = new Float64Buffer(this->allpass_tilde_03_feedBack_bufferobj);
                this->allpass_tilde_04_feedForward_bufferobj->setIndex(11);
                this->allpass_tilde_04_feedForward_buffer = new Float64Buffer(this->allpass_tilde_04_feedForward_bufferobj);
                this->allpass_tilde_04_feedBack_bufferobj->setIndex(12);
                this->allpass_tilde_04_feedBack_buffer = new Float64Buffer(this->allpass_tilde_04_feedBack_bufferobj);
                this->allpass_tilde_05_feedForward_bufferobj->setIndex(13);
                this->allpass_tilde_05_feedForward_buffer = new Float64Buffer(this->allpass_tilde_05_feedForward_bufferobj);
                this->allpass_tilde_05_feedBack_bufferobj->setIndex(14);
                this->allpass_tilde_05_feedBack_buffer = new Float64Buffer(this->allpass_tilde_05_feedBack_bufferobj);
                this->allpass_tilde_06_feedForward_bufferobj->setIndex(15);
                this->allpass_tilde_06_feedForward_buffer = new Float64Buffer(this->allpass_tilde_06_feedForward_bufferobj);
                this->allpass_tilde_06_feedBack_bufferobj->setIndex(16);
                this->allpass_tilde_06_feedBack_buffer = new Float64Buffer(this->allpass_tilde_06_feedBack_bufferobj);
                this->allpass_tilde_07_feedForward_bufferobj->setIndex(17);
                this->allpass_tilde_07_feedForward_buffer = new Float64Buffer(this->allpass_tilde_07_feedForward_bufferobj);
                this->allpass_tilde_07_feedBack_bufferobj->setIndex(18);
                this->allpass_tilde_07_feedBack_buffer = new Float64Buffer(this->allpass_tilde_07_feedBack_bufferobj);
                this->allpass_tilde_08_feedForward_bufferobj->setIndex(19);
                this->allpass_tilde_08_feedForward_buffer = new Float64Buffer(this->allpass_tilde_08_feedForward_bufferobj);
                this->allpass_tilde_08_feedBack_bufferobj->setIndex(20);
                this->allpass_tilde_08_feedBack_buffer = new Float64Buffer(this->allpass_tilde_08_feedBack_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->allpass_tilde_01_feedForward_init();
                this->allpass_tilde_01_feedBack_init();
                this->allpass_tilde_01_init();
                this->allpass_tilde_02_feedForward_init();
                this->allpass_tilde_02_feedBack_init();
                this->allpass_tilde_02_init();
                this->allpass_tilde_03_feedForward_init();
                this->allpass_tilde_03_feedBack_init();
                this->allpass_tilde_03_init();
                this->allpass_tilde_04_feedForward_init();
                this->allpass_tilde_04_feedBack_init();
                this->allpass_tilde_04_init();
                this->allpass_tilde_05_feedForward_init();
                this->allpass_tilde_05_feedBack_init();
                this->allpass_tilde_05_init();
                this->allpass_tilde_06_feedForward_init();
                this->allpass_tilde_06_feedBack_init();
                this->allpass_tilde_06_init();
                this->allpass_tilde_07_feedForward_init();
                this->allpass_tilde_07_feedBack_init();
                this->allpass_tilde_07_init();
                this->allpass_tilde_08_feedForward_init();
                this->allpass_tilde_08_feedBack_init();
                this->allpass_tilde_08_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->allpass_tilde_01_feedForward_buffer = this->allpass_tilde_01_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_01_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_01_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_01_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->allpass_tilde_01_feedBack_buffer = this->allpass_tilde_01_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_01_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_01_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_01_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->allpass_tilde_02_feedForward_buffer = this->allpass_tilde_02_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_02_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_02_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_02_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->allpass_tilde_02_feedBack_buffer = this->allpass_tilde_02_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_02_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_02_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_02_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->allpass_tilde_03_feedForward_buffer = this->allpass_tilde_03_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_03_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_03_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_03_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->allpass_tilde_03_feedBack_buffer = this->allpass_tilde_03_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_03_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_03_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_03_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            
                this->allpass_tilde_04_feedForward_buffer = this->allpass_tilde_04_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_04_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_04_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_04_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(11);
                }
            
                this->allpass_tilde_04_feedBack_buffer = this->allpass_tilde_04_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_04_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_04_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_04_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(12);
                }
            
                this->allpass_tilde_05_feedForward_buffer = this->allpass_tilde_05_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_05_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_05_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_05_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(13);
                }
            
                this->allpass_tilde_05_feedBack_buffer = this->allpass_tilde_05_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_05_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_05_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_05_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(14);
                }
            
                this->allpass_tilde_06_feedForward_buffer = this->allpass_tilde_06_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_06_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_06_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_06_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(15);
                }
            
                this->allpass_tilde_06_feedBack_buffer = this->allpass_tilde_06_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_06_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_06_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_06_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(16);
                }
            
                this->allpass_tilde_07_feedForward_buffer = this->allpass_tilde_07_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_07_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_07_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_07_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(17);
                }
            
                this->allpass_tilde_07_feedBack_buffer = this->allpass_tilde_07_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_07_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_07_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_07_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(18);
                }
            
                this->allpass_tilde_08_feedForward_buffer = this->allpass_tilde_08_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_08_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_08_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_08_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(19);
                }
            
                this->allpass_tilde_08_feedBack_buffer = this->allpass_tilde_08_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_08_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_08_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_08_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(20);
                }
            }
            
            void allpass_tilde_04_perform(const Sample * x, number delayTime, number gain, Sample * out1, Index n) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.75;
                    number delayTimeinSamps = this->mstosamps(4.76);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_04_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_04_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_04_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_04_feedBack_write(ov);
                    this->allpass_tilde_04_feedForward_step();
                    this->allpass_tilde_04_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_03_perform(const Sample * x, number delayTime, number gain, Sample * out1, Index n) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.75;
                    number delayTimeinSamps = this->mstosamps(3.58);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_03_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_03_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_03_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_03_feedBack_write(ov);
                    this->allpass_tilde_03_feedForward_step();
                    this->allpass_tilde_03_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_02_perform(const Sample * x, number delayTime, number gain, Sample * out1, Index n) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.625;
                    number delayTimeinSamps = this->mstosamps(12.73);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_02_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_02_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_02_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_02_feedBack_write(ov);
                    this->allpass_tilde_02_feedForward_step();
                    this->allpass_tilde_02_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_01_perform(const Sample * x, number delayTime, number gain, Sample * out1, Index n) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.625;
                    number delayTimeinSamps = this->mstosamps(9.3);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_01_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_01_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_01_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_01_feedBack_write(ov);
                    this->allpass_tilde_01_feedForward_step();
                    this->allpass_tilde_01_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_08_perform(const Sample * x, number delayTime, number gain, Sample * out1, Index n) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.75;
                    number delayTimeinSamps = this->mstosamps(4.76);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_08_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_08_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_08_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_08_feedBack_write(ov);
                    this->allpass_tilde_08_feedForward_step();
                    this->allpass_tilde_08_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_07_perform(const Sample * x, number delayTime, number gain, Sample * out1, Index n) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.75;
                    number delayTimeinSamps = this->mstosamps(3.58);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_07_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_07_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_07_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_07_feedBack_write(ov);
                    this->allpass_tilde_07_feedForward_step();
                    this->allpass_tilde_07_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_06_perform(const Sample * x, number delayTime, number gain, Sample * out1, Index n) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.625;
                    number delayTimeinSamps = this->mstosamps(12.73);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_06_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_06_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_06_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_06_feedBack_write(ov);
                    this->allpass_tilde_06_feedForward_step();
                    this->allpass_tilde_06_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_05_perform(const Sample * x, number delayTime, number gain, Sample * out1, Index n) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.625;
                    number delayTimeinSamps = this->mstosamps(9.3);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_05_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_05_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_05_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_05_feedBack_write(ov);
                    this->allpass_tilde_05_feedForward_step();
                    this->allpass_tilde_05_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void allpass_tilde_01_feedForward_step() {
                this->allpass_tilde_01_feedForward_reader++;
            
                if (this->allpass_tilde_01_feedForward_reader >= (int)(this->allpass_tilde_01_feedForward_buffer->getSize()))
                    this->allpass_tilde_01_feedForward_reader = 0;
            }
            
            number allpass_tilde_01_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_01_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_01_feedForward_wrap))
                );
            }
            
            void allpass_tilde_01_feedForward_write(number v) {
                this->allpass_tilde_01_feedForward_writer = this->allpass_tilde_01_feedForward_reader;
                this->allpass_tilde_01_feedForward_buffer[(Index)this->allpass_tilde_01_feedForward_writer] = v;
            }
            
            number allpass_tilde_01_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_01_feedForward__maxdelay : size);
                number val = this->allpass_tilde_01_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_01_feedForward_write(v);
                this->allpass_tilde_01_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_01_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_01_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_01_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_01_feedForward_init() {
                auto result = this->allpass_tilde_01_feedForward_calcSizeInSamples();
                this->allpass_tilde_01_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_01_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_01_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_01_feedForward_clear() {
                this->allpass_tilde_01_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_01_feedForward_reset() {
                auto result = this->allpass_tilde_01_feedForward_calcSizeInSamples();
                this->allpass_tilde_01_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_01_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_01_feedForward_buffer);
                this->allpass_tilde_01_feedForward_wrap = this->allpass_tilde_01_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_01_feedForward_clear();
            
                if (this->allpass_tilde_01_feedForward_reader >= this->allpass_tilde_01_feedForward__maxdelay || this->allpass_tilde_01_feedForward_writer >= this->allpass_tilde_01_feedForward__maxdelay) {
                    this->allpass_tilde_01_feedForward_reader = 0;
                    this->allpass_tilde_01_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_01_feedForward_dspsetup() {
                this->allpass_tilde_01_feedForward_reset();
            }
            
            number allpass_tilde_01_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_01_feedForward_size() {
                return this->allpass_tilde_01_feedForward__maxdelay;
            }
            
            void allpass_tilde_01_feedBack_step() {
                this->allpass_tilde_01_feedBack_reader++;
            
                if (this->allpass_tilde_01_feedBack_reader >= (int)(this->allpass_tilde_01_feedBack_buffer->getSize()))
                    this->allpass_tilde_01_feedBack_reader = 0;
            }
            
            number allpass_tilde_01_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_01_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_01_feedBack_wrap))
                );
            }
            
            void allpass_tilde_01_feedBack_write(number v) {
                this->allpass_tilde_01_feedBack_writer = this->allpass_tilde_01_feedBack_reader;
                this->allpass_tilde_01_feedBack_buffer[(Index)this->allpass_tilde_01_feedBack_writer] = v;
            }
            
            number allpass_tilde_01_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_01_feedBack__maxdelay : size);
                number val = this->allpass_tilde_01_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_01_feedBack_write(v);
                this->allpass_tilde_01_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_01_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_01_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_01_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_01_feedBack_init() {
                auto result = this->allpass_tilde_01_feedBack_calcSizeInSamples();
                this->allpass_tilde_01_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_01_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_01_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_01_feedBack_clear() {
                this->allpass_tilde_01_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_01_feedBack_reset() {
                auto result = this->allpass_tilde_01_feedBack_calcSizeInSamples();
                this->allpass_tilde_01_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_01_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_01_feedBack_buffer);
                this->allpass_tilde_01_feedBack_wrap = this->allpass_tilde_01_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_01_feedBack_clear();
            
                if (this->allpass_tilde_01_feedBack_reader >= this->allpass_tilde_01_feedBack__maxdelay || this->allpass_tilde_01_feedBack_writer >= this->allpass_tilde_01_feedBack__maxdelay) {
                    this->allpass_tilde_01_feedBack_reader = 0;
                    this->allpass_tilde_01_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_01_feedBack_dspsetup() {
                this->allpass_tilde_01_feedBack_reset();
            }
            
            number allpass_tilde_01_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_01_feedBack_size() {
                return this->allpass_tilde_01_feedBack__maxdelay;
            }
            
            void allpass_tilde_01_init() {
                this->allpass_tilde_01_feedForward_init();
                this->allpass_tilde_01_feedBack_init();
            }
            
            void allpass_tilde_01_clear() {
                this->allpass_tilde_01_feedForward_clear();
                this->allpass_tilde_01_feedBack_clear();
            }
            
            void allpass_tilde_01_reset() {
                this->allpass_tilde_01_init();
                this->allpass_tilde_01_clear();
            }
            
            void allpass_tilde_01_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_01_reset();
                this->allpass_tilde_01_setupDone = true;
                this->allpass_tilde_01_feedForward_dspsetup();
                this->allpass_tilde_01_feedBack_dspsetup();
            }
            
            void allpass_tilde_02_feedForward_step() {
                this->allpass_tilde_02_feedForward_reader++;
            
                if (this->allpass_tilde_02_feedForward_reader >= (int)(this->allpass_tilde_02_feedForward_buffer->getSize()))
                    this->allpass_tilde_02_feedForward_reader = 0;
            }
            
            number allpass_tilde_02_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_02_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_02_feedForward_wrap))
                );
            }
            
            void allpass_tilde_02_feedForward_write(number v) {
                this->allpass_tilde_02_feedForward_writer = this->allpass_tilde_02_feedForward_reader;
                this->allpass_tilde_02_feedForward_buffer[(Index)this->allpass_tilde_02_feedForward_writer] = v;
            }
            
            number allpass_tilde_02_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_02_feedForward__maxdelay : size);
                number val = this->allpass_tilde_02_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_02_feedForward_write(v);
                this->allpass_tilde_02_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_02_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_02_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_02_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_02_feedForward_init() {
                auto result = this->allpass_tilde_02_feedForward_calcSizeInSamples();
                this->allpass_tilde_02_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_02_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_02_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_02_feedForward_clear() {
                this->allpass_tilde_02_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_02_feedForward_reset() {
                auto result = this->allpass_tilde_02_feedForward_calcSizeInSamples();
                this->allpass_tilde_02_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_02_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_02_feedForward_buffer);
                this->allpass_tilde_02_feedForward_wrap = this->allpass_tilde_02_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_02_feedForward_clear();
            
                if (this->allpass_tilde_02_feedForward_reader >= this->allpass_tilde_02_feedForward__maxdelay || this->allpass_tilde_02_feedForward_writer >= this->allpass_tilde_02_feedForward__maxdelay) {
                    this->allpass_tilde_02_feedForward_reader = 0;
                    this->allpass_tilde_02_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_02_feedForward_dspsetup() {
                this->allpass_tilde_02_feedForward_reset();
            }
            
            number allpass_tilde_02_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_02_feedForward_size() {
                return this->allpass_tilde_02_feedForward__maxdelay;
            }
            
            void allpass_tilde_02_feedBack_step() {
                this->allpass_tilde_02_feedBack_reader++;
            
                if (this->allpass_tilde_02_feedBack_reader >= (int)(this->allpass_tilde_02_feedBack_buffer->getSize()))
                    this->allpass_tilde_02_feedBack_reader = 0;
            }
            
            number allpass_tilde_02_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_02_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_02_feedBack_wrap))
                );
            }
            
            void allpass_tilde_02_feedBack_write(number v) {
                this->allpass_tilde_02_feedBack_writer = this->allpass_tilde_02_feedBack_reader;
                this->allpass_tilde_02_feedBack_buffer[(Index)this->allpass_tilde_02_feedBack_writer] = v;
            }
            
            number allpass_tilde_02_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_02_feedBack__maxdelay : size);
                number val = this->allpass_tilde_02_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_02_feedBack_write(v);
                this->allpass_tilde_02_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_02_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_02_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_02_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_02_feedBack_init() {
                auto result = this->allpass_tilde_02_feedBack_calcSizeInSamples();
                this->allpass_tilde_02_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_02_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_02_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_02_feedBack_clear() {
                this->allpass_tilde_02_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_02_feedBack_reset() {
                auto result = this->allpass_tilde_02_feedBack_calcSizeInSamples();
                this->allpass_tilde_02_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_02_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_02_feedBack_buffer);
                this->allpass_tilde_02_feedBack_wrap = this->allpass_tilde_02_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_02_feedBack_clear();
            
                if (this->allpass_tilde_02_feedBack_reader >= this->allpass_tilde_02_feedBack__maxdelay || this->allpass_tilde_02_feedBack_writer >= this->allpass_tilde_02_feedBack__maxdelay) {
                    this->allpass_tilde_02_feedBack_reader = 0;
                    this->allpass_tilde_02_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_02_feedBack_dspsetup() {
                this->allpass_tilde_02_feedBack_reset();
            }
            
            number allpass_tilde_02_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_02_feedBack_size() {
                return this->allpass_tilde_02_feedBack__maxdelay;
            }
            
            void allpass_tilde_02_init() {
                this->allpass_tilde_02_feedForward_init();
                this->allpass_tilde_02_feedBack_init();
            }
            
            void allpass_tilde_02_clear() {
                this->allpass_tilde_02_feedForward_clear();
                this->allpass_tilde_02_feedBack_clear();
            }
            
            void allpass_tilde_02_reset() {
                this->allpass_tilde_02_init();
                this->allpass_tilde_02_clear();
            }
            
            void allpass_tilde_02_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_02_reset();
                this->allpass_tilde_02_setupDone = true;
                this->allpass_tilde_02_feedForward_dspsetup();
                this->allpass_tilde_02_feedBack_dspsetup();
            }
            
            void allpass_tilde_03_feedForward_step() {
                this->allpass_tilde_03_feedForward_reader++;
            
                if (this->allpass_tilde_03_feedForward_reader >= (int)(this->allpass_tilde_03_feedForward_buffer->getSize()))
                    this->allpass_tilde_03_feedForward_reader = 0;
            }
            
            number allpass_tilde_03_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_03_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_03_feedForward_wrap))
                );
            }
            
            void allpass_tilde_03_feedForward_write(number v) {
                this->allpass_tilde_03_feedForward_writer = this->allpass_tilde_03_feedForward_reader;
                this->allpass_tilde_03_feedForward_buffer[(Index)this->allpass_tilde_03_feedForward_writer] = v;
            }
            
            number allpass_tilde_03_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_03_feedForward__maxdelay : size);
                number val = this->allpass_tilde_03_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_03_feedForward_write(v);
                this->allpass_tilde_03_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_03_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_03_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_03_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_03_feedForward_init() {
                auto result = this->allpass_tilde_03_feedForward_calcSizeInSamples();
                this->allpass_tilde_03_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_03_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_03_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_03_feedForward_clear() {
                this->allpass_tilde_03_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_03_feedForward_reset() {
                auto result = this->allpass_tilde_03_feedForward_calcSizeInSamples();
                this->allpass_tilde_03_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_03_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_03_feedForward_buffer);
                this->allpass_tilde_03_feedForward_wrap = this->allpass_tilde_03_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_03_feedForward_clear();
            
                if (this->allpass_tilde_03_feedForward_reader >= this->allpass_tilde_03_feedForward__maxdelay || this->allpass_tilde_03_feedForward_writer >= this->allpass_tilde_03_feedForward__maxdelay) {
                    this->allpass_tilde_03_feedForward_reader = 0;
                    this->allpass_tilde_03_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_03_feedForward_dspsetup() {
                this->allpass_tilde_03_feedForward_reset();
            }
            
            number allpass_tilde_03_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_03_feedForward_size() {
                return this->allpass_tilde_03_feedForward__maxdelay;
            }
            
            void allpass_tilde_03_feedBack_step() {
                this->allpass_tilde_03_feedBack_reader++;
            
                if (this->allpass_tilde_03_feedBack_reader >= (int)(this->allpass_tilde_03_feedBack_buffer->getSize()))
                    this->allpass_tilde_03_feedBack_reader = 0;
            }
            
            number allpass_tilde_03_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_03_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_03_feedBack_wrap))
                );
            }
            
            void allpass_tilde_03_feedBack_write(number v) {
                this->allpass_tilde_03_feedBack_writer = this->allpass_tilde_03_feedBack_reader;
                this->allpass_tilde_03_feedBack_buffer[(Index)this->allpass_tilde_03_feedBack_writer] = v;
            }
            
            number allpass_tilde_03_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_03_feedBack__maxdelay : size);
                number val = this->allpass_tilde_03_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_03_feedBack_write(v);
                this->allpass_tilde_03_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_03_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_03_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_03_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_03_feedBack_init() {
                auto result = this->allpass_tilde_03_feedBack_calcSizeInSamples();
                this->allpass_tilde_03_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_03_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_03_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_03_feedBack_clear() {
                this->allpass_tilde_03_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_03_feedBack_reset() {
                auto result = this->allpass_tilde_03_feedBack_calcSizeInSamples();
                this->allpass_tilde_03_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_03_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_03_feedBack_buffer);
                this->allpass_tilde_03_feedBack_wrap = this->allpass_tilde_03_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_03_feedBack_clear();
            
                if (this->allpass_tilde_03_feedBack_reader >= this->allpass_tilde_03_feedBack__maxdelay || this->allpass_tilde_03_feedBack_writer >= this->allpass_tilde_03_feedBack__maxdelay) {
                    this->allpass_tilde_03_feedBack_reader = 0;
                    this->allpass_tilde_03_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_03_feedBack_dspsetup() {
                this->allpass_tilde_03_feedBack_reset();
            }
            
            number allpass_tilde_03_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_03_feedBack_size() {
                return this->allpass_tilde_03_feedBack__maxdelay;
            }
            
            void allpass_tilde_03_init() {
                this->allpass_tilde_03_feedForward_init();
                this->allpass_tilde_03_feedBack_init();
            }
            
            void allpass_tilde_03_clear() {
                this->allpass_tilde_03_feedForward_clear();
                this->allpass_tilde_03_feedBack_clear();
            }
            
            void allpass_tilde_03_reset() {
                this->allpass_tilde_03_init();
                this->allpass_tilde_03_clear();
            }
            
            void allpass_tilde_03_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_03_reset();
                this->allpass_tilde_03_setupDone = true;
                this->allpass_tilde_03_feedForward_dspsetup();
                this->allpass_tilde_03_feedBack_dspsetup();
            }
            
            void allpass_tilde_04_feedForward_step() {
                this->allpass_tilde_04_feedForward_reader++;
            
                if (this->allpass_tilde_04_feedForward_reader >= (int)(this->allpass_tilde_04_feedForward_buffer->getSize()))
                    this->allpass_tilde_04_feedForward_reader = 0;
            }
            
            number allpass_tilde_04_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_04_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_04_feedForward_wrap))
                );
            }
            
            void allpass_tilde_04_feedForward_write(number v) {
                this->allpass_tilde_04_feedForward_writer = this->allpass_tilde_04_feedForward_reader;
                this->allpass_tilde_04_feedForward_buffer[(Index)this->allpass_tilde_04_feedForward_writer] = v;
            }
            
            number allpass_tilde_04_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_04_feedForward__maxdelay : size);
                number val = this->allpass_tilde_04_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_04_feedForward_write(v);
                this->allpass_tilde_04_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_04_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_04_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_04_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_04_feedForward_init() {
                auto result = this->allpass_tilde_04_feedForward_calcSizeInSamples();
                this->allpass_tilde_04_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_04_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_04_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_04_feedForward_clear() {
                this->allpass_tilde_04_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_04_feedForward_reset() {
                auto result = this->allpass_tilde_04_feedForward_calcSizeInSamples();
                this->allpass_tilde_04_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_04_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_04_feedForward_buffer);
                this->allpass_tilde_04_feedForward_wrap = this->allpass_tilde_04_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_04_feedForward_clear();
            
                if (this->allpass_tilde_04_feedForward_reader >= this->allpass_tilde_04_feedForward__maxdelay || this->allpass_tilde_04_feedForward_writer >= this->allpass_tilde_04_feedForward__maxdelay) {
                    this->allpass_tilde_04_feedForward_reader = 0;
                    this->allpass_tilde_04_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_04_feedForward_dspsetup() {
                this->allpass_tilde_04_feedForward_reset();
            }
            
            number allpass_tilde_04_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_04_feedForward_size() {
                return this->allpass_tilde_04_feedForward__maxdelay;
            }
            
            void allpass_tilde_04_feedBack_step() {
                this->allpass_tilde_04_feedBack_reader++;
            
                if (this->allpass_tilde_04_feedBack_reader >= (int)(this->allpass_tilde_04_feedBack_buffer->getSize()))
                    this->allpass_tilde_04_feedBack_reader = 0;
            }
            
            number allpass_tilde_04_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_04_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_04_feedBack_wrap))
                );
            }
            
            void allpass_tilde_04_feedBack_write(number v) {
                this->allpass_tilde_04_feedBack_writer = this->allpass_tilde_04_feedBack_reader;
                this->allpass_tilde_04_feedBack_buffer[(Index)this->allpass_tilde_04_feedBack_writer] = v;
            }
            
            number allpass_tilde_04_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_04_feedBack__maxdelay : size);
                number val = this->allpass_tilde_04_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_04_feedBack_write(v);
                this->allpass_tilde_04_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_04_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_04_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_04_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_04_feedBack_init() {
                auto result = this->allpass_tilde_04_feedBack_calcSizeInSamples();
                this->allpass_tilde_04_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_04_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_04_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_04_feedBack_clear() {
                this->allpass_tilde_04_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_04_feedBack_reset() {
                auto result = this->allpass_tilde_04_feedBack_calcSizeInSamples();
                this->allpass_tilde_04_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_04_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_04_feedBack_buffer);
                this->allpass_tilde_04_feedBack_wrap = this->allpass_tilde_04_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_04_feedBack_clear();
            
                if (this->allpass_tilde_04_feedBack_reader >= this->allpass_tilde_04_feedBack__maxdelay || this->allpass_tilde_04_feedBack_writer >= this->allpass_tilde_04_feedBack__maxdelay) {
                    this->allpass_tilde_04_feedBack_reader = 0;
                    this->allpass_tilde_04_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_04_feedBack_dspsetup() {
                this->allpass_tilde_04_feedBack_reset();
            }
            
            number allpass_tilde_04_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_04_feedBack_size() {
                return this->allpass_tilde_04_feedBack__maxdelay;
            }
            
            void allpass_tilde_04_init() {
                this->allpass_tilde_04_feedForward_init();
                this->allpass_tilde_04_feedBack_init();
            }
            
            void allpass_tilde_04_clear() {
                this->allpass_tilde_04_feedForward_clear();
                this->allpass_tilde_04_feedBack_clear();
            }
            
            void allpass_tilde_04_reset() {
                this->allpass_tilde_04_init();
                this->allpass_tilde_04_clear();
            }
            
            void allpass_tilde_04_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_04_reset();
                this->allpass_tilde_04_setupDone = true;
                this->allpass_tilde_04_feedForward_dspsetup();
                this->allpass_tilde_04_feedBack_dspsetup();
            }
            
            void allpass_tilde_05_feedForward_step() {
                this->allpass_tilde_05_feedForward_reader++;
            
                if (this->allpass_tilde_05_feedForward_reader >= (int)(this->allpass_tilde_05_feedForward_buffer->getSize()))
                    this->allpass_tilde_05_feedForward_reader = 0;
            }
            
            number allpass_tilde_05_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_05_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_05_feedForward_wrap))
                );
            }
            
            void allpass_tilde_05_feedForward_write(number v) {
                this->allpass_tilde_05_feedForward_writer = this->allpass_tilde_05_feedForward_reader;
                this->allpass_tilde_05_feedForward_buffer[(Index)this->allpass_tilde_05_feedForward_writer] = v;
            }
            
            number allpass_tilde_05_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_05_feedForward__maxdelay : size);
                number val = this->allpass_tilde_05_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_05_feedForward_write(v);
                this->allpass_tilde_05_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_05_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_05_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_05_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_05_feedForward_init() {
                auto result = this->allpass_tilde_05_feedForward_calcSizeInSamples();
                this->allpass_tilde_05_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_05_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_05_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_05_feedForward_clear() {
                this->allpass_tilde_05_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_05_feedForward_reset() {
                auto result = this->allpass_tilde_05_feedForward_calcSizeInSamples();
                this->allpass_tilde_05_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_05_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_05_feedForward_buffer);
                this->allpass_tilde_05_feedForward_wrap = this->allpass_tilde_05_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_05_feedForward_clear();
            
                if (this->allpass_tilde_05_feedForward_reader >= this->allpass_tilde_05_feedForward__maxdelay || this->allpass_tilde_05_feedForward_writer >= this->allpass_tilde_05_feedForward__maxdelay) {
                    this->allpass_tilde_05_feedForward_reader = 0;
                    this->allpass_tilde_05_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_05_feedForward_dspsetup() {
                this->allpass_tilde_05_feedForward_reset();
            }
            
            number allpass_tilde_05_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_05_feedForward_size() {
                return this->allpass_tilde_05_feedForward__maxdelay;
            }
            
            void allpass_tilde_05_feedBack_step() {
                this->allpass_tilde_05_feedBack_reader++;
            
                if (this->allpass_tilde_05_feedBack_reader >= (int)(this->allpass_tilde_05_feedBack_buffer->getSize()))
                    this->allpass_tilde_05_feedBack_reader = 0;
            }
            
            number allpass_tilde_05_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_05_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_05_feedBack_wrap))
                );
            }
            
            void allpass_tilde_05_feedBack_write(number v) {
                this->allpass_tilde_05_feedBack_writer = this->allpass_tilde_05_feedBack_reader;
                this->allpass_tilde_05_feedBack_buffer[(Index)this->allpass_tilde_05_feedBack_writer] = v;
            }
            
            number allpass_tilde_05_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_05_feedBack__maxdelay : size);
                number val = this->allpass_tilde_05_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_05_feedBack_write(v);
                this->allpass_tilde_05_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_05_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_05_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_05_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_05_feedBack_init() {
                auto result = this->allpass_tilde_05_feedBack_calcSizeInSamples();
                this->allpass_tilde_05_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_05_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_05_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_05_feedBack_clear() {
                this->allpass_tilde_05_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_05_feedBack_reset() {
                auto result = this->allpass_tilde_05_feedBack_calcSizeInSamples();
                this->allpass_tilde_05_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_05_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_05_feedBack_buffer);
                this->allpass_tilde_05_feedBack_wrap = this->allpass_tilde_05_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_05_feedBack_clear();
            
                if (this->allpass_tilde_05_feedBack_reader >= this->allpass_tilde_05_feedBack__maxdelay || this->allpass_tilde_05_feedBack_writer >= this->allpass_tilde_05_feedBack__maxdelay) {
                    this->allpass_tilde_05_feedBack_reader = 0;
                    this->allpass_tilde_05_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_05_feedBack_dspsetup() {
                this->allpass_tilde_05_feedBack_reset();
            }
            
            number allpass_tilde_05_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_05_feedBack_size() {
                return this->allpass_tilde_05_feedBack__maxdelay;
            }
            
            void allpass_tilde_05_init() {
                this->allpass_tilde_05_feedForward_init();
                this->allpass_tilde_05_feedBack_init();
            }
            
            void allpass_tilde_05_clear() {
                this->allpass_tilde_05_feedForward_clear();
                this->allpass_tilde_05_feedBack_clear();
            }
            
            void allpass_tilde_05_reset() {
                this->allpass_tilde_05_init();
                this->allpass_tilde_05_clear();
            }
            
            void allpass_tilde_05_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_05_reset();
                this->allpass_tilde_05_setupDone = true;
                this->allpass_tilde_05_feedForward_dspsetup();
                this->allpass_tilde_05_feedBack_dspsetup();
            }
            
            void allpass_tilde_06_feedForward_step() {
                this->allpass_tilde_06_feedForward_reader++;
            
                if (this->allpass_tilde_06_feedForward_reader >= (int)(this->allpass_tilde_06_feedForward_buffer->getSize()))
                    this->allpass_tilde_06_feedForward_reader = 0;
            }
            
            number allpass_tilde_06_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_06_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_06_feedForward_wrap))
                );
            }
            
            void allpass_tilde_06_feedForward_write(number v) {
                this->allpass_tilde_06_feedForward_writer = this->allpass_tilde_06_feedForward_reader;
                this->allpass_tilde_06_feedForward_buffer[(Index)this->allpass_tilde_06_feedForward_writer] = v;
            }
            
            number allpass_tilde_06_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_06_feedForward__maxdelay : size);
                number val = this->allpass_tilde_06_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_06_feedForward_write(v);
                this->allpass_tilde_06_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_06_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_06_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_06_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_06_feedForward_init() {
                auto result = this->allpass_tilde_06_feedForward_calcSizeInSamples();
                this->allpass_tilde_06_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_06_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_06_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_06_feedForward_clear() {
                this->allpass_tilde_06_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_06_feedForward_reset() {
                auto result = this->allpass_tilde_06_feedForward_calcSizeInSamples();
                this->allpass_tilde_06_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_06_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_06_feedForward_buffer);
                this->allpass_tilde_06_feedForward_wrap = this->allpass_tilde_06_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_06_feedForward_clear();
            
                if (this->allpass_tilde_06_feedForward_reader >= this->allpass_tilde_06_feedForward__maxdelay || this->allpass_tilde_06_feedForward_writer >= this->allpass_tilde_06_feedForward__maxdelay) {
                    this->allpass_tilde_06_feedForward_reader = 0;
                    this->allpass_tilde_06_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_06_feedForward_dspsetup() {
                this->allpass_tilde_06_feedForward_reset();
            }
            
            number allpass_tilde_06_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_06_feedForward_size() {
                return this->allpass_tilde_06_feedForward__maxdelay;
            }
            
            void allpass_tilde_06_feedBack_step() {
                this->allpass_tilde_06_feedBack_reader++;
            
                if (this->allpass_tilde_06_feedBack_reader >= (int)(this->allpass_tilde_06_feedBack_buffer->getSize()))
                    this->allpass_tilde_06_feedBack_reader = 0;
            }
            
            number allpass_tilde_06_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_06_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_06_feedBack_wrap))
                );
            }
            
            void allpass_tilde_06_feedBack_write(number v) {
                this->allpass_tilde_06_feedBack_writer = this->allpass_tilde_06_feedBack_reader;
                this->allpass_tilde_06_feedBack_buffer[(Index)this->allpass_tilde_06_feedBack_writer] = v;
            }
            
            number allpass_tilde_06_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_06_feedBack__maxdelay : size);
                number val = this->allpass_tilde_06_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_06_feedBack_write(v);
                this->allpass_tilde_06_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_06_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_06_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_06_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_06_feedBack_init() {
                auto result = this->allpass_tilde_06_feedBack_calcSizeInSamples();
                this->allpass_tilde_06_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_06_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_06_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_06_feedBack_clear() {
                this->allpass_tilde_06_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_06_feedBack_reset() {
                auto result = this->allpass_tilde_06_feedBack_calcSizeInSamples();
                this->allpass_tilde_06_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_06_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_06_feedBack_buffer);
                this->allpass_tilde_06_feedBack_wrap = this->allpass_tilde_06_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_06_feedBack_clear();
            
                if (this->allpass_tilde_06_feedBack_reader >= this->allpass_tilde_06_feedBack__maxdelay || this->allpass_tilde_06_feedBack_writer >= this->allpass_tilde_06_feedBack__maxdelay) {
                    this->allpass_tilde_06_feedBack_reader = 0;
                    this->allpass_tilde_06_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_06_feedBack_dspsetup() {
                this->allpass_tilde_06_feedBack_reset();
            }
            
            number allpass_tilde_06_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_06_feedBack_size() {
                return this->allpass_tilde_06_feedBack__maxdelay;
            }
            
            void allpass_tilde_06_init() {
                this->allpass_tilde_06_feedForward_init();
                this->allpass_tilde_06_feedBack_init();
            }
            
            void allpass_tilde_06_clear() {
                this->allpass_tilde_06_feedForward_clear();
                this->allpass_tilde_06_feedBack_clear();
            }
            
            void allpass_tilde_06_reset() {
                this->allpass_tilde_06_init();
                this->allpass_tilde_06_clear();
            }
            
            void allpass_tilde_06_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_06_reset();
                this->allpass_tilde_06_setupDone = true;
                this->allpass_tilde_06_feedForward_dspsetup();
                this->allpass_tilde_06_feedBack_dspsetup();
            }
            
            void allpass_tilde_07_feedForward_step() {
                this->allpass_tilde_07_feedForward_reader++;
            
                if (this->allpass_tilde_07_feedForward_reader >= (int)(this->allpass_tilde_07_feedForward_buffer->getSize()))
                    this->allpass_tilde_07_feedForward_reader = 0;
            }
            
            number allpass_tilde_07_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_07_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_07_feedForward_wrap))
                );
            }
            
            void allpass_tilde_07_feedForward_write(number v) {
                this->allpass_tilde_07_feedForward_writer = this->allpass_tilde_07_feedForward_reader;
                this->allpass_tilde_07_feedForward_buffer[(Index)this->allpass_tilde_07_feedForward_writer] = v;
            }
            
            number allpass_tilde_07_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_07_feedForward__maxdelay : size);
                number val = this->allpass_tilde_07_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_07_feedForward_write(v);
                this->allpass_tilde_07_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_07_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_07_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_07_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_07_feedForward_init() {
                auto result = this->allpass_tilde_07_feedForward_calcSizeInSamples();
                this->allpass_tilde_07_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_07_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_07_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_07_feedForward_clear() {
                this->allpass_tilde_07_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_07_feedForward_reset() {
                auto result = this->allpass_tilde_07_feedForward_calcSizeInSamples();
                this->allpass_tilde_07_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_07_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_07_feedForward_buffer);
                this->allpass_tilde_07_feedForward_wrap = this->allpass_tilde_07_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_07_feedForward_clear();
            
                if (this->allpass_tilde_07_feedForward_reader >= this->allpass_tilde_07_feedForward__maxdelay || this->allpass_tilde_07_feedForward_writer >= this->allpass_tilde_07_feedForward__maxdelay) {
                    this->allpass_tilde_07_feedForward_reader = 0;
                    this->allpass_tilde_07_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_07_feedForward_dspsetup() {
                this->allpass_tilde_07_feedForward_reset();
            }
            
            number allpass_tilde_07_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_07_feedForward_size() {
                return this->allpass_tilde_07_feedForward__maxdelay;
            }
            
            void allpass_tilde_07_feedBack_step() {
                this->allpass_tilde_07_feedBack_reader++;
            
                if (this->allpass_tilde_07_feedBack_reader >= (int)(this->allpass_tilde_07_feedBack_buffer->getSize()))
                    this->allpass_tilde_07_feedBack_reader = 0;
            }
            
            number allpass_tilde_07_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_07_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_07_feedBack_wrap))
                );
            }
            
            void allpass_tilde_07_feedBack_write(number v) {
                this->allpass_tilde_07_feedBack_writer = this->allpass_tilde_07_feedBack_reader;
                this->allpass_tilde_07_feedBack_buffer[(Index)this->allpass_tilde_07_feedBack_writer] = v;
            }
            
            number allpass_tilde_07_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_07_feedBack__maxdelay : size);
                number val = this->allpass_tilde_07_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_07_feedBack_write(v);
                this->allpass_tilde_07_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_07_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_07_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_07_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_07_feedBack_init() {
                auto result = this->allpass_tilde_07_feedBack_calcSizeInSamples();
                this->allpass_tilde_07_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_07_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_07_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_07_feedBack_clear() {
                this->allpass_tilde_07_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_07_feedBack_reset() {
                auto result = this->allpass_tilde_07_feedBack_calcSizeInSamples();
                this->allpass_tilde_07_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_07_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_07_feedBack_buffer);
                this->allpass_tilde_07_feedBack_wrap = this->allpass_tilde_07_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_07_feedBack_clear();
            
                if (this->allpass_tilde_07_feedBack_reader >= this->allpass_tilde_07_feedBack__maxdelay || this->allpass_tilde_07_feedBack_writer >= this->allpass_tilde_07_feedBack__maxdelay) {
                    this->allpass_tilde_07_feedBack_reader = 0;
                    this->allpass_tilde_07_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_07_feedBack_dspsetup() {
                this->allpass_tilde_07_feedBack_reset();
            }
            
            number allpass_tilde_07_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_07_feedBack_size() {
                return this->allpass_tilde_07_feedBack__maxdelay;
            }
            
            void allpass_tilde_07_init() {
                this->allpass_tilde_07_feedForward_init();
                this->allpass_tilde_07_feedBack_init();
            }
            
            void allpass_tilde_07_clear() {
                this->allpass_tilde_07_feedForward_clear();
                this->allpass_tilde_07_feedBack_clear();
            }
            
            void allpass_tilde_07_reset() {
                this->allpass_tilde_07_init();
                this->allpass_tilde_07_clear();
            }
            
            void allpass_tilde_07_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_07_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_07_reset();
                this->allpass_tilde_07_setupDone = true;
                this->allpass_tilde_07_feedForward_dspsetup();
                this->allpass_tilde_07_feedBack_dspsetup();
            }
            
            void allpass_tilde_08_feedForward_step() {
                this->allpass_tilde_08_feedForward_reader++;
            
                if (this->allpass_tilde_08_feedForward_reader >= (int)(this->allpass_tilde_08_feedForward_buffer->getSize()))
                    this->allpass_tilde_08_feedForward_reader = 0;
            }
            
            number allpass_tilde_08_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_08_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_08_feedForward_wrap))
                );
            }
            
            void allpass_tilde_08_feedForward_write(number v) {
                this->allpass_tilde_08_feedForward_writer = this->allpass_tilde_08_feedForward_reader;
                this->allpass_tilde_08_feedForward_buffer[(Index)this->allpass_tilde_08_feedForward_writer] = v;
            }
            
            number allpass_tilde_08_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_08_feedForward__maxdelay : size);
                number val = this->allpass_tilde_08_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_08_feedForward_write(v);
                this->allpass_tilde_08_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_08_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_08_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_08_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_08_feedForward_init() {
                auto result = this->allpass_tilde_08_feedForward_calcSizeInSamples();
                this->allpass_tilde_08_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_08_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_08_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_08_feedForward_clear() {
                this->allpass_tilde_08_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_08_feedForward_reset() {
                auto result = this->allpass_tilde_08_feedForward_calcSizeInSamples();
                this->allpass_tilde_08_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_08_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_08_feedForward_buffer);
                this->allpass_tilde_08_feedForward_wrap = this->allpass_tilde_08_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_08_feedForward_clear();
            
                if (this->allpass_tilde_08_feedForward_reader >= this->allpass_tilde_08_feedForward__maxdelay || this->allpass_tilde_08_feedForward_writer >= this->allpass_tilde_08_feedForward__maxdelay) {
                    this->allpass_tilde_08_feedForward_reader = 0;
                    this->allpass_tilde_08_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_08_feedForward_dspsetup() {
                this->allpass_tilde_08_feedForward_reset();
            }
            
            number allpass_tilde_08_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_08_feedForward_size() {
                return this->allpass_tilde_08_feedForward__maxdelay;
            }
            
            void allpass_tilde_08_feedBack_step() {
                this->allpass_tilde_08_feedBack_reader++;
            
                if (this->allpass_tilde_08_feedBack_reader >= (int)(this->allpass_tilde_08_feedBack_buffer->getSize()))
                    this->allpass_tilde_08_feedBack_reader = 0;
            }
            
            number allpass_tilde_08_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_08_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_08_feedBack_wrap))
                );
            }
            
            void allpass_tilde_08_feedBack_write(number v) {
                this->allpass_tilde_08_feedBack_writer = this->allpass_tilde_08_feedBack_reader;
                this->allpass_tilde_08_feedBack_buffer[(Index)this->allpass_tilde_08_feedBack_writer] = v;
            }
            
            number allpass_tilde_08_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_08_feedBack__maxdelay : size);
                number val = this->allpass_tilde_08_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_08_feedBack_write(v);
                this->allpass_tilde_08_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_08_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_08_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_08_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_08_feedBack_init() {
                auto result = this->allpass_tilde_08_feedBack_calcSizeInSamples();
                this->allpass_tilde_08_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_08_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_08_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_08_feedBack_clear() {
                this->allpass_tilde_08_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_08_feedBack_reset() {
                auto result = this->allpass_tilde_08_feedBack_calcSizeInSamples();
                this->allpass_tilde_08_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_08_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_08_feedBack_buffer);
                this->allpass_tilde_08_feedBack_wrap = this->allpass_tilde_08_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_08_feedBack_clear();
            
                if (this->allpass_tilde_08_feedBack_reader >= this->allpass_tilde_08_feedBack__maxdelay || this->allpass_tilde_08_feedBack_writer >= this->allpass_tilde_08_feedBack__maxdelay) {
                    this->allpass_tilde_08_feedBack_reader = 0;
                    this->allpass_tilde_08_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_08_feedBack_dspsetup() {
                this->allpass_tilde_08_feedBack_reset();
            }
            
            number allpass_tilde_08_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_08_feedBack_size() {
                return this->allpass_tilde_08_feedBack__maxdelay;
            }
            
            void allpass_tilde_08_init() {
                this->allpass_tilde_08_feedForward_init();
                this->allpass_tilde_08_feedBack_init();
            }
            
            void allpass_tilde_08_clear() {
                this->allpass_tilde_08_feedForward_clear();
                this->allpass_tilde_08_feedBack_clear();
            }
            
            void allpass_tilde_08_reset() {
                this->allpass_tilde_08_init();
                this->allpass_tilde_08_clear();
            }
            
            void allpass_tilde_08_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_08_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_08_reset();
                this->allpass_tilde_08_setupDone = true;
                this->allpass_tilde_08_feedForward_dspsetup();
                this->allpass_tilde_08_feedBack_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                allpass_tilde_01_x = 0;
                allpass_tilde_01_delayTime = 9.3;
                allpass_tilde_01_gain = 0.625;
                allpass_tilde_02_x = 0;
                allpass_tilde_02_delayTime = 12.73;
                allpass_tilde_02_gain = 0.625;
                allpass_tilde_03_x = 0;
                allpass_tilde_03_delayTime = 3.58;
                allpass_tilde_03_gain = 0.75;
                allpass_tilde_04_x = 0;
                allpass_tilde_04_delayTime = 4.76;
                allpass_tilde_04_gain = 0.75;
                allpass_tilde_05_x = 0;
                allpass_tilde_05_delayTime = 9.3;
                allpass_tilde_05_gain = 0.625;
                allpass_tilde_06_x = 0;
                allpass_tilde_06_delayTime = 12.73;
                allpass_tilde_06_gain = 0.625;
                allpass_tilde_07_x = 0;
                allpass_tilde_07_delayTime = 3.58;
                allpass_tilde_07_gain = 0.75;
                allpass_tilde_08_x = 0;
                allpass_tilde_08_delayTime = 4.76;
                allpass_tilde_08_gain = 0.75;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                allpass_tilde_01_feedForward__maxdelay = 0;
                allpass_tilde_01_feedForward_sizemode = 0;
                allpass_tilde_01_feedForward_wrap = 0;
                allpass_tilde_01_feedForward_reader = 0;
                allpass_tilde_01_feedForward_writer = 0;
                allpass_tilde_01_feedBack__maxdelay = 0;
                allpass_tilde_01_feedBack_sizemode = 0;
                allpass_tilde_01_feedBack_wrap = 0;
                allpass_tilde_01_feedBack_reader = 0;
                allpass_tilde_01_feedBack_writer = 0;
                allpass_tilde_01_setupDone = false;
                allpass_tilde_02_feedForward__maxdelay = 0;
                allpass_tilde_02_feedForward_sizemode = 0;
                allpass_tilde_02_feedForward_wrap = 0;
                allpass_tilde_02_feedForward_reader = 0;
                allpass_tilde_02_feedForward_writer = 0;
                allpass_tilde_02_feedBack__maxdelay = 0;
                allpass_tilde_02_feedBack_sizemode = 0;
                allpass_tilde_02_feedBack_wrap = 0;
                allpass_tilde_02_feedBack_reader = 0;
                allpass_tilde_02_feedBack_writer = 0;
                allpass_tilde_02_setupDone = false;
                allpass_tilde_03_feedForward__maxdelay = 0;
                allpass_tilde_03_feedForward_sizemode = 0;
                allpass_tilde_03_feedForward_wrap = 0;
                allpass_tilde_03_feedForward_reader = 0;
                allpass_tilde_03_feedForward_writer = 0;
                allpass_tilde_03_feedBack__maxdelay = 0;
                allpass_tilde_03_feedBack_sizemode = 0;
                allpass_tilde_03_feedBack_wrap = 0;
                allpass_tilde_03_feedBack_reader = 0;
                allpass_tilde_03_feedBack_writer = 0;
                allpass_tilde_03_setupDone = false;
                allpass_tilde_04_feedForward__maxdelay = 0;
                allpass_tilde_04_feedForward_sizemode = 0;
                allpass_tilde_04_feedForward_wrap = 0;
                allpass_tilde_04_feedForward_reader = 0;
                allpass_tilde_04_feedForward_writer = 0;
                allpass_tilde_04_feedBack__maxdelay = 0;
                allpass_tilde_04_feedBack_sizemode = 0;
                allpass_tilde_04_feedBack_wrap = 0;
                allpass_tilde_04_feedBack_reader = 0;
                allpass_tilde_04_feedBack_writer = 0;
                allpass_tilde_04_setupDone = false;
                allpass_tilde_05_feedForward__maxdelay = 0;
                allpass_tilde_05_feedForward_sizemode = 0;
                allpass_tilde_05_feedForward_wrap = 0;
                allpass_tilde_05_feedForward_reader = 0;
                allpass_tilde_05_feedForward_writer = 0;
                allpass_tilde_05_feedBack__maxdelay = 0;
                allpass_tilde_05_feedBack_sizemode = 0;
                allpass_tilde_05_feedBack_wrap = 0;
                allpass_tilde_05_feedBack_reader = 0;
                allpass_tilde_05_feedBack_writer = 0;
                allpass_tilde_05_setupDone = false;
                allpass_tilde_06_feedForward__maxdelay = 0;
                allpass_tilde_06_feedForward_sizemode = 0;
                allpass_tilde_06_feedForward_wrap = 0;
                allpass_tilde_06_feedForward_reader = 0;
                allpass_tilde_06_feedForward_writer = 0;
                allpass_tilde_06_feedBack__maxdelay = 0;
                allpass_tilde_06_feedBack_sizemode = 0;
                allpass_tilde_06_feedBack_wrap = 0;
                allpass_tilde_06_feedBack_reader = 0;
                allpass_tilde_06_feedBack_writer = 0;
                allpass_tilde_06_setupDone = false;
                allpass_tilde_07_feedForward__maxdelay = 0;
                allpass_tilde_07_feedForward_sizemode = 0;
                allpass_tilde_07_feedForward_wrap = 0;
                allpass_tilde_07_feedForward_reader = 0;
                allpass_tilde_07_feedForward_writer = 0;
                allpass_tilde_07_feedBack__maxdelay = 0;
                allpass_tilde_07_feedBack_sizemode = 0;
                allpass_tilde_07_feedBack_wrap = 0;
                allpass_tilde_07_feedBack_reader = 0;
                allpass_tilde_07_feedBack_writer = 0;
                allpass_tilde_07_setupDone = false;
                allpass_tilde_08_feedForward__maxdelay = 0;
                allpass_tilde_08_feedForward_sizemode = 0;
                allpass_tilde_08_feedForward_wrap = 0;
                allpass_tilde_08_feedForward_reader = 0;
                allpass_tilde_08_feedForward_writer = 0;
                allpass_tilde_08_feedBack__maxdelay = 0;
                allpass_tilde_08_feedBack_sizemode = 0;
                allpass_tilde_08_feedBack_wrap = 0;
                allpass_tilde_08_feedBack_reader = 0;
                allpass_tilde_08_feedBack_writer = 0;
                allpass_tilde_08_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number allpass_tilde_01_x;
                number allpass_tilde_01_delayTime;
                number allpass_tilde_01_gain;
                number allpass_tilde_02_x;
                number allpass_tilde_02_delayTime;
                number allpass_tilde_02_gain;
                number allpass_tilde_03_x;
                number allpass_tilde_03_delayTime;
                number allpass_tilde_03_gain;
                number allpass_tilde_04_x;
                number allpass_tilde_04_delayTime;
                number allpass_tilde_04_gain;
                number allpass_tilde_05_x;
                number allpass_tilde_05_delayTime;
                number allpass_tilde_05_gain;
                number allpass_tilde_06_x;
                number allpass_tilde_06_delayTime;
                number allpass_tilde_06_gain;
                number allpass_tilde_07_x;
                number allpass_tilde_07_delayTime;
                number allpass_tilde_07_gain;
                number allpass_tilde_08_x;
                number allpass_tilde_08_delayTime;
                number allpass_tilde_08_gain;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[2];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef allpass_tilde_01_feedForward_buffer;
                Index allpass_tilde_01_feedForward__maxdelay;
                Int allpass_tilde_01_feedForward_sizemode;
                Index allpass_tilde_01_feedForward_wrap;
                Int allpass_tilde_01_feedForward_reader;
                Int allpass_tilde_01_feedForward_writer;
                Float64BufferRef allpass_tilde_01_feedBack_buffer;
                Index allpass_tilde_01_feedBack__maxdelay;
                Int allpass_tilde_01_feedBack_sizemode;
                Index allpass_tilde_01_feedBack_wrap;
                Int allpass_tilde_01_feedBack_reader;
                Int allpass_tilde_01_feedBack_writer;
                bool allpass_tilde_01_setupDone;
                Float64BufferRef allpass_tilde_02_feedForward_buffer;
                Index allpass_tilde_02_feedForward__maxdelay;
                Int allpass_tilde_02_feedForward_sizemode;
                Index allpass_tilde_02_feedForward_wrap;
                Int allpass_tilde_02_feedForward_reader;
                Int allpass_tilde_02_feedForward_writer;
                Float64BufferRef allpass_tilde_02_feedBack_buffer;
                Index allpass_tilde_02_feedBack__maxdelay;
                Int allpass_tilde_02_feedBack_sizemode;
                Index allpass_tilde_02_feedBack_wrap;
                Int allpass_tilde_02_feedBack_reader;
                Int allpass_tilde_02_feedBack_writer;
                bool allpass_tilde_02_setupDone;
                Float64BufferRef allpass_tilde_03_feedForward_buffer;
                Index allpass_tilde_03_feedForward__maxdelay;
                Int allpass_tilde_03_feedForward_sizemode;
                Index allpass_tilde_03_feedForward_wrap;
                Int allpass_tilde_03_feedForward_reader;
                Int allpass_tilde_03_feedForward_writer;
                Float64BufferRef allpass_tilde_03_feedBack_buffer;
                Index allpass_tilde_03_feedBack__maxdelay;
                Int allpass_tilde_03_feedBack_sizemode;
                Index allpass_tilde_03_feedBack_wrap;
                Int allpass_tilde_03_feedBack_reader;
                Int allpass_tilde_03_feedBack_writer;
                bool allpass_tilde_03_setupDone;
                Float64BufferRef allpass_tilde_04_feedForward_buffer;
                Index allpass_tilde_04_feedForward__maxdelay;
                Int allpass_tilde_04_feedForward_sizemode;
                Index allpass_tilde_04_feedForward_wrap;
                Int allpass_tilde_04_feedForward_reader;
                Int allpass_tilde_04_feedForward_writer;
                Float64BufferRef allpass_tilde_04_feedBack_buffer;
                Index allpass_tilde_04_feedBack__maxdelay;
                Int allpass_tilde_04_feedBack_sizemode;
                Index allpass_tilde_04_feedBack_wrap;
                Int allpass_tilde_04_feedBack_reader;
                Int allpass_tilde_04_feedBack_writer;
                bool allpass_tilde_04_setupDone;
                Float64BufferRef allpass_tilde_05_feedForward_buffer;
                Index allpass_tilde_05_feedForward__maxdelay;
                Int allpass_tilde_05_feedForward_sizemode;
                Index allpass_tilde_05_feedForward_wrap;
                Int allpass_tilde_05_feedForward_reader;
                Int allpass_tilde_05_feedForward_writer;
                Float64BufferRef allpass_tilde_05_feedBack_buffer;
                Index allpass_tilde_05_feedBack__maxdelay;
                Int allpass_tilde_05_feedBack_sizemode;
                Index allpass_tilde_05_feedBack_wrap;
                Int allpass_tilde_05_feedBack_reader;
                Int allpass_tilde_05_feedBack_writer;
                bool allpass_tilde_05_setupDone;
                Float64BufferRef allpass_tilde_06_feedForward_buffer;
                Index allpass_tilde_06_feedForward__maxdelay;
                Int allpass_tilde_06_feedForward_sizemode;
                Index allpass_tilde_06_feedForward_wrap;
                Int allpass_tilde_06_feedForward_reader;
                Int allpass_tilde_06_feedForward_writer;
                Float64BufferRef allpass_tilde_06_feedBack_buffer;
                Index allpass_tilde_06_feedBack__maxdelay;
                Int allpass_tilde_06_feedBack_sizemode;
                Index allpass_tilde_06_feedBack_wrap;
                Int allpass_tilde_06_feedBack_reader;
                Int allpass_tilde_06_feedBack_writer;
                bool allpass_tilde_06_setupDone;
                Float64BufferRef allpass_tilde_07_feedForward_buffer;
                Index allpass_tilde_07_feedForward__maxdelay;
                Int allpass_tilde_07_feedForward_sizemode;
                Index allpass_tilde_07_feedForward_wrap;
                Int allpass_tilde_07_feedForward_reader;
                Int allpass_tilde_07_feedForward_writer;
                Float64BufferRef allpass_tilde_07_feedBack_buffer;
                Index allpass_tilde_07_feedBack__maxdelay;
                Int allpass_tilde_07_feedBack_sizemode;
                Index allpass_tilde_07_feedBack_wrap;
                Int allpass_tilde_07_feedBack_reader;
                Int allpass_tilde_07_feedBack_writer;
                bool allpass_tilde_07_setupDone;
                Float64BufferRef allpass_tilde_08_feedForward_buffer;
                Index allpass_tilde_08_feedForward__maxdelay;
                Int allpass_tilde_08_feedForward_sizemode;
                Index allpass_tilde_08_feedForward_wrap;
                Int allpass_tilde_08_feedForward_reader;
                Int allpass_tilde_08_feedForward_writer;
                Float64BufferRef allpass_tilde_08_feedBack_buffer;
                Index allpass_tilde_08_feedBack__maxdelay;
                Int allpass_tilde_08_feedBack_sizemode;
                Index allpass_tilde_08_feedBack_wrap;
                Int allpass_tilde_08_feedBack_reader;
                Int allpass_tilde_08_feedBack_writer;
                bool allpass_tilde_08_setupDone;
                number stackprotect_count;
                DataRef allpass_tilde_01_feedForward_bufferobj;
                DataRef allpass_tilde_01_feedBack_bufferobj;
                DataRef allpass_tilde_02_feedForward_bufferobj;
                DataRef allpass_tilde_02_feedBack_bufferobj;
                DataRef allpass_tilde_03_feedForward_bufferobj;
                DataRef allpass_tilde_03_feedBack_bufferobj;
                DataRef allpass_tilde_04_feedForward_bufferobj;
                DataRef allpass_tilde_04_feedBack_bufferobj;
                DataRef allpass_tilde_05_feedForward_bufferobj;
                DataRef allpass_tilde_05_feedBack_bufferobj;
                DataRef allpass_tilde_06_feedForward_bufferobj;
                DataRef allpass_tilde_06_feedBack_bufferobj;
                DataRef allpass_tilde_07_feedForward_bufferobj;
                DataRef allpass_tilde_07_feedBack_bufferobj;
                DataRef allpass_tilde_08_feedForward_bufferobj;
                DataRef allpass_tilde_08_feedBack_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1029 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1051;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1029()
            {
            }
            
            ~RNBOSubpatcher_1029()
            {
            }
            
            virtual RNBOSubpatcher_1051* getPatcher() const {
                return static_cast<RNBOSubpatcher_1051 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() {
                return this->sr;
            }
            
            Index vectorsize() {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return rand01() * range + low;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                this->dspexpr_17_perform(in2, this->dspexpr_17_in2, this->signals[0], n);
                this->mstosamps_tilde_01_perform(this->signals[0], this->signals[1], n);
                this->dspexpr_16_perform(in2, this->dspexpr_16_in2, this->signals[0], n);
                this->dspexpr_13_perform(in2, this->dspexpr_13_in2, this->signals[2], n);
                this->dspexpr_11_perform(in2, this->dspexpr_11_in2, this->signals[3], n);
                this->noise_tilde_01_perform(this->signals[4], n);
            
                this->lores_01_perform(
                    this->lores_01_cutoff,
                    this->lores_01_resonance,
                    this->signals[4],
                    this->signals[5],
                    n
                );
            
                this->dspexpr_15_perform(this->signals[5], in3, this->signals[4], n);
                this->dspexpr_12_perform(this->signals[2], this->signals[4], this->signals[5], n);
                this->feedbackreader_01_perform(this->signals[4], n);
                this->signaladder_07_perform(in1, this->signals[4], this->signals[4], n);
                this->allpass_tilde_09_perform(this->signals[4], this->signals[3], this->allpass_tilde_09_gain, out1, n);
            
                this->comb_tilde_08_perform(
                    out1,
                    this->signals[5],
                    this->comb_tilde_08_gain,
                    this->comb_tilde_08_ffGain,
                    this->comb_tilde_08_fbGain,
                    this->signals[3],
                    n
                );
            
                this->onepole_tilde_01_perform(this->signals[3], in4, this->signals[5], n);
                this->dspexpr_14_perform(this->signals[5], in5, this->signals[2], n);
            
                this->allpass_tilde_10_perform(
                    this->signals[2],
                    this->signals[0],
                    this->allpass_tilde_10_gain,
                    this->signals[5],
                    n
                );
            
                this->delaytilde_01_perform(this->signals[1], this->signals[5], out4, n);
                this->feedbackwriter_01_perform(out4, n);
                this->signalforwarder_21_perform(this->signals[5], out3, n);
                this->signalforwarder_20_perform(this->signals[3], out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 6; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->feedbacktilde_01_feedbackbuffer = resizeSignal(this->feedbacktilde_01_feedbackbuffer, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->lores_01_dspsetup(forceDSPSetup);
                this->allpass_tilde_09_dspsetup(forceDSPSetup);
                this->comb_tilde_08_dspsetup(forceDSPSetup);
                this->onepole_tilde_01_dspsetup(forceDSPSetup);
                this->allpass_tilde_10_dspsetup(forceDSPSetup);
                this->delaytilde_01_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 5:
                    return addressOf(this->allpass_tilde_09_feedForward_bufferobj);
                    break;
                case 6:
                    return addressOf(this->allpass_tilde_09_feedBack_bufferobj);
                    break;
                case 7:
                    return addressOf(this->comb_tilde_08_feedForward_bufferobj);
                    break;
                case 8:
                    return addressOf(this->comb_tilde_08_feedBack_bufferobj);
                    break;
                case 9:
                    return addressOf(this->allpass_tilde_10_feedForward_bufferobj);
                    break;
                case 10:
                    return addressOf(this->allpass_tilde_10_feedBack_bufferobj);
                    break;
                case 11:
                    return addressOf(this->delaytilde_01_del_bufferobj);
                    break;
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 7;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 5) {
                    this->allpass_tilde_09_feedForward_buffer = new Float64Buffer(this->allpass_tilde_09_feedForward_bufferobj);
                }
            
                if (index == 6) {
                    this->allpass_tilde_09_feedBack_buffer = new Float64Buffer(this->allpass_tilde_09_feedBack_bufferobj);
                }
            
                if (index == 7) {
                    this->comb_tilde_08_feedForward_buffer = new Float64Buffer(this->comb_tilde_08_feedForward_bufferobj);
                }
            
                if (index == 8) {
                    this->comb_tilde_08_feedBack_buffer = new Float64Buffer(this->comb_tilde_08_feedBack_bufferobj);
                }
            
                if (index == 9) {
                    this->allpass_tilde_10_feedForward_buffer = new Float64Buffer(this->allpass_tilde_10_feedForward_bufferobj);
                }
            
                if (index == 10) {
                    this->allpass_tilde_10_feedBack_buffer = new Float64Buffer(this->allpass_tilde_10_feedBack_bufferobj);
                }
            
                if (index == 11) {
                    this->delaytilde_01_del_buffer = new Float64Buffer(this->delaytilde_01_del_bufferobj);
                }
            }
            
            void initialize() {
                this->allpass_tilde_09_feedForward_bufferobj = initDataRef("allpass_tilde_09_feedForward_bufferobj", true, nullptr);
                this->allpass_tilde_09_feedBack_bufferobj = initDataRef("allpass_tilde_09_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_08_feedForward_bufferobj = initDataRef("comb_tilde_08_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_08_feedBack_bufferobj = initDataRef("comb_tilde_08_feedBack_bufferobj", true, nullptr);
                this->allpass_tilde_10_feedForward_bufferobj = initDataRef("allpass_tilde_10_feedForward_bufferobj", true, nullptr);
                this->allpass_tilde_10_feedBack_bufferobj = initDataRef("allpass_tilde_10_feedBack_bufferobj", true, nullptr);
                this->delaytilde_01_del_bufferobj = initDataRef("delaytilde_01_del_bufferobj", true, nullptr);
                this->assign_defaults();
                this->setState();
                this->allpass_tilde_09_feedForward_bufferobj->setIndex(5);
                this->allpass_tilde_09_feedForward_buffer = new Float64Buffer(this->allpass_tilde_09_feedForward_bufferobj);
                this->allpass_tilde_09_feedBack_bufferobj->setIndex(6);
                this->allpass_tilde_09_feedBack_buffer = new Float64Buffer(this->allpass_tilde_09_feedBack_bufferobj);
                this->comb_tilde_08_feedForward_bufferobj->setIndex(7);
                this->comb_tilde_08_feedForward_buffer = new Float64Buffer(this->comb_tilde_08_feedForward_bufferobj);
                this->comb_tilde_08_feedBack_bufferobj->setIndex(8);
                this->comb_tilde_08_feedBack_buffer = new Float64Buffer(this->comb_tilde_08_feedBack_bufferobj);
                this->allpass_tilde_10_feedForward_bufferobj->setIndex(9);
                this->allpass_tilde_10_feedForward_buffer = new Float64Buffer(this->allpass_tilde_10_feedForward_bufferobj);
                this->allpass_tilde_10_feedBack_bufferobj->setIndex(10);
                this->allpass_tilde_10_feedBack_buffer = new Float64Buffer(this->allpass_tilde_10_feedBack_bufferobj);
                this->delaytilde_01_del_bufferobj->setIndex(11);
                this->delaytilde_01_del_buffer = new Float64Buffer(this->delaytilde_01_del_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 5;
            }
            
            Index getNumOutputChannels() const {
                return 4;
            }
            
            void initializeObjects() {
                this->allpass_tilde_09_feedForward_init();
                this->allpass_tilde_09_feedBack_init();
                this->allpass_tilde_09_init();
                this->comb_tilde_08_feedForward_init();
                this->comb_tilde_08_feedBack_init();
                this->comb_tilde_08_init();
                this->allpass_tilde_10_feedForward_init();
                this->allpass_tilde_10_feedBack_init();
                this->allpass_tilde_10_init();
                this->noise_tilde_01_init();
                this->delaytilde_01_del_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->allpass_tilde_09_feedForward_buffer = this->allpass_tilde_09_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_09_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_09_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_09_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->allpass_tilde_09_feedBack_buffer = this->allpass_tilde_09_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_09_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_09_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_09_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->comb_tilde_08_feedForward_buffer = this->comb_tilde_08_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_08_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_08_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_08_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->comb_tilde_08_feedBack_buffer = this->comb_tilde_08_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_08_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_08_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_08_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->allpass_tilde_10_feedForward_buffer = this->allpass_tilde_10_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_10_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_10_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_10_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->allpass_tilde_10_feedBack_buffer = this->allpass_tilde_10_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_10_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_10_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_10_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            
                this->delaytilde_01_del_buffer = this->delaytilde_01_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_01_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_01_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_01_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(11);
                }
            }
            
            void dspexpr_17_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 125;//#map:_###_obj_###_:1
                }
            }
            
            void mstosamps_tilde_01_perform(const Sample * ms, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = ms[(Index)i] * this->sr * 0.001;
                }
            }
            
            void dspexpr_16_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 60.48;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_13_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 149.6;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_11_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 22.58;//#map:_###_obj_###_:1
                }
            }
            
            void noise_tilde_01_perform(Sample * out1, Index n) {
                auto __noise_tilde_01_recip = this->noise_tilde_01_recip;
                auto __noise_tilde_01_last = this->noise_tilde_01_last;
                Index i;
            
                for (i = 0; i < n; i++) {
                    __noise_tilde_01_last = (Index)((BinOpInt)((UBinOpInt)(rnbo_imul(1664525, (int32_t)(__noise_tilde_01_last)) + 1013904223) | (UBinOpInt)0));
                    number itemp = (BinOpInt)((UBinOpInt)0x007fffff & __noise_tilde_01_last);
                    out1[(Index)i] = itemp * __noise_tilde_01_recip - 1.;
                }
            
                this->noise_tilde_01_last = __noise_tilde_01_last;
            }
            
            void lores_01_perform(
                number cutoff,
                number resonance,
                const Sample * input,
                Sample * out,
                Index n
            ) {
                RNBO_UNUSED(resonance);
                RNBO_UNUSED(cutoff);
                auto __lores_01_y_2 = this->lores_01_y_2;
                auto __lores_01_y_1 = this->lores_01_y_1;
                auto __lores_01_x_0 = this->lores_01_x_0;
                auto __lores_01_b_0 = this->lores_01_b_0;
                auto __lores_01_a_1 = this->lores_01_a_1;
                auto __lores_01_a_2 = this->lores_01_a_2;
                auto __lores_01_last_freq_calc = this->lores_01_last_freq_calc;
                auto __lores_01_last_res_calc = this->lores_01_last_res_calc;
                auto __lores_01_last_frequency = this->lores_01_last_frequency;
                auto __lores_01_last_resonance = this->lores_01_last_resonance;
            
                for (Index i = 0; i < n; i++) {
                    if (0.995 != __lores_01_last_resonance || 0 != __lores_01_last_frequency) {
                        __lores_01_last_res_calc = rnbo_exp(0.995 * 0.125) * 0.882497;
                        __lores_01_last_freq_calc = rnbo_cos(2.0 * pi01() / this->sr * 0);
                        __lores_01_last_resonance = 0.995;
                        __lores_01_last_frequency = 0;
                    }
            
                    number res_temp = __lores_01_last_res_calc;
                    number freq_temp = __lores_01_last_freq_calc;
                    __lores_01_a_2 = res_temp * res_temp;
                    __lores_01_a_1 = -2.0 * res_temp * freq_temp;
                    __lores_01_b_0 = 1.0 + __lores_01_a_1 + __lores_01_a_2;
                    __lores_01_x_0 = input[(Index)i];
                    number y_0 = __lores_01_x_0 * __lores_01_b_0 - __lores_01_y_1 * __lores_01_a_1 - __lores_01_y_2 * __lores_01_a_2;
                    __lores_01_y_2 = __lores_01_y_1;
                    __lores_01_y_1 = y_0;
                    out[(Index)i] = y_0;
                }
            
                this->lores_01_last_resonance = __lores_01_last_resonance;
                this->lores_01_last_frequency = __lores_01_last_frequency;
                this->lores_01_last_res_calc = __lores_01_last_res_calc;
                this->lores_01_last_freq_calc = __lores_01_last_freq_calc;
                this->lores_01_a_2 = __lores_01_a_2;
                this->lores_01_a_1 = __lores_01_a_1;
                this->lores_01_b_0 = __lores_01_b_0;
                this->lores_01_x_0 = __lores_01_x_0;
                this->lores_01_y_1 = __lores_01_y_1;
                this->lores_01_y_2 = __lores_01_y_2;
            }
            
            void dspexpr_15_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_12_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void feedbackreader_01_perform(Sample * output, Index n) {
                auto& buffer = this->feedbacktilde_01_feedbackbuffer;
            
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = buffer[(Index)i];
                }
            }
            
            void signaladder_07_perform(const Sample * in1, const Sample * in2, Sample * out, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i];
                }
            }
            
            void allpass_tilde_09_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = -0.7;
                    number delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_09_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_09_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_09_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_09_feedBack_write(ov);
                    this->allpass_tilde_09_feedForward_step();
                    this->allpass_tilde_09_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_08_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_08_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_08_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_08_feedForward_write(x[(Index)i]);
                    this->comb_tilde_08_feedBack_write(ov);
                    this->comb_tilde_08_feedForward_step();
                    this->comb_tilde_08_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void onepole_tilde_01_perform(const Sample * x, const Sample * freqInHz, Sample * out1, Index n) {
                auto __onepole_tilde_01_lastY = this->onepole_tilde_01_lastY;
                auto __onepole_tilde_01_b1 = this->onepole_tilde_01_b1;
                auto __onepole_tilde_01_a0 = this->onepole_tilde_01_a0;
                auto __onepole_tilde_01_needsUpdate = this->onepole_tilde_01_needsUpdate;
                auto __onepole_tilde_01_freq = this->onepole_tilde_01_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_01_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_01_needsUpdate)) {
                        __onepole_tilde_01_freq = freqInHz[(Index)i];
                        __onepole_tilde_01_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_01_a0 = (__onepole_tilde_01_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_01_a0 < 0.00001 ? 0.00001 : __onepole_tilde_01_a0));
                        __onepole_tilde_01_b1 = 1 - __onepole_tilde_01_a0;
                        __onepole_tilde_01_needsUpdate = false;
                    }
            
                    __onepole_tilde_01_lastY = __onepole_tilde_01_a0 * x[(Index)i] + __onepole_tilde_01_b1 * __onepole_tilde_01_lastY;
                    out1[(Index)i] = __onepole_tilde_01_lastY;
                }
            
                this->onepole_tilde_01_freq = __onepole_tilde_01_freq;
                this->onepole_tilde_01_needsUpdate = __onepole_tilde_01_needsUpdate;
                this->onepole_tilde_01_a0 = __onepole_tilde_01_a0;
                this->onepole_tilde_01_b1 = __onepole_tilde_01_b1;
                this->onepole_tilde_01_lastY = __onepole_tilde_01_lastY;
            }
            
            void dspexpr_14_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void allpass_tilde_10_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.5;
                    number delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_10_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_10_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_10_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_10_feedBack_write(ov);
                    this->allpass_tilde_10_feedForward_step();
                    this->allpass_tilde_10_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void delaytilde_01_perform(const Sample * delay, const Sample * input, Sample * output, Index n) {
                auto __delaytilde_01_crossfadeDelay = this->delaytilde_01_crossfadeDelay;
                auto __delaytilde_01_rampInSamples = this->delaytilde_01_rampInSamples;
                auto __delaytilde_01_ramp = this->delaytilde_01_ramp;
                auto __delaytilde_01_lastDelay = this->delaytilde_01_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_01_lastDelay == -1) {
                        __delaytilde_01_lastDelay = delay[(Index)i];
                    }
            
                    if (__delaytilde_01_ramp > 0) {
                        number factor = __delaytilde_01_ramp / __delaytilde_01_rampInSamples;
                        output[(Index)i] = this->delaytilde_01_del_read(__delaytilde_01_crossfadeDelay, 0) * factor + this->delaytilde_01_del_read(__delaytilde_01_lastDelay, 0) * (1. - factor);
                        __delaytilde_01_ramp--;
                    } else {
                        number effectiveDelay = delay[(Index)i];
            
                        if (effectiveDelay != __delaytilde_01_lastDelay) {
                            __delaytilde_01_ramp = __delaytilde_01_rampInSamples;
                            __delaytilde_01_crossfadeDelay = __delaytilde_01_lastDelay;
                            __delaytilde_01_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_01_del_read(__delaytilde_01_crossfadeDelay, 0);
                            __delaytilde_01_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_01_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_01_del_write(input[(Index)i]);
                    this->delaytilde_01_del_step();
                }
            
                this->delaytilde_01_lastDelay = __delaytilde_01_lastDelay;
                this->delaytilde_01_ramp = __delaytilde_01_ramp;
                this->delaytilde_01_crossfadeDelay = __delaytilde_01_crossfadeDelay;
            }
            
            void feedbackwriter_01_perform(const Sample * input, Index n) {
                auto& buffer = this->feedbacktilde_01_feedbackbuffer;
            
                for (Index i = 0; i < n; i++) {
                    buffer[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_21_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_20_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void lores_01_resonance_setter(number v) {
                if (v < 0.0) {
                    v = 0.0;
                } else if (v >= 1.0) {
                    v = 1.0 - 1E-20;
                }
            
                this->lores_01_resonance = v;
            }
            
            void allpass_tilde_09_feedForward_step() {
                this->allpass_tilde_09_feedForward_reader++;
            
                if (this->allpass_tilde_09_feedForward_reader >= (int)(this->allpass_tilde_09_feedForward_buffer->getSize()))
                    this->allpass_tilde_09_feedForward_reader = 0;
            }
            
            number allpass_tilde_09_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_09_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_09_feedForward_wrap))
                );
            }
            
            void allpass_tilde_09_feedForward_write(number v) {
                this->allpass_tilde_09_feedForward_writer = this->allpass_tilde_09_feedForward_reader;
                this->allpass_tilde_09_feedForward_buffer[(Index)this->allpass_tilde_09_feedForward_writer] = v;
            }
            
            number allpass_tilde_09_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_09_feedForward__maxdelay : size);
                number val = this->allpass_tilde_09_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_09_feedForward_write(v);
                this->allpass_tilde_09_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_09_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_09_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_09_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_09_feedForward_init() {
                auto result = this->allpass_tilde_09_feedForward_calcSizeInSamples();
                this->allpass_tilde_09_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_09_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_09_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_09_feedForward_clear() {
                this->allpass_tilde_09_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_09_feedForward_reset() {
                auto result = this->allpass_tilde_09_feedForward_calcSizeInSamples();
                this->allpass_tilde_09_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_09_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_09_feedForward_buffer);
                this->allpass_tilde_09_feedForward_wrap = this->allpass_tilde_09_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_09_feedForward_clear();
            
                if (this->allpass_tilde_09_feedForward_reader >= this->allpass_tilde_09_feedForward__maxdelay || this->allpass_tilde_09_feedForward_writer >= this->allpass_tilde_09_feedForward__maxdelay) {
                    this->allpass_tilde_09_feedForward_reader = 0;
                    this->allpass_tilde_09_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_09_feedForward_dspsetup() {
                this->allpass_tilde_09_feedForward_reset();
            }
            
            number allpass_tilde_09_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_09_feedForward_size() {
                return this->allpass_tilde_09_feedForward__maxdelay;
            }
            
            void allpass_tilde_09_feedBack_step() {
                this->allpass_tilde_09_feedBack_reader++;
            
                if (this->allpass_tilde_09_feedBack_reader >= (int)(this->allpass_tilde_09_feedBack_buffer->getSize()))
                    this->allpass_tilde_09_feedBack_reader = 0;
            }
            
            number allpass_tilde_09_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_09_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_09_feedBack_wrap))
                );
            }
            
            void allpass_tilde_09_feedBack_write(number v) {
                this->allpass_tilde_09_feedBack_writer = this->allpass_tilde_09_feedBack_reader;
                this->allpass_tilde_09_feedBack_buffer[(Index)this->allpass_tilde_09_feedBack_writer] = v;
            }
            
            number allpass_tilde_09_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_09_feedBack__maxdelay : size);
                number val = this->allpass_tilde_09_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_09_feedBack_write(v);
                this->allpass_tilde_09_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_09_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_09_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_09_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_09_feedBack_init() {
                auto result = this->allpass_tilde_09_feedBack_calcSizeInSamples();
                this->allpass_tilde_09_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_09_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_09_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_09_feedBack_clear() {
                this->allpass_tilde_09_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_09_feedBack_reset() {
                auto result = this->allpass_tilde_09_feedBack_calcSizeInSamples();
                this->allpass_tilde_09_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_09_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_09_feedBack_buffer);
                this->allpass_tilde_09_feedBack_wrap = this->allpass_tilde_09_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_09_feedBack_clear();
            
                if (this->allpass_tilde_09_feedBack_reader >= this->allpass_tilde_09_feedBack__maxdelay || this->allpass_tilde_09_feedBack_writer >= this->allpass_tilde_09_feedBack__maxdelay) {
                    this->allpass_tilde_09_feedBack_reader = 0;
                    this->allpass_tilde_09_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_09_feedBack_dspsetup() {
                this->allpass_tilde_09_feedBack_reset();
            }
            
            number allpass_tilde_09_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_09_feedBack_size() {
                return this->allpass_tilde_09_feedBack__maxdelay;
            }
            
            void allpass_tilde_09_init() {
                this->allpass_tilde_09_feedForward_init();
                this->allpass_tilde_09_feedBack_init();
            }
            
            void allpass_tilde_09_clear() {
                this->allpass_tilde_09_feedForward_clear();
                this->allpass_tilde_09_feedBack_clear();
            }
            
            void allpass_tilde_09_reset() {
                this->allpass_tilde_09_init();
                this->allpass_tilde_09_clear();
            }
            
            void allpass_tilde_09_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_09_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_09_reset();
                this->allpass_tilde_09_setupDone = true;
                this->allpass_tilde_09_feedForward_dspsetup();
                this->allpass_tilde_09_feedBack_dspsetup();
            }
            
            void comb_tilde_08_feedForward_step() {
                this->comb_tilde_08_feedForward_reader++;
            
                if (this->comb_tilde_08_feedForward_reader >= (int)(this->comb_tilde_08_feedForward_buffer->getSize()))
                    this->comb_tilde_08_feedForward_reader = 0;
            }
            
            number comb_tilde_08_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_08_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_08_feedForward_wrap))
                );
            }
            
            void comb_tilde_08_feedForward_write(number v) {
                this->comb_tilde_08_feedForward_writer = this->comb_tilde_08_feedForward_reader;
                this->comb_tilde_08_feedForward_buffer[(Index)this->comb_tilde_08_feedForward_writer] = v;
            }
            
            number comb_tilde_08_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_08_feedForward__maxdelay : size);
                number val = this->comb_tilde_08_feedForward_read(effectiveSize, 0);
                this->comb_tilde_08_feedForward_write(v);
                this->comb_tilde_08_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_08_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_08_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_08_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_08_feedForward_init() {
                auto result = this->comb_tilde_08_feedForward_calcSizeInSamples();
                this->comb_tilde_08_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_08_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_08_feedForward_clear() {
                this->comb_tilde_08_feedForward_buffer->setZero();
            }
            
            void comb_tilde_08_feedForward_reset() {
                auto result = this->comb_tilde_08_feedForward_calcSizeInSamples();
                this->comb_tilde_08_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_08_feedForward_buffer);
                this->comb_tilde_08_feedForward_wrap = this->comb_tilde_08_feedForward_buffer->getSize() - 1;
                this->comb_tilde_08_feedForward_clear();
            
                if (this->comb_tilde_08_feedForward_reader >= this->comb_tilde_08_feedForward__maxdelay || this->comb_tilde_08_feedForward_writer >= this->comb_tilde_08_feedForward__maxdelay) {
                    this->comb_tilde_08_feedForward_reader = 0;
                    this->comb_tilde_08_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_08_feedForward_dspsetup() {
                this->comb_tilde_08_feedForward_reset();
            }
            
            number comb_tilde_08_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_08_feedForward_size() {
                return this->comb_tilde_08_feedForward__maxdelay;
            }
            
            void comb_tilde_08_feedBack_step() {
                this->comb_tilde_08_feedBack_reader++;
            
                if (this->comb_tilde_08_feedBack_reader >= (int)(this->comb_tilde_08_feedBack_buffer->getSize()))
                    this->comb_tilde_08_feedBack_reader = 0;
            }
            
            number comb_tilde_08_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_08_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_08_feedBack_wrap))
                );
            }
            
            void comb_tilde_08_feedBack_write(number v) {
                this->comb_tilde_08_feedBack_writer = this->comb_tilde_08_feedBack_reader;
                this->comb_tilde_08_feedBack_buffer[(Index)this->comb_tilde_08_feedBack_writer] = v;
            }
            
            number comb_tilde_08_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_08_feedBack__maxdelay : size);
                number val = this->comb_tilde_08_feedBack_read(effectiveSize, 0);
                this->comb_tilde_08_feedBack_write(v);
                this->comb_tilde_08_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_08_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_08_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_08_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_08_feedBack_init() {
                auto result = this->comb_tilde_08_feedBack_calcSizeInSamples();
                this->comb_tilde_08_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_08_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_08_feedBack_clear() {
                this->comb_tilde_08_feedBack_buffer->setZero();
            }
            
            void comb_tilde_08_feedBack_reset() {
                auto result = this->comb_tilde_08_feedBack_calcSizeInSamples();
                this->comb_tilde_08_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_08_feedBack_buffer);
                this->comb_tilde_08_feedBack_wrap = this->comb_tilde_08_feedBack_buffer->getSize() - 1;
                this->comb_tilde_08_feedBack_clear();
            
                if (this->comb_tilde_08_feedBack_reader >= this->comb_tilde_08_feedBack__maxdelay || this->comb_tilde_08_feedBack_writer >= this->comb_tilde_08_feedBack__maxdelay) {
                    this->comb_tilde_08_feedBack_reader = 0;
                    this->comb_tilde_08_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_08_feedBack_dspsetup() {
                this->comb_tilde_08_feedBack_reset();
            }
            
            number comb_tilde_08_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_08_feedBack_size() {
                return this->comb_tilde_08_feedBack__maxdelay;
            }
            
            void comb_tilde_08_init() {
                this->comb_tilde_08_feedForward_init();
                this->comb_tilde_08_feedBack_init();
            }
            
            void comb_tilde_08_clear() {
                this->comb_tilde_08_feedForward_clear();
                this->comb_tilde_08_feedBack_clear();
            }
            
            void comb_tilde_08_reset() {
                this->comb_tilde_08_init();
                this->comb_tilde_08_clear();
            }
            
            void comb_tilde_08_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_08_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_08_reset();
                this->comb_tilde_08_setupDone = true;
                this->comb_tilde_08_feedForward_dspsetup();
                this->comb_tilde_08_feedBack_dspsetup();
            }
            
            void allpass_tilde_10_feedForward_step() {
                this->allpass_tilde_10_feedForward_reader++;
            
                if (this->allpass_tilde_10_feedForward_reader >= (int)(this->allpass_tilde_10_feedForward_buffer->getSize()))
                    this->allpass_tilde_10_feedForward_reader = 0;
            }
            
            number allpass_tilde_10_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_10_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_10_feedForward_wrap))
                );
            }
            
            void allpass_tilde_10_feedForward_write(number v) {
                this->allpass_tilde_10_feedForward_writer = this->allpass_tilde_10_feedForward_reader;
                this->allpass_tilde_10_feedForward_buffer[(Index)this->allpass_tilde_10_feedForward_writer] = v;
            }
            
            number allpass_tilde_10_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_10_feedForward__maxdelay : size);
                number val = this->allpass_tilde_10_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_10_feedForward_write(v);
                this->allpass_tilde_10_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_10_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_10_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_10_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_10_feedForward_init() {
                auto result = this->allpass_tilde_10_feedForward_calcSizeInSamples();
                this->allpass_tilde_10_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_10_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_10_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_10_feedForward_clear() {
                this->allpass_tilde_10_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_10_feedForward_reset() {
                auto result = this->allpass_tilde_10_feedForward_calcSizeInSamples();
                this->allpass_tilde_10_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_10_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_10_feedForward_buffer);
                this->allpass_tilde_10_feedForward_wrap = this->allpass_tilde_10_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_10_feedForward_clear();
            
                if (this->allpass_tilde_10_feedForward_reader >= this->allpass_tilde_10_feedForward__maxdelay || this->allpass_tilde_10_feedForward_writer >= this->allpass_tilde_10_feedForward__maxdelay) {
                    this->allpass_tilde_10_feedForward_reader = 0;
                    this->allpass_tilde_10_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_10_feedForward_dspsetup() {
                this->allpass_tilde_10_feedForward_reset();
            }
            
            number allpass_tilde_10_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_10_feedForward_size() {
                return this->allpass_tilde_10_feedForward__maxdelay;
            }
            
            void allpass_tilde_10_feedBack_step() {
                this->allpass_tilde_10_feedBack_reader++;
            
                if (this->allpass_tilde_10_feedBack_reader >= (int)(this->allpass_tilde_10_feedBack_buffer->getSize()))
                    this->allpass_tilde_10_feedBack_reader = 0;
            }
            
            number allpass_tilde_10_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_10_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_10_feedBack_wrap))
                );
            }
            
            void allpass_tilde_10_feedBack_write(number v) {
                this->allpass_tilde_10_feedBack_writer = this->allpass_tilde_10_feedBack_reader;
                this->allpass_tilde_10_feedBack_buffer[(Index)this->allpass_tilde_10_feedBack_writer] = v;
            }
            
            number allpass_tilde_10_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_10_feedBack__maxdelay : size);
                number val = this->allpass_tilde_10_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_10_feedBack_write(v);
                this->allpass_tilde_10_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_10_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_10_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_10_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_10_feedBack_init() {
                auto result = this->allpass_tilde_10_feedBack_calcSizeInSamples();
                this->allpass_tilde_10_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_10_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_10_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_10_feedBack_clear() {
                this->allpass_tilde_10_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_10_feedBack_reset() {
                auto result = this->allpass_tilde_10_feedBack_calcSizeInSamples();
                this->allpass_tilde_10_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_10_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_10_feedBack_buffer);
                this->allpass_tilde_10_feedBack_wrap = this->allpass_tilde_10_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_10_feedBack_clear();
            
                if (this->allpass_tilde_10_feedBack_reader >= this->allpass_tilde_10_feedBack__maxdelay || this->allpass_tilde_10_feedBack_writer >= this->allpass_tilde_10_feedBack__maxdelay) {
                    this->allpass_tilde_10_feedBack_reader = 0;
                    this->allpass_tilde_10_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_10_feedBack_dspsetup() {
                this->allpass_tilde_10_feedBack_reset();
            }
            
            number allpass_tilde_10_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_10_feedBack_size() {
                return this->allpass_tilde_10_feedBack__maxdelay;
            }
            
            void allpass_tilde_10_init() {
                this->allpass_tilde_10_feedForward_init();
                this->allpass_tilde_10_feedBack_init();
            }
            
            void allpass_tilde_10_clear() {
                this->allpass_tilde_10_feedForward_clear();
                this->allpass_tilde_10_feedBack_clear();
            }
            
            void allpass_tilde_10_reset() {
                this->allpass_tilde_10_init();
                this->allpass_tilde_10_clear();
            }
            
            void allpass_tilde_10_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_10_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_10_reset();
                this->allpass_tilde_10_setupDone = true;
                this->allpass_tilde_10_feedForward_dspsetup();
                this->allpass_tilde_10_feedBack_dspsetup();
            }
            
            void onepole_tilde_01_reset() {
                this->onepole_tilde_01_lastY = 0;
                this->onepole_tilde_01_a0 = 0;
                this->onepole_tilde_01_b1 = 0;
            }
            
            void onepole_tilde_01_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_01_needsUpdate = true;
                this->onepole_tilde_01_reset();
                this->onepole_tilde_01_setupDone = true;
            }
            
            void lores_01_reset() {
                this->lores_01_y_1 = 0;
                this->lores_01_y_2 = 0;
                this->lores_01_last_resonance = 0;
                this->lores_01_last_frequency = 0;
                this->lores_01_last_res_calc = 0;
                this->lores_01_last_freq_calc = 0;
            }
            
            void lores_01_dspsetup(bool force) {
                if ((bool)(this->lores_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->lores_01_reset();
                this->lores_01_setupDone = true;
            }
            
            void noise_tilde_01_init() {
                this->noise_tilde_01_last = (Index)(systemticks() + this->voice() + this->random(0, 10000));
                this->noise_tilde_01_recip = (number)2 / (number)8388607;
            }
            
            void delaytilde_01_del_step() {
                this->delaytilde_01_del_reader++;
            
                if (this->delaytilde_01_del_reader >= (int)(this->delaytilde_01_del_buffer->getSize()))
                    this->delaytilde_01_del_reader = 0;
            }
            
            number delaytilde_01_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->delaytilde_01_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_01_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->delaytilde_01_del_wrap))
                );
            }
            
            void delaytilde_01_del_write(number v) {
                this->delaytilde_01_del_writer = this->delaytilde_01_del_reader;
                this->delaytilde_01_del_buffer[(Index)this->delaytilde_01_del_writer] = v;
            }
            
            number delaytilde_01_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_01_del__maxdelay : size);
                number val = this->delaytilde_01_del_read(effectiveSize, 0);
                this->delaytilde_01_del_write(v);
                this->delaytilde_01_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_01_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_01_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_01_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_01_del_init() {
                auto result = this->delaytilde_01_del_calcSizeInSamples();
                this->delaytilde_01_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_01_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_01_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_01_del_clear() {
                this->delaytilde_01_del_buffer->setZero();
            }
            
            void delaytilde_01_del_reset() {
                auto result = this->delaytilde_01_del_calcSizeInSamples();
                this->delaytilde_01_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_01_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_01_del_buffer);
                this->delaytilde_01_del_wrap = this->delaytilde_01_del_buffer->getSize() - 1;
                this->delaytilde_01_del_clear();
            
                if (this->delaytilde_01_del_reader >= this->delaytilde_01_del__maxdelay || this->delaytilde_01_del_writer >= this->delaytilde_01_del__maxdelay) {
                    this->delaytilde_01_del_reader = 0;
                    this->delaytilde_01_del_writer = 0;
                }
            }
            
            void delaytilde_01_del_dspsetup() {
                this->delaytilde_01_del_reset();
            }
            
            number delaytilde_01_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 38400;
            }
            
            number delaytilde_01_del_size() {
                return this->delaytilde_01_del__maxdelay;
            }
            
            void delaytilde_01_dspsetup(bool force) {
                if ((bool)(this->delaytilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_01_rampInSamples = (long)(this->mstosamps(0));
                this->delaytilde_01_lastDelay = -1;
                this->delaytilde_01_setupDone = true;
                this->delaytilde_01_del_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                allpass_tilde_09_x = 0;
                allpass_tilde_09_delayTime = 22.58;
                allpass_tilde_09_gain = -0.7;
                dspexpr_11_in1 = 0;
                dspexpr_11_in2 = 22.58;
                comb_tilde_08_x = 0;
                comb_tilde_08_delayTime = 149.6;
                comb_tilde_08_gain = 0;
                comb_tilde_08_ffGain = 1;
                comb_tilde_08_fbGain = 0;
                dspexpr_12_in1 = 0;
                dspexpr_12_in2 = 0;
                dspexpr_13_in1 = 0;
                dspexpr_13_in2 = 149.6;
                dspexpr_14_in1 = 0;
                dspexpr_14_in2 = 0.5;
                allpass_tilde_10_x = 0;
                allpass_tilde_10_delayTime = 60.48;
                allpass_tilde_10_gain = 0.5;
                onepole_tilde_01_x = 0;
                onepole_tilde_01_freqInHz = 1800;
                dspexpr_15_in1 = 0;
                dspexpr_15_in2 = 20;
                lores_01_cutoff = 0;
                lores_01_resonance = 0.995;
                lores_01_resonance_setter(lores_01_resonance);
                dspexpr_16_in1 = 0;
                dspexpr_16_in2 = 60.48;
                delaytilde_01_delay = 0;
                mstosamps_tilde_01_ms = 0;
                dspexpr_17_in1 = 0;
                dspexpr_17_in2 = 125;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                allpass_tilde_09_feedForward__maxdelay = 0;
                allpass_tilde_09_feedForward_sizemode = 0;
                allpass_tilde_09_feedForward_wrap = 0;
                allpass_tilde_09_feedForward_reader = 0;
                allpass_tilde_09_feedForward_writer = 0;
                allpass_tilde_09_feedBack__maxdelay = 0;
                allpass_tilde_09_feedBack_sizemode = 0;
                allpass_tilde_09_feedBack_wrap = 0;
                allpass_tilde_09_feedBack_reader = 0;
                allpass_tilde_09_feedBack_writer = 0;
                allpass_tilde_09_setupDone = false;
                comb_tilde_08_feedForward__maxdelay = 0;
                comb_tilde_08_feedForward_sizemode = 0;
                comb_tilde_08_feedForward_wrap = 0;
                comb_tilde_08_feedForward_reader = 0;
                comb_tilde_08_feedForward_writer = 0;
                comb_tilde_08_feedBack__maxdelay = 0;
                comb_tilde_08_feedBack_sizemode = 0;
                comb_tilde_08_feedBack_wrap = 0;
                comb_tilde_08_feedBack_reader = 0;
                comb_tilde_08_feedBack_writer = 0;
                comb_tilde_08_setupDone = false;
                allpass_tilde_10_feedForward__maxdelay = 0;
                allpass_tilde_10_feedForward_sizemode = 0;
                allpass_tilde_10_feedForward_wrap = 0;
                allpass_tilde_10_feedForward_reader = 0;
                allpass_tilde_10_feedForward_writer = 0;
                allpass_tilde_10_feedBack__maxdelay = 0;
                allpass_tilde_10_feedBack_sizemode = 0;
                allpass_tilde_10_feedBack_wrap = 0;
                allpass_tilde_10_feedBack_reader = 0;
                allpass_tilde_10_feedBack_writer = 0;
                allpass_tilde_10_setupDone = false;
                onepole_tilde_01_freq = 0;
                onepole_tilde_01_needsUpdate = false;
                onepole_tilde_01_lastY = 0;
                onepole_tilde_01_a0 = 0;
                onepole_tilde_01_b1 = 0;
                onepole_tilde_01_setupDone = false;
                lores_01_setupDone = false;
                noise_tilde_01_last = 0;
                delaytilde_01_lastDelay = -1;
                delaytilde_01_crossfadeDelay = 0;
                delaytilde_01_ramp = 0;
                delaytilde_01_rampInSamples = 0;
                delaytilde_01_del__maxdelay = 0;
                delaytilde_01_del_sizemode = 0;
                delaytilde_01_del_wrap = 0;
                delaytilde_01_del_reader = 0;
                delaytilde_01_del_writer = 0;
                delaytilde_01_setupDone = false;
                feedbacktilde_01_feedbackbuffer = nullptr;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number allpass_tilde_09_x;
                number allpass_tilde_09_delayTime;
                number allpass_tilde_09_gain;
                number dspexpr_11_in1;
                number dspexpr_11_in2;
                number comb_tilde_08_x;
                number comb_tilde_08_delayTime;
                number comb_tilde_08_gain;
                number comb_tilde_08_ffGain;
                number comb_tilde_08_fbGain;
                number dspexpr_12_in1;
                number dspexpr_12_in2;
                number dspexpr_13_in1;
                number dspexpr_13_in2;
                number dspexpr_14_in1;
                number dspexpr_14_in2;
                number allpass_tilde_10_x;
                number allpass_tilde_10_delayTime;
                number allpass_tilde_10_gain;
                number onepole_tilde_01_x;
                number onepole_tilde_01_freqInHz;
                number dspexpr_15_in1;
                number dspexpr_15_in2;
                number lores_01_cutoff;
                number lores_01_resonance;
                number dspexpr_16_in1;
                number dspexpr_16_in2;
                number delaytilde_01_delay;
                number mstosamps_tilde_01_ms;
                number dspexpr_17_in1;
                number dspexpr_17_in2;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[6];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef allpass_tilde_09_feedForward_buffer;
                Index allpass_tilde_09_feedForward__maxdelay;
                Int allpass_tilde_09_feedForward_sizemode;
                Index allpass_tilde_09_feedForward_wrap;
                Int allpass_tilde_09_feedForward_reader;
                Int allpass_tilde_09_feedForward_writer;
                Float64BufferRef allpass_tilde_09_feedBack_buffer;
                Index allpass_tilde_09_feedBack__maxdelay;
                Int allpass_tilde_09_feedBack_sizemode;
                Index allpass_tilde_09_feedBack_wrap;
                Int allpass_tilde_09_feedBack_reader;
                Int allpass_tilde_09_feedBack_writer;
                bool allpass_tilde_09_setupDone;
                Float64BufferRef comb_tilde_08_feedForward_buffer;
                Index comb_tilde_08_feedForward__maxdelay;
                Int comb_tilde_08_feedForward_sizemode;
                Index comb_tilde_08_feedForward_wrap;
                Int comb_tilde_08_feedForward_reader;
                Int comb_tilde_08_feedForward_writer;
                Float64BufferRef comb_tilde_08_feedBack_buffer;
                Index comb_tilde_08_feedBack__maxdelay;
                Int comb_tilde_08_feedBack_sizemode;
                Index comb_tilde_08_feedBack_wrap;
                Int comb_tilde_08_feedBack_reader;
                Int comb_tilde_08_feedBack_writer;
                bool comb_tilde_08_setupDone;
                Float64BufferRef allpass_tilde_10_feedForward_buffer;
                Index allpass_tilde_10_feedForward__maxdelay;
                Int allpass_tilde_10_feedForward_sizemode;
                Index allpass_tilde_10_feedForward_wrap;
                Int allpass_tilde_10_feedForward_reader;
                Int allpass_tilde_10_feedForward_writer;
                Float64BufferRef allpass_tilde_10_feedBack_buffer;
                Index allpass_tilde_10_feedBack__maxdelay;
                Int allpass_tilde_10_feedBack_sizemode;
                Index allpass_tilde_10_feedBack_wrap;
                Int allpass_tilde_10_feedBack_reader;
                Int allpass_tilde_10_feedBack_writer;
                bool allpass_tilde_10_setupDone;
                number onepole_tilde_01_freq;
                bool onepole_tilde_01_needsUpdate;
                number onepole_tilde_01_lastY;
                number onepole_tilde_01_a0;
                number onepole_tilde_01_b1;
                bool onepole_tilde_01_setupDone;
                number lores_01_b_0;
                number lores_01_a_1;
                number lores_01_a_2;
                number lores_01_x_0;
                number lores_01_y_1;
                number lores_01_y_2;
                number lores_01_last_resonance;
                number lores_01_last_frequency;
                number lores_01_last_res_calc;
                number lores_01_last_freq_calc;
                bool lores_01_setupDone;
                Index noise_tilde_01_last;
                number noise_tilde_01_recip;
                number delaytilde_01_lastDelay;
                number delaytilde_01_crossfadeDelay;
                number delaytilde_01_ramp;
                long delaytilde_01_rampInSamples;
                Float64BufferRef delaytilde_01_del_buffer;
                Index delaytilde_01_del__maxdelay;
                Int delaytilde_01_del_sizemode;
                Index delaytilde_01_del_wrap;
                Int delaytilde_01_del_reader;
                Int delaytilde_01_del_writer;
                bool delaytilde_01_setupDone;
                signal feedbacktilde_01_feedbackbuffer;
                number stackprotect_count;
                DataRef allpass_tilde_09_feedForward_bufferobj;
                DataRef allpass_tilde_09_feedBack_bufferobj;
                DataRef comb_tilde_08_feedForward_bufferobj;
                DataRef comb_tilde_08_feedBack_bufferobj;
                DataRef allpass_tilde_10_feedForward_bufferobj;
                DataRef allpass_tilde_10_feedBack_bufferobj;
                DataRef delaytilde_01_del_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1030 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1051;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1030()
            {
            }
            
            ~RNBOSubpatcher_1030()
            {
            }
            
            virtual RNBOSubpatcher_1051* getPatcher() const {
                return static_cast<RNBOSubpatcher_1051 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                this->onepole_tilde_03_perform(in2, in3, out2, n);
                this->onepole_tilde_02_perform(in1, in3, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->onepole_tilde_03_dspsetup(forceDSPSetup);
                this->onepole_tilde_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 3;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void onepole_tilde_03_perform(const Sample * x, const Sample * freqInHz, Sample * out1, Index n) {
                auto __onepole_tilde_03_lastY = this->onepole_tilde_03_lastY;
                auto __onepole_tilde_03_b1 = this->onepole_tilde_03_b1;
                auto __onepole_tilde_03_a0 = this->onepole_tilde_03_a0;
                auto __onepole_tilde_03_needsUpdate = this->onepole_tilde_03_needsUpdate;
                auto __onepole_tilde_03_freq = this->onepole_tilde_03_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_03_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_03_needsUpdate)) {
                        __onepole_tilde_03_freq = freqInHz[(Index)i];
                        __onepole_tilde_03_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_03_a0 = (__onepole_tilde_03_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_03_a0 < 0.00001 ? 0.00001 : __onepole_tilde_03_a0));
                        __onepole_tilde_03_b1 = 1 - __onepole_tilde_03_a0;
                        __onepole_tilde_03_needsUpdate = false;
                    }
            
                    __onepole_tilde_03_lastY = __onepole_tilde_03_a0 * x[(Index)i] + __onepole_tilde_03_b1 * __onepole_tilde_03_lastY;
                    out1[(Index)i] = __onepole_tilde_03_lastY;
                }
            
                this->onepole_tilde_03_freq = __onepole_tilde_03_freq;
                this->onepole_tilde_03_needsUpdate = __onepole_tilde_03_needsUpdate;
                this->onepole_tilde_03_a0 = __onepole_tilde_03_a0;
                this->onepole_tilde_03_b1 = __onepole_tilde_03_b1;
                this->onepole_tilde_03_lastY = __onepole_tilde_03_lastY;
            }
            
            void onepole_tilde_02_perform(const Sample * x, const Sample * freqInHz, Sample * out1, Index n) {
                auto __onepole_tilde_02_lastY = this->onepole_tilde_02_lastY;
                auto __onepole_tilde_02_b1 = this->onepole_tilde_02_b1;
                auto __onepole_tilde_02_a0 = this->onepole_tilde_02_a0;
                auto __onepole_tilde_02_needsUpdate = this->onepole_tilde_02_needsUpdate;
                auto __onepole_tilde_02_freq = this->onepole_tilde_02_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_02_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_02_needsUpdate)) {
                        __onepole_tilde_02_freq = freqInHz[(Index)i];
                        __onepole_tilde_02_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_02_a0 = (__onepole_tilde_02_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_02_a0 < 0.00001 ? 0.00001 : __onepole_tilde_02_a0));
                        __onepole_tilde_02_b1 = 1 - __onepole_tilde_02_a0;
                        __onepole_tilde_02_needsUpdate = false;
                    }
            
                    __onepole_tilde_02_lastY = __onepole_tilde_02_a0 * x[(Index)i] + __onepole_tilde_02_b1 * __onepole_tilde_02_lastY;
                    out1[(Index)i] = __onepole_tilde_02_lastY;
                }
            
                this->onepole_tilde_02_freq = __onepole_tilde_02_freq;
                this->onepole_tilde_02_needsUpdate = __onepole_tilde_02_needsUpdate;
                this->onepole_tilde_02_a0 = __onepole_tilde_02_a0;
                this->onepole_tilde_02_b1 = __onepole_tilde_02_b1;
                this->onepole_tilde_02_lastY = __onepole_tilde_02_lastY;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void onepole_tilde_02_reset() {
                this->onepole_tilde_02_lastY = 0;
                this->onepole_tilde_02_a0 = 0;
                this->onepole_tilde_02_b1 = 0;
            }
            
            void onepole_tilde_02_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_02_needsUpdate = true;
                this->onepole_tilde_02_reset();
                this->onepole_tilde_02_setupDone = true;
            }
            
            void onepole_tilde_03_reset() {
                this->onepole_tilde_03_lastY = 0;
                this->onepole_tilde_03_a0 = 0;
                this->onepole_tilde_03_b1 = 0;
            }
            
            void onepole_tilde_03_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_03_needsUpdate = true;
                this->onepole_tilde_03_reset();
                this->onepole_tilde_03_setupDone = true;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                onepole_tilde_02_x = 0;
                onepole_tilde_02_freqInHz = 1800;
                onepole_tilde_03_x = 0;
                onepole_tilde_03_freqInHz = 1800;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                onepole_tilde_02_freq = 0;
                onepole_tilde_02_needsUpdate = false;
                onepole_tilde_02_lastY = 0;
                onepole_tilde_02_a0 = 0;
                onepole_tilde_02_b1 = 0;
                onepole_tilde_02_setupDone = false;
                onepole_tilde_03_freq = 0;
                onepole_tilde_03_needsUpdate = false;
                onepole_tilde_03_lastY = 0;
                onepole_tilde_03_a0 = 0;
                onepole_tilde_03_b1 = 0;
                onepole_tilde_03_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number onepole_tilde_02_x;
                number onepole_tilde_02_freqInHz;
                number onepole_tilde_03_x;
                number onepole_tilde_03_freqInHz;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number onepole_tilde_02_freq;
                bool onepole_tilde_02_needsUpdate;
                number onepole_tilde_02_lastY;
                number onepole_tilde_02_a0;
                number onepole_tilde_02_b1;
                bool onepole_tilde_02_setupDone;
                number onepole_tilde_03_freq;
                bool onepole_tilde_03_needsUpdate;
                number onepole_tilde_03_lastY;
                number onepole_tilde_03_a0;
                number onepole_tilde_03_b1;
                bool onepole_tilde_03_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1031 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1051;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1031()
            {
            }
            
            ~RNBOSubpatcher_1031()
            {
            }
            
            virtual RNBOSubpatcher_1051* getPatcher() const {
                return static_cast<RNBOSubpatcher_1051 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() {
                return this->sr;
            }
            
            Index vectorsize() {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return rand01() * range + low;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                this->dspexpr_24_perform(in2, this->dspexpr_24_in2, this->signals[0], n);
                this->mstosamps_tilde_02_perform(this->signals[0], this->signals[1], n);
                this->dspexpr_23_perform(in2, this->dspexpr_23_in2, this->signals[0], n);
                this->dspexpr_20_perform(in2, this->dspexpr_20_in2, this->signals[2], n);
                this->dspexpr_18_perform(in2, this->dspexpr_18_in2, this->signals[3], n);
                this->noise_tilde_02_perform(this->signals[4], n);
            
                this->lores_02_perform(
                    this->lores_02_cutoff,
                    this->lores_02_resonance,
                    this->signals[4],
                    this->signals[5],
                    n
                );
            
                this->dspexpr_22_perform(this->signals[5], in3, this->signals[4], n);
                this->dspexpr_19_perform(this->signals[2], this->signals[4], this->signals[5], n);
                this->feedbackreader_02_perform(this->signals[4], n);
                this->signaladder_08_perform(in1, this->signals[4], this->signals[4], n);
                this->allpass_tilde_11_perform(this->signals[4], this->signals[3], this->allpass_tilde_11_gain, out1, n);
            
                this->comb_tilde_09_perform(
                    out1,
                    this->signals[5],
                    this->comb_tilde_09_gain,
                    this->comb_tilde_09_ffGain,
                    this->comb_tilde_09_fbGain,
                    this->signals[3],
                    n
                );
            
                this->onepole_tilde_04_perform(this->signals[3], in4, this->signals[5], n);
                this->dspexpr_21_perform(this->signals[5], in5, this->signals[2], n);
            
                this->allpass_tilde_12_perform(
                    this->signals[2],
                    this->signals[0],
                    this->allpass_tilde_12_gain,
                    this->signals[5],
                    n
                );
            
                this->delaytilde_02_perform(this->signals[1], this->signals[5], out4, n);
                this->feedbackwriter_02_perform(out4, n);
                this->signalforwarder_23_perform(this->signals[5], out3, n);
                this->signalforwarder_22_perform(this->signals[3], out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 6; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->feedbacktilde_02_feedbackbuffer = resizeSignal(this->feedbacktilde_02_feedbackbuffer, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->lores_02_dspsetup(forceDSPSetup);
                this->allpass_tilde_11_dspsetup(forceDSPSetup);
                this->comb_tilde_09_dspsetup(forceDSPSetup);
                this->onepole_tilde_04_dspsetup(forceDSPSetup);
                this->allpass_tilde_12_dspsetup(forceDSPSetup);
                this->delaytilde_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 5:
                    return addressOf(this->allpass_tilde_11_feedForward_bufferobj);
                    break;
                case 6:
                    return addressOf(this->allpass_tilde_11_feedBack_bufferobj);
                    break;
                case 7:
                    return addressOf(this->comb_tilde_09_feedForward_bufferobj);
                    break;
                case 8:
                    return addressOf(this->comb_tilde_09_feedBack_bufferobj);
                    break;
                case 9:
                    return addressOf(this->allpass_tilde_12_feedForward_bufferobj);
                    break;
                case 10:
                    return addressOf(this->allpass_tilde_12_feedBack_bufferobj);
                    break;
                case 11:
                    return addressOf(this->delaytilde_02_del_bufferobj);
                    break;
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 7;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 5) {
                    this->allpass_tilde_11_feedForward_buffer = new Float64Buffer(this->allpass_tilde_11_feedForward_bufferobj);
                }
            
                if (index == 6) {
                    this->allpass_tilde_11_feedBack_buffer = new Float64Buffer(this->allpass_tilde_11_feedBack_bufferobj);
                }
            
                if (index == 7) {
                    this->comb_tilde_09_feedForward_buffer = new Float64Buffer(this->comb_tilde_09_feedForward_bufferobj);
                }
            
                if (index == 8) {
                    this->comb_tilde_09_feedBack_buffer = new Float64Buffer(this->comb_tilde_09_feedBack_bufferobj);
                }
            
                if (index == 9) {
                    this->allpass_tilde_12_feedForward_buffer = new Float64Buffer(this->allpass_tilde_12_feedForward_bufferobj);
                }
            
                if (index == 10) {
                    this->allpass_tilde_12_feedBack_buffer = new Float64Buffer(this->allpass_tilde_12_feedBack_bufferobj);
                }
            
                if (index == 11) {
                    this->delaytilde_02_del_buffer = new Float64Buffer(this->delaytilde_02_del_bufferobj);
                }
            }
            
            void initialize() {
                this->allpass_tilde_11_feedForward_bufferobj = initDataRef("allpass_tilde_11_feedForward_bufferobj", true, nullptr);
                this->allpass_tilde_11_feedBack_bufferobj = initDataRef("allpass_tilde_11_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_09_feedForward_bufferobj = initDataRef("comb_tilde_09_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_09_feedBack_bufferobj = initDataRef("comb_tilde_09_feedBack_bufferobj", true, nullptr);
                this->allpass_tilde_12_feedForward_bufferobj = initDataRef("allpass_tilde_12_feedForward_bufferobj", true, nullptr);
                this->allpass_tilde_12_feedBack_bufferobj = initDataRef("allpass_tilde_12_feedBack_bufferobj", true, nullptr);
                this->delaytilde_02_del_bufferobj = initDataRef("delaytilde_02_del_bufferobj", true, nullptr);
                this->assign_defaults();
                this->setState();
                this->allpass_tilde_11_feedForward_bufferobj->setIndex(5);
                this->allpass_tilde_11_feedForward_buffer = new Float64Buffer(this->allpass_tilde_11_feedForward_bufferobj);
                this->allpass_tilde_11_feedBack_bufferobj->setIndex(6);
                this->allpass_tilde_11_feedBack_buffer = new Float64Buffer(this->allpass_tilde_11_feedBack_bufferobj);
                this->comb_tilde_09_feedForward_bufferobj->setIndex(7);
                this->comb_tilde_09_feedForward_buffer = new Float64Buffer(this->comb_tilde_09_feedForward_bufferobj);
                this->comb_tilde_09_feedBack_bufferobj->setIndex(8);
                this->comb_tilde_09_feedBack_buffer = new Float64Buffer(this->comb_tilde_09_feedBack_bufferobj);
                this->allpass_tilde_12_feedForward_bufferobj->setIndex(9);
                this->allpass_tilde_12_feedForward_buffer = new Float64Buffer(this->allpass_tilde_12_feedForward_bufferobj);
                this->allpass_tilde_12_feedBack_bufferobj->setIndex(10);
                this->allpass_tilde_12_feedBack_buffer = new Float64Buffer(this->allpass_tilde_12_feedBack_bufferobj);
                this->delaytilde_02_del_bufferobj->setIndex(11);
                this->delaytilde_02_del_buffer = new Float64Buffer(this->delaytilde_02_del_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 5;
            }
            
            Index getNumOutputChannels() const {
                return 4;
            }
            
            void initializeObjects() {
                this->allpass_tilde_11_feedForward_init();
                this->allpass_tilde_11_feedBack_init();
                this->allpass_tilde_11_init();
                this->comb_tilde_09_feedForward_init();
                this->comb_tilde_09_feedBack_init();
                this->comb_tilde_09_init();
                this->allpass_tilde_12_feedForward_init();
                this->allpass_tilde_12_feedBack_init();
                this->allpass_tilde_12_init();
                this->noise_tilde_02_init();
                this->delaytilde_02_del_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->allpass_tilde_11_feedForward_buffer = this->allpass_tilde_11_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_11_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_11_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_11_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->allpass_tilde_11_feedBack_buffer = this->allpass_tilde_11_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_11_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_11_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_11_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->comb_tilde_09_feedForward_buffer = this->comb_tilde_09_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_09_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_09_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_09_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->comb_tilde_09_feedBack_buffer = this->comb_tilde_09_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_09_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_09_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_09_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->allpass_tilde_12_feedForward_buffer = this->allpass_tilde_12_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_12_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_12_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_12_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->allpass_tilde_12_feedBack_buffer = this->allpass_tilde_12_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_12_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_12_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_12_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            
                this->delaytilde_02_del_buffer = this->delaytilde_02_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_02_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_02_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_02_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(11);
                }
            }
            
            void dspexpr_24_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 106.28;//#map:_###_obj_###_:1
                }
            }
            
            void mstosamps_tilde_02_perform(const Sample * ms, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = ms[(Index)i] * this->sr * 0.001;
                }
            }
            
            void dspexpr_23_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 89.24;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_20_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 141.7;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_18_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 30.51;//#map:_###_obj_###_:1
                }
            }
            
            void noise_tilde_02_perform(Sample * out1, Index n) {
                auto __noise_tilde_02_recip = this->noise_tilde_02_recip;
                auto __noise_tilde_02_last = this->noise_tilde_02_last;
                Index i;
            
                for (i = 0; i < n; i++) {
                    __noise_tilde_02_last = (Index)((BinOpInt)((UBinOpInt)(rnbo_imul(1664525, (int32_t)(__noise_tilde_02_last)) + 1013904223) | (UBinOpInt)0));
                    number itemp = (BinOpInt)((UBinOpInt)0x007fffff & __noise_tilde_02_last);
                    out1[(Index)i] = itemp * __noise_tilde_02_recip - 1.;
                }
            
                this->noise_tilde_02_last = __noise_tilde_02_last;
            }
            
            void lores_02_perform(
                number cutoff,
                number resonance,
                const Sample * input,
                Sample * out,
                Index n
            ) {
                RNBO_UNUSED(resonance);
                RNBO_UNUSED(cutoff);
                auto __lores_02_y_2 = this->lores_02_y_2;
                auto __lores_02_y_1 = this->lores_02_y_1;
                auto __lores_02_x_0 = this->lores_02_x_0;
                auto __lores_02_b_0 = this->lores_02_b_0;
                auto __lores_02_a_1 = this->lores_02_a_1;
                auto __lores_02_a_2 = this->lores_02_a_2;
                auto __lores_02_last_freq_calc = this->lores_02_last_freq_calc;
                auto __lores_02_last_res_calc = this->lores_02_last_res_calc;
                auto __lores_02_last_frequency = this->lores_02_last_frequency;
                auto __lores_02_last_resonance = this->lores_02_last_resonance;
            
                for (Index i = 0; i < n; i++) {
                    if (0.995 != __lores_02_last_resonance || 0 != __lores_02_last_frequency) {
                        __lores_02_last_res_calc = rnbo_exp(0.995 * 0.125) * 0.882497;
                        __lores_02_last_freq_calc = rnbo_cos(2.0 * pi01() / this->sr * 0);
                        __lores_02_last_resonance = 0.995;
                        __lores_02_last_frequency = 0;
                    }
            
                    number res_temp = __lores_02_last_res_calc;
                    number freq_temp = __lores_02_last_freq_calc;
                    __lores_02_a_2 = res_temp * res_temp;
                    __lores_02_a_1 = -2.0 * res_temp * freq_temp;
                    __lores_02_b_0 = 1.0 + __lores_02_a_1 + __lores_02_a_2;
                    __lores_02_x_0 = input[(Index)i];
                    number y_0 = __lores_02_x_0 * __lores_02_b_0 - __lores_02_y_1 * __lores_02_a_1 - __lores_02_y_2 * __lores_02_a_2;
                    __lores_02_y_2 = __lores_02_y_1;
                    __lores_02_y_1 = y_0;
                    out[(Index)i] = y_0;
                }
            
                this->lores_02_last_resonance = __lores_02_last_resonance;
                this->lores_02_last_frequency = __lores_02_last_frequency;
                this->lores_02_last_res_calc = __lores_02_last_res_calc;
                this->lores_02_last_freq_calc = __lores_02_last_freq_calc;
                this->lores_02_a_2 = __lores_02_a_2;
                this->lores_02_a_1 = __lores_02_a_1;
                this->lores_02_b_0 = __lores_02_b_0;
                this->lores_02_x_0 = __lores_02_x_0;
                this->lores_02_y_1 = __lores_02_y_1;
                this->lores_02_y_2 = __lores_02_y_2;
            }
            
            void dspexpr_22_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_19_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void feedbackreader_02_perform(Sample * output, Index n) {
                auto& buffer = this->feedbacktilde_02_feedbackbuffer;
            
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = buffer[(Index)i];
                }
            }
            
            void signaladder_08_perform(const Sample * in1, const Sample * in2, Sample * out, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i];
                }
            }
            
            void allpass_tilde_11_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = -0.7;
                    number delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_11_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_11_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_11_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_11_feedBack_write(ov);
                    this->allpass_tilde_11_feedForward_step();
                    this->allpass_tilde_11_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_09_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_09_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_09_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_09_feedForward_write(x[(Index)i]);
                    this->comb_tilde_09_feedBack_write(ov);
                    this->comb_tilde_09_feedForward_step();
                    this->comb_tilde_09_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void onepole_tilde_04_perform(const Sample * x, const Sample * freqInHz, Sample * out1, Index n) {
                auto __onepole_tilde_04_lastY = this->onepole_tilde_04_lastY;
                auto __onepole_tilde_04_b1 = this->onepole_tilde_04_b1;
                auto __onepole_tilde_04_a0 = this->onepole_tilde_04_a0;
                auto __onepole_tilde_04_needsUpdate = this->onepole_tilde_04_needsUpdate;
                auto __onepole_tilde_04_freq = this->onepole_tilde_04_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_04_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_04_needsUpdate)) {
                        __onepole_tilde_04_freq = freqInHz[(Index)i];
                        __onepole_tilde_04_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_04_a0 = (__onepole_tilde_04_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_04_a0 < 0.00001 ? 0.00001 : __onepole_tilde_04_a0));
                        __onepole_tilde_04_b1 = 1 - __onepole_tilde_04_a0;
                        __onepole_tilde_04_needsUpdate = false;
                    }
            
                    __onepole_tilde_04_lastY = __onepole_tilde_04_a0 * x[(Index)i] + __onepole_tilde_04_b1 * __onepole_tilde_04_lastY;
                    out1[(Index)i] = __onepole_tilde_04_lastY;
                }
            
                this->onepole_tilde_04_freq = __onepole_tilde_04_freq;
                this->onepole_tilde_04_needsUpdate = __onepole_tilde_04_needsUpdate;
                this->onepole_tilde_04_a0 = __onepole_tilde_04_a0;
                this->onepole_tilde_04_b1 = __onepole_tilde_04_b1;
                this->onepole_tilde_04_lastY = __onepole_tilde_04_lastY;
            }
            
            void dspexpr_21_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void allpass_tilde_12_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.5;
                    number delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_12_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_12_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_12_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_12_feedBack_write(ov);
                    this->allpass_tilde_12_feedForward_step();
                    this->allpass_tilde_12_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void delaytilde_02_perform(const Sample * delay, const Sample * input, Sample * output, Index n) {
                auto __delaytilde_02_crossfadeDelay = this->delaytilde_02_crossfadeDelay;
                auto __delaytilde_02_rampInSamples = this->delaytilde_02_rampInSamples;
                auto __delaytilde_02_ramp = this->delaytilde_02_ramp;
                auto __delaytilde_02_lastDelay = this->delaytilde_02_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_02_lastDelay == -1) {
                        __delaytilde_02_lastDelay = delay[(Index)i];
                    }
            
                    if (__delaytilde_02_ramp > 0) {
                        number factor = __delaytilde_02_ramp / __delaytilde_02_rampInSamples;
                        output[(Index)i] = this->delaytilde_02_del_read(__delaytilde_02_crossfadeDelay, 0) * factor + this->delaytilde_02_del_read(__delaytilde_02_lastDelay, 0) * (1. - factor);
                        __delaytilde_02_ramp--;
                    } else {
                        number effectiveDelay = delay[(Index)i];
            
                        if (effectiveDelay != __delaytilde_02_lastDelay) {
                            __delaytilde_02_ramp = __delaytilde_02_rampInSamples;
                            __delaytilde_02_crossfadeDelay = __delaytilde_02_lastDelay;
                            __delaytilde_02_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_02_del_read(__delaytilde_02_crossfadeDelay, 0);
                            __delaytilde_02_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_02_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_02_del_write(input[(Index)i]);
                    this->delaytilde_02_del_step();
                }
            
                this->delaytilde_02_lastDelay = __delaytilde_02_lastDelay;
                this->delaytilde_02_ramp = __delaytilde_02_ramp;
                this->delaytilde_02_crossfadeDelay = __delaytilde_02_crossfadeDelay;
            }
            
            void feedbackwriter_02_perform(const Sample * input, Index n) {
                auto& buffer = this->feedbacktilde_02_feedbackbuffer;
            
                for (Index i = 0; i < n; i++) {
                    buffer[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_23_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_22_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void lores_02_resonance_setter(number v) {
                if (v < 0.0) {
                    v = 0.0;
                } else if (v >= 1.0) {
                    v = 1.0 - 1E-20;
                }
            
                this->lores_02_resonance = v;
            }
            
            void allpass_tilde_11_feedForward_step() {
                this->allpass_tilde_11_feedForward_reader++;
            
                if (this->allpass_tilde_11_feedForward_reader >= (int)(this->allpass_tilde_11_feedForward_buffer->getSize()))
                    this->allpass_tilde_11_feedForward_reader = 0;
            }
            
            number allpass_tilde_11_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_11_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_11_feedForward_wrap))
                );
            }
            
            void allpass_tilde_11_feedForward_write(number v) {
                this->allpass_tilde_11_feedForward_writer = this->allpass_tilde_11_feedForward_reader;
                this->allpass_tilde_11_feedForward_buffer[(Index)this->allpass_tilde_11_feedForward_writer] = v;
            }
            
            number allpass_tilde_11_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_11_feedForward__maxdelay : size);
                number val = this->allpass_tilde_11_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_11_feedForward_write(v);
                this->allpass_tilde_11_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_11_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_11_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_11_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_11_feedForward_init() {
                auto result = this->allpass_tilde_11_feedForward_calcSizeInSamples();
                this->allpass_tilde_11_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_11_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_11_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_11_feedForward_clear() {
                this->allpass_tilde_11_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_11_feedForward_reset() {
                auto result = this->allpass_tilde_11_feedForward_calcSizeInSamples();
                this->allpass_tilde_11_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_11_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_11_feedForward_buffer);
                this->allpass_tilde_11_feedForward_wrap = this->allpass_tilde_11_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_11_feedForward_clear();
            
                if (this->allpass_tilde_11_feedForward_reader >= this->allpass_tilde_11_feedForward__maxdelay || this->allpass_tilde_11_feedForward_writer >= this->allpass_tilde_11_feedForward__maxdelay) {
                    this->allpass_tilde_11_feedForward_reader = 0;
                    this->allpass_tilde_11_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_11_feedForward_dspsetup() {
                this->allpass_tilde_11_feedForward_reset();
            }
            
            number allpass_tilde_11_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_11_feedForward_size() {
                return this->allpass_tilde_11_feedForward__maxdelay;
            }
            
            void allpass_tilde_11_feedBack_step() {
                this->allpass_tilde_11_feedBack_reader++;
            
                if (this->allpass_tilde_11_feedBack_reader >= (int)(this->allpass_tilde_11_feedBack_buffer->getSize()))
                    this->allpass_tilde_11_feedBack_reader = 0;
            }
            
            number allpass_tilde_11_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_11_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_11_feedBack_wrap))
                );
            }
            
            void allpass_tilde_11_feedBack_write(number v) {
                this->allpass_tilde_11_feedBack_writer = this->allpass_tilde_11_feedBack_reader;
                this->allpass_tilde_11_feedBack_buffer[(Index)this->allpass_tilde_11_feedBack_writer] = v;
            }
            
            number allpass_tilde_11_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_11_feedBack__maxdelay : size);
                number val = this->allpass_tilde_11_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_11_feedBack_write(v);
                this->allpass_tilde_11_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_11_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_11_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_11_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_11_feedBack_init() {
                auto result = this->allpass_tilde_11_feedBack_calcSizeInSamples();
                this->allpass_tilde_11_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_11_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_11_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_11_feedBack_clear() {
                this->allpass_tilde_11_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_11_feedBack_reset() {
                auto result = this->allpass_tilde_11_feedBack_calcSizeInSamples();
                this->allpass_tilde_11_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_11_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_11_feedBack_buffer);
                this->allpass_tilde_11_feedBack_wrap = this->allpass_tilde_11_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_11_feedBack_clear();
            
                if (this->allpass_tilde_11_feedBack_reader >= this->allpass_tilde_11_feedBack__maxdelay || this->allpass_tilde_11_feedBack_writer >= this->allpass_tilde_11_feedBack__maxdelay) {
                    this->allpass_tilde_11_feedBack_reader = 0;
                    this->allpass_tilde_11_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_11_feedBack_dspsetup() {
                this->allpass_tilde_11_feedBack_reset();
            }
            
            number allpass_tilde_11_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_11_feedBack_size() {
                return this->allpass_tilde_11_feedBack__maxdelay;
            }
            
            void allpass_tilde_11_init() {
                this->allpass_tilde_11_feedForward_init();
                this->allpass_tilde_11_feedBack_init();
            }
            
            void allpass_tilde_11_clear() {
                this->allpass_tilde_11_feedForward_clear();
                this->allpass_tilde_11_feedBack_clear();
            }
            
            void allpass_tilde_11_reset() {
                this->allpass_tilde_11_init();
                this->allpass_tilde_11_clear();
            }
            
            void allpass_tilde_11_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_11_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_11_reset();
                this->allpass_tilde_11_setupDone = true;
                this->allpass_tilde_11_feedForward_dspsetup();
                this->allpass_tilde_11_feedBack_dspsetup();
            }
            
            void comb_tilde_09_feedForward_step() {
                this->comb_tilde_09_feedForward_reader++;
            
                if (this->comb_tilde_09_feedForward_reader >= (int)(this->comb_tilde_09_feedForward_buffer->getSize()))
                    this->comb_tilde_09_feedForward_reader = 0;
            }
            
            number comb_tilde_09_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_09_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_09_feedForward_wrap))
                );
            }
            
            void comb_tilde_09_feedForward_write(number v) {
                this->comb_tilde_09_feedForward_writer = this->comb_tilde_09_feedForward_reader;
                this->comb_tilde_09_feedForward_buffer[(Index)this->comb_tilde_09_feedForward_writer] = v;
            }
            
            number comb_tilde_09_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_09_feedForward__maxdelay : size);
                number val = this->comb_tilde_09_feedForward_read(effectiveSize, 0);
                this->comb_tilde_09_feedForward_write(v);
                this->comb_tilde_09_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_09_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_09_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_09_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_09_feedForward_init() {
                auto result = this->comb_tilde_09_feedForward_calcSizeInSamples();
                this->comb_tilde_09_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_09_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_09_feedForward_clear() {
                this->comb_tilde_09_feedForward_buffer->setZero();
            }
            
            void comb_tilde_09_feedForward_reset() {
                auto result = this->comb_tilde_09_feedForward_calcSizeInSamples();
                this->comb_tilde_09_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_09_feedForward_buffer);
                this->comb_tilde_09_feedForward_wrap = this->comb_tilde_09_feedForward_buffer->getSize() - 1;
                this->comb_tilde_09_feedForward_clear();
            
                if (this->comb_tilde_09_feedForward_reader >= this->comb_tilde_09_feedForward__maxdelay || this->comb_tilde_09_feedForward_writer >= this->comb_tilde_09_feedForward__maxdelay) {
                    this->comb_tilde_09_feedForward_reader = 0;
                    this->comb_tilde_09_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_09_feedForward_dspsetup() {
                this->comb_tilde_09_feedForward_reset();
            }
            
            number comb_tilde_09_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_09_feedForward_size() {
                return this->comb_tilde_09_feedForward__maxdelay;
            }
            
            void comb_tilde_09_feedBack_step() {
                this->comb_tilde_09_feedBack_reader++;
            
                if (this->comb_tilde_09_feedBack_reader >= (int)(this->comb_tilde_09_feedBack_buffer->getSize()))
                    this->comb_tilde_09_feedBack_reader = 0;
            }
            
            number comb_tilde_09_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_09_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_09_feedBack_wrap))
                );
            }
            
            void comb_tilde_09_feedBack_write(number v) {
                this->comb_tilde_09_feedBack_writer = this->comb_tilde_09_feedBack_reader;
                this->comb_tilde_09_feedBack_buffer[(Index)this->comb_tilde_09_feedBack_writer] = v;
            }
            
            number comb_tilde_09_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_09_feedBack__maxdelay : size);
                number val = this->comb_tilde_09_feedBack_read(effectiveSize, 0);
                this->comb_tilde_09_feedBack_write(v);
                this->comb_tilde_09_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_09_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_09_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_09_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_09_feedBack_init() {
                auto result = this->comb_tilde_09_feedBack_calcSizeInSamples();
                this->comb_tilde_09_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_09_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_09_feedBack_clear() {
                this->comb_tilde_09_feedBack_buffer->setZero();
            }
            
            void comb_tilde_09_feedBack_reset() {
                auto result = this->comb_tilde_09_feedBack_calcSizeInSamples();
                this->comb_tilde_09_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_09_feedBack_buffer);
                this->comb_tilde_09_feedBack_wrap = this->comb_tilde_09_feedBack_buffer->getSize() - 1;
                this->comb_tilde_09_feedBack_clear();
            
                if (this->comb_tilde_09_feedBack_reader >= this->comb_tilde_09_feedBack__maxdelay || this->comb_tilde_09_feedBack_writer >= this->comb_tilde_09_feedBack__maxdelay) {
                    this->comb_tilde_09_feedBack_reader = 0;
                    this->comb_tilde_09_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_09_feedBack_dspsetup() {
                this->comb_tilde_09_feedBack_reset();
            }
            
            number comb_tilde_09_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_09_feedBack_size() {
                return this->comb_tilde_09_feedBack__maxdelay;
            }
            
            void comb_tilde_09_init() {
                this->comb_tilde_09_feedForward_init();
                this->comb_tilde_09_feedBack_init();
            }
            
            void comb_tilde_09_clear() {
                this->comb_tilde_09_feedForward_clear();
                this->comb_tilde_09_feedBack_clear();
            }
            
            void comb_tilde_09_reset() {
                this->comb_tilde_09_init();
                this->comb_tilde_09_clear();
            }
            
            void comb_tilde_09_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_09_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_09_reset();
                this->comb_tilde_09_setupDone = true;
                this->comb_tilde_09_feedForward_dspsetup();
                this->comb_tilde_09_feedBack_dspsetup();
            }
            
            void allpass_tilde_12_feedForward_step() {
                this->allpass_tilde_12_feedForward_reader++;
            
                if (this->allpass_tilde_12_feedForward_reader >= (int)(this->allpass_tilde_12_feedForward_buffer->getSize()))
                    this->allpass_tilde_12_feedForward_reader = 0;
            }
            
            number allpass_tilde_12_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_12_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_12_feedForward_wrap))
                );
            }
            
            void allpass_tilde_12_feedForward_write(number v) {
                this->allpass_tilde_12_feedForward_writer = this->allpass_tilde_12_feedForward_reader;
                this->allpass_tilde_12_feedForward_buffer[(Index)this->allpass_tilde_12_feedForward_writer] = v;
            }
            
            number allpass_tilde_12_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_12_feedForward__maxdelay : size);
                number val = this->allpass_tilde_12_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_12_feedForward_write(v);
                this->allpass_tilde_12_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_12_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_12_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_12_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_12_feedForward_init() {
                auto result = this->allpass_tilde_12_feedForward_calcSizeInSamples();
                this->allpass_tilde_12_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_12_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_12_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_12_feedForward_clear() {
                this->allpass_tilde_12_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_12_feedForward_reset() {
                auto result = this->allpass_tilde_12_feedForward_calcSizeInSamples();
                this->allpass_tilde_12_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_12_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_12_feedForward_buffer);
                this->allpass_tilde_12_feedForward_wrap = this->allpass_tilde_12_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_12_feedForward_clear();
            
                if (this->allpass_tilde_12_feedForward_reader >= this->allpass_tilde_12_feedForward__maxdelay || this->allpass_tilde_12_feedForward_writer >= this->allpass_tilde_12_feedForward__maxdelay) {
                    this->allpass_tilde_12_feedForward_reader = 0;
                    this->allpass_tilde_12_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_12_feedForward_dspsetup() {
                this->allpass_tilde_12_feedForward_reset();
            }
            
            number allpass_tilde_12_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_12_feedForward_size() {
                return this->allpass_tilde_12_feedForward__maxdelay;
            }
            
            void allpass_tilde_12_feedBack_step() {
                this->allpass_tilde_12_feedBack_reader++;
            
                if (this->allpass_tilde_12_feedBack_reader >= (int)(this->allpass_tilde_12_feedBack_buffer->getSize()))
                    this->allpass_tilde_12_feedBack_reader = 0;
            }
            
            number allpass_tilde_12_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_12_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->allpass_tilde_12_feedBack_wrap))
                );
            }
            
            void allpass_tilde_12_feedBack_write(number v) {
                this->allpass_tilde_12_feedBack_writer = this->allpass_tilde_12_feedBack_reader;
                this->allpass_tilde_12_feedBack_buffer[(Index)this->allpass_tilde_12_feedBack_writer] = v;
            }
            
            number allpass_tilde_12_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_12_feedBack__maxdelay : size);
                number val = this->allpass_tilde_12_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_12_feedBack_write(v);
                this->allpass_tilde_12_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_12_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_12_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_12_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_12_feedBack_init() {
                auto result = this->allpass_tilde_12_feedBack_calcSizeInSamples();
                this->allpass_tilde_12_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_12_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_12_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_12_feedBack_clear() {
                this->allpass_tilde_12_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_12_feedBack_reset() {
                auto result = this->allpass_tilde_12_feedBack_calcSizeInSamples();
                this->allpass_tilde_12_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_12_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_12_feedBack_buffer);
                this->allpass_tilde_12_feedBack_wrap = this->allpass_tilde_12_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_12_feedBack_clear();
            
                if (this->allpass_tilde_12_feedBack_reader >= this->allpass_tilde_12_feedBack__maxdelay || this->allpass_tilde_12_feedBack_writer >= this->allpass_tilde_12_feedBack__maxdelay) {
                    this->allpass_tilde_12_feedBack_reader = 0;
                    this->allpass_tilde_12_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_12_feedBack_dspsetup() {
                this->allpass_tilde_12_feedBack_reset();
            }
            
            number allpass_tilde_12_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_12_feedBack_size() {
                return this->allpass_tilde_12_feedBack__maxdelay;
            }
            
            void allpass_tilde_12_init() {
                this->allpass_tilde_12_feedForward_init();
                this->allpass_tilde_12_feedBack_init();
            }
            
            void allpass_tilde_12_clear() {
                this->allpass_tilde_12_feedForward_clear();
                this->allpass_tilde_12_feedBack_clear();
            }
            
            void allpass_tilde_12_reset() {
                this->allpass_tilde_12_init();
                this->allpass_tilde_12_clear();
            }
            
            void allpass_tilde_12_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_12_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_12_reset();
                this->allpass_tilde_12_setupDone = true;
                this->allpass_tilde_12_feedForward_dspsetup();
                this->allpass_tilde_12_feedBack_dspsetup();
            }
            
            void onepole_tilde_04_reset() {
                this->onepole_tilde_04_lastY = 0;
                this->onepole_tilde_04_a0 = 0;
                this->onepole_tilde_04_b1 = 0;
            }
            
            void onepole_tilde_04_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_04_needsUpdate = true;
                this->onepole_tilde_04_reset();
                this->onepole_tilde_04_setupDone = true;
            }
            
            void lores_02_reset() {
                this->lores_02_y_1 = 0;
                this->lores_02_y_2 = 0;
                this->lores_02_last_resonance = 0;
                this->lores_02_last_frequency = 0;
                this->lores_02_last_res_calc = 0;
                this->lores_02_last_freq_calc = 0;
            }
            
            void lores_02_dspsetup(bool force) {
                if ((bool)(this->lores_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->lores_02_reset();
                this->lores_02_setupDone = true;
            }
            
            void noise_tilde_02_init() {
                this->noise_tilde_02_last = (Index)(systemticks() + this->voice() + this->random(0, 10000));
                this->noise_tilde_02_recip = (number)2 / (number)8388607;
            }
            
            void delaytilde_02_del_step() {
                this->delaytilde_02_del_reader++;
            
                if (this->delaytilde_02_del_reader >= (int)(this->delaytilde_02_del_buffer->getSize()))
                    this->delaytilde_02_del_reader = 0;
            }
            
            number delaytilde_02_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->delaytilde_02_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_02_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->delaytilde_02_del_wrap))
                );
            }
            
            void delaytilde_02_del_write(number v) {
                this->delaytilde_02_del_writer = this->delaytilde_02_del_reader;
                this->delaytilde_02_del_buffer[(Index)this->delaytilde_02_del_writer] = v;
            }
            
            number delaytilde_02_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_02_del__maxdelay : size);
                number val = this->delaytilde_02_del_read(effectiveSize, 0);
                this->delaytilde_02_del_write(v);
                this->delaytilde_02_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_02_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_02_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_02_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_02_del_init() {
                auto result = this->delaytilde_02_del_calcSizeInSamples();
                this->delaytilde_02_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_02_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_02_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_02_del_clear() {
                this->delaytilde_02_del_buffer->setZero();
            }
            
            void delaytilde_02_del_reset() {
                auto result = this->delaytilde_02_del_calcSizeInSamples();
                this->delaytilde_02_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_02_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_02_del_buffer);
                this->delaytilde_02_del_wrap = this->delaytilde_02_del_buffer->getSize() - 1;
                this->delaytilde_02_del_clear();
            
                if (this->delaytilde_02_del_reader >= this->delaytilde_02_del__maxdelay || this->delaytilde_02_del_writer >= this->delaytilde_02_del__maxdelay) {
                    this->delaytilde_02_del_reader = 0;
                    this->delaytilde_02_del_writer = 0;
                }
            }
            
            void delaytilde_02_del_dspsetup() {
                this->delaytilde_02_del_reset();
            }
            
            number delaytilde_02_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 38400;
            }
            
            number delaytilde_02_del_size() {
                return this->delaytilde_02_del__maxdelay;
            }
            
            void delaytilde_02_dspsetup(bool force) {
                if ((bool)(this->delaytilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_02_rampInSamples = (long)(this->mstosamps(0));
                this->delaytilde_02_lastDelay = -1;
                this->delaytilde_02_setupDone = true;
                this->delaytilde_02_del_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                allpass_tilde_11_x = 0;
                allpass_tilde_11_delayTime = 30.51;
                allpass_tilde_11_gain = -0.7;
                dspexpr_18_in1 = 0;
                dspexpr_18_in2 = 30.51;
                comb_tilde_09_x = 0;
                comb_tilde_09_delayTime = 141.7;
                comb_tilde_09_gain = 0;
                comb_tilde_09_ffGain = 1;
                comb_tilde_09_fbGain = 0;
                dspexpr_19_in1 = 0;
                dspexpr_19_in2 = 0;
                dspexpr_20_in1 = 0;
                dspexpr_20_in2 = 141.7;
                dspexpr_21_in1 = 0;
                dspexpr_21_in2 = 0.5;
                allpass_tilde_12_x = 0;
                allpass_tilde_12_delayTime = 89.24;
                allpass_tilde_12_gain = 0.5;
                onepole_tilde_04_x = 0;
                onepole_tilde_04_freqInHz = 1800;
                dspexpr_22_in1 = 0;
                dspexpr_22_in2 = 20;
                lores_02_cutoff = 0;
                lores_02_resonance = 0.995;
                lores_02_resonance_setter(lores_02_resonance);
                dspexpr_23_in1 = 0;
                dspexpr_23_in2 = 89.24;
                delaytilde_02_delay = 0;
                mstosamps_tilde_02_ms = 0;
                dspexpr_24_in1 = 0;
                dspexpr_24_in2 = 106.28;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                allpass_tilde_11_feedForward__maxdelay = 0;
                allpass_tilde_11_feedForward_sizemode = 0;
                allpass_tilde_11_feedForward_wrap = 0;
                allpass_tilde_11_feedForward_reader = 0;
                allpass_tilde_11_feedForward_writer = 0;
                allpass_tilde_11_feedBack__maxdelay = 0;
                allpass_tilde_11_feedBack_sizemode = 0;
                allpass_tilde_11_feedBack_wrap = 0;
                allpass_tilde_11_feedBack_reader = 0;
                allpass_tilde_11_feedBack_writer = 0;
                allpass_tilde_11_setupDone = false;
                comb_tilde_09_feedForward__maxdelay = 0;
                comb_tilde_09_feedForward_sizemode = 0;
                comb_tilde_09_feedForward_wrap = 0;
                comb_tilde_09_feedForward_reader = 0;
                comb_tilde_09_feedForward_writer = 0;
                comb_tilde_09_feedBack__maxdelay = 0;
                comb_tilde_09_feedBack_sizemode = 0;
                comb_tilde_09_feedBack_wrap = 0;
                comb_tilde_09_feedBack_reader = 0;
                comb_tilde_09_feedBack_writer = 0;
                comb_tilde_09_setupDone = false;
                allpass_tilde_12_feedForward__maxdelay = 0;
                allpass_tilde_12_feedForward_sizemode = 0;
                allpass_tilde_12_feedForward_wrap = 0;
                allpass_tilde_12_feedForward_reader = 0;
                allpass_tilde_12_feedForward_writer = 0;
                allpass_tilde_12_feedBack__maxdelay = 0;
                allpass_tilde_12_feedBack_sizemode = 0;
                allpass_tilde_12_feedBack_wrap = 0;
                allpass_tilde_12_feedBack_reader = 0;
                allpass_tilde_12_feedBack_writer = 0;
                allpass_tilde_12_setupDone = false;
                onepole_tilde_04_freq = 0;
                onepole_tilde_04_needsUpdate = false;
                onepole_tilde_04_lastY = 0;
                onepole_tilde_04_a0 = 0;
                onepole_tilde_04_b1 = 0;
                onepole_tilde_04_setupDone = false;
                lores_02_setupDone = false;
                noise_tilde_02_last = 0;
                delaytilde_02_lastDelay = -1;
                delaytilde_02_crossfadeDelay = 0;
                delaytilde_02_ramp = 0;
                delaytilde_02_rampInSamples = 0;
                delaytilde_02_del__maxdelay = 0;
                delaytilde_02_del_sizemode = 0;
                delaytilde_02_del_wrap = 0;
                delaytilde_02_del_reader = 0;
                delaytilde_02_del_writer = 0;
                delaytilde_02_setupDone = false;
                feedbacktilde_02_feedbackbuffer = nullptr;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number allpass_tilde_11_x;
                number allpass_tilde_11_delayTime;
                number allpass_tilde_11_gain;
                number dspexpr_18_in1;
                number dspexpr_18_in2;
                number comb_tilde_09_x;
                number comb_tilde_09_delayTime;
                number comb_tilde_09_gain;
                number comb_tilde_09_ffGain;
                number comb_tilde_09_fbGain;
                number dspexpr_19_in1;
                number dspexpr_19_in2;
                number dspexpr_20_in1;
                number dspexpr_20_in2;
                number dspexpr_21_in1;
                number dspexpr_21_in2;
                number allpass_tilde_12_x;
                number allpass_tilde_12_delayTime;
                number allpass_tilde_12_gain;
                number onepole_tilde_04_x;
                number onepole_tilde_04_freqInHz;
                number dspexpr_22_in1;
                number dspexpr_22_in2;
                number lores_02_cutoff;
                number lores_02_resonance;
                number dspexpr_23_in1;
                number dspexpr_23_in2;
                number delaytilde_02_delay;
                number mstosamps_tilde_02_ms;
                number dspexpr_24_in1;
                number dspexpr_24_in2;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[6];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef allpass_tilde_11_feedForward_buffer;
                Index allpass_tilde_11_feedForward__maxdelay;
                Int allpass_tilde_11_feedForward_sizemode;
                Index allpass_tilde_11_feedForward_wrap;
                Int allpass_tilde_11_feedForward_reader;
                Int allpass_tilde_11_feedForward_writer;
                Float64BufferRef allpass_tilde_11_feedBack_buffer;
                Index allpass_tilde_11_feedBack__maxdelay;
                Int allpass_tilde_11_feedBack_sizemode;
                Index allpass_tilde_11_feedBack_wrap;
                Int allpass_tilde_11_feedBack_reader;
                Int allpass_tilde_11_feedBack_writer;
                bool allpass_tilde_11_setupDone;
                Float64BufferRef comb_tilde_09_feedForward_buffer;
                Index comb_tilde_09_feedForward__maxdelay;
                Int comb_tilde_09_feedForward_sizemode;
                Index comb_tilde_09_feedForward_wrap;
                Int comb_tilde_09_feedForward_reader;
                Int comb_tilde_09_feedForward_writer;
                Float64BufferRef comb_tilde_09_feedBack_buffer;
                Index comb_tilde_09_feedBack__maxdelay;
                Int comb_tilde_09_feedBack_sizemode;
                Index comb_tilde_09_feedBack_wrap;
                Int comb_tilde_09_feedBack_reader;
                Int comb_tilde_09_feedBack_writer;
                bool comb_tilde_09_setupDone;
                Float64BufferRef allpass_tilde_12_feedForward_buffer;
                Index allpass_tilde_12_feedForward__maxdelay;
                Int allpass_tilde_12_feedForward_sizemode;
                Index allpass_tilde_12_feedForward_wrap;
                Int allpass_tilde_12_feedForward_reader;
                Int allpass_tilde_12_feedForward_writer;
                Float64BufferRef allpass_tilde_12_feedBack_buffer;
                Index allpass_tilde_12_feedBack__maxdelay;
                Int allpass_tilde_12_feedBack_sizemode;
                Index allpass_tilde_12_feedBack_wrap;
                Int allpass_tilde_12_feedBack_reader;
                Int allpass_tilde_12_feedBack_writer;
                bool allpass_tilde_12_setupDone;
                number onepole_tilde_04_freq;
                bool onepole_tilde_04_needsUpdate;
                number onepole_tilde_04_lastY;
                number onepole_tilde_04_a0;
                number onepole_tilde_04_b1;
                bool onepole_tilde_04_setupDone;
                number lores_02_b_0;
                number lores_02_a_1;
                number lores_02_a_2;
                number lores_02_x_0;
                number lores_02_y_1;
                number lores_02_y_2;
                number lores_02_last_resonance;
                number lores_02_last_frequency;
                number lores_02_last_res_calc;
                number lores_02_last_freq_calc;
                bool lores_02_setupDone;
                Index noise_tilde_02_last;
                number noise_tilde_02_recip;
                number delaytilde_02_lastDelay;
                number delaytilde_02_crossfadeDelay;
                number delaytilde_02_ramp;
                long delaytilde_02_rampInSamples;
                Float64BufferRef delaytilde_02_del_buffer;
                Index delaytilde_02_del__maxdelay;
                Int delaytilde_02_del_sizemode;
                Index delaytilde_02_del_wrap;
                Int delaytilde_02_del_reader;
                Int delaytilde_02_del_writer;
                bool delaytilde_02_setupDone;
                signal feedbacktilde_02_feedbackbuffer;
                number stackprotect_count;
                DataRef allpass_tilde_11_feedForward_bufferobj;
                DataRef allpass_tilde_11_feedBack_bufferobj;
                DataRef comb_tilde_09_feedForward_bufferobj;
                DataRef comb_tilde_09_feedBack_bufferobj;
                DataRef allpass_tilde_12_feedForward_bufferobj;
                DataRef allpass_tilde_12_feedBack_bufferobj;
                DataRef delaytilde_02_del_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1032 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1051;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1032()
            {
            }
            
            ~RNBOSubpatcher_1032()
            {
            }
            
            virtual RNBOSubpatcher_1051* getPatcher() const {
                return static_cast<RNBOSubpatcher_1051 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() {
                return this->sr;
            }
            
            Index vectorsize() {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
                SampleValue * in8 = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
                SampleValue * in9 = (numInputs >= 9 && inputs[8] ? inputs[8] : this->zeroBuffer);
                this->dspexpr_29_perform(in8, in9, this->signals[0], n);
                this->dspexpr_33_perform(this->signals[0], this->dspexpr_33_in2, this->signals[1], n);
                this->dspexpr_32_perform(this->signals[0], this->dspexpr_32_in2, this->signals[2], n);
                this->dspexpr_30_perform(this->signals[0], this->dspexpr_30_in2, this->signals[3], n);
            
                this->comb_tilde_13_perform(
                    in4,
                    this->signals[3],
                    this->comb_tilde_13_gain,
                    this->comb_tilde_13_ffGain,
                    this->comb_tilde_13_fbGain,
                    this->signals[4],
                    n
                );
            
                this->dspexpr_27_perform(this->signals[0], this->dspexpr_27_in2, this->signals[3], n);
            
                this->comb_tilde_12_perform(
                    in3,
                    this->signals[3],
                    this->comb_tilde_12_gain,
                    this->comb_tilde_12_ffGain,
                    this->comb_tilde_12_fbGain,
                    this->signals[5],
                    n
                );
            
                this->dspexpr_26_perform(this->signals[0], this->dspexpr_26_in2, this->signals[3], n);
            
                this->comb_tilde_11_perform(
                    in2,
                    this->signals[3],
                    this->comb_tilde_11_gain,
                    this->comb_tilde_11_ffGain,
                    this->comb_tilde_11_fbGain,
                    this->signals[6],
                    n
                );
            
                this->dspexpr_25_perform(this->signals[0], this->dspexpr_25_in2, this->signals[3], n);
            
                this->comb_tilde_10_perform(
                    in1,
                    this->signals[3],
                    this->comb_tilde_10_gain,
                    this->comb_tilde_10_ffGain,
                    this->comb_tilde_10_fbGain,
                    this->signals[7],
                    n
                );
            
                this->dspexpr_34_perform(this->signals[0], this->dspexpr_34_in2, this->signals[3], n);
            
                this->comb_tilde_14_perform(
                    in5,
                    this->signals[2],
                    this->comb_tilde_14_gain,
                    this->comb_tilde_14_ffGain,
                    this->comb_tilde_14_fbGain,
                    this->signals[0],
                    n
                );
            
                this->comb_tilde_15_perform(
                    in6,
                    this->signals[1],
                    this->comb_tilde_15_gain,
                    this->comb_tilde_15_ffGain,
                    this->comb_tilde_15_fbGain,
                    this->signals[2],
                    n
                );
            
                this->comb_tilde_16_perform(
                    in7,
                    this->signals[3],
                    this->comb_tilde_16_gain,
                    this->comb_tilde_16_ffGain,
                    this->comb_tilde_16_fbGain,
                    this->signals[1],
                    n
                );
            
                this->signaladder_09_perform(
                    this->signals[5],
                    this->signals[0],
                    this->signals[2],
                    this->signals[1],
                    this->signals[1],
                    n
                );
            
                this->dspexpr_31_perform(this->signals[1], this->dspexpr_31_in2, this->signals[3], n);
            
                this->signaladder_10_perform(
                    this->signals[7],
                    this->signals[6],
                    this->signals[4],
                    this->signals[3],
                    this->signals[3],
                    n
                );
            
                this->dspexpr_28_perform(this->signals[3], this->dspexpr_28_in2, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->comb_tilde_13_dspsetup(forceDSPSetup);
                this->comb_tilde_12_dspsetup(forceDSPSetup);
                this->comb_tilde_11_dspsetup(forceDSPSetup);
                this->comb_tilde_10_dspsetup(forceDSPSetup);
                this->comb_tilde_14_dspsetup(forceDSPSetup);
                this->comb_tilde_15_dspsetup(forceDSPSetup);
                this->comb_tilde_16_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 5:
                    return addressOf(this->comb_tilde_10_feedForward_bufferobj);
                    break;
                case 6:
                    return addressOf(this->comb_tilde_10_feedBack_bufferobj);
                    break;
                case 7:
                    return addressOf(this->comb_tilde_11_feedForward_bufferobj);
                    break;
                case 8:
                    return addressOf(this->comb_tilde_11_feedBack_bufferobj);
                    break;
                case 9:
                    return addressOf(this->comb_tilde_12_feedForward_bufferobj);
                    break;
                case 10:
                    return addressOf(this->comb_tilde_12_feedBack_bufferobj);
                    break;
                case 11:
                    return addressOf(this->comb_tilde_13_feedForward_bufferobj);
                    break;
                case 12:
                    return addressOf(this->comb_tilde_13_feedBack_bufferobj);
                    break;
                case 13:
                    return addressOf(this->comb_tilde_14_feedForward_bufferobj);
                    break;
                case 14:
                    return addressOf(this->comb_tilde_14_feedBack_bufferobj);
                    break;
                case 15:
                    return addressOf(this->comb_tilde_15_feedForward_bufferobj);
                    break;
                case 16:
                    return addressOf(this->comb_tilde_15_feedBack_bufferobj);
                    break;
                case 17:
                    return addressOf(this->comb_tilde_16_feedForward_bufferobj);
                    break;
                case 18:
                    return addressOf(this->comb_tilde_16_feedBack_bufferobj);
                    break;
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 14;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 5) {
                    this->comb_tilde_10_feedForward_buffer = new Float64Buffer(this->comb_tilde_10_feedForward_bufferobj);
                }
            
                if (index == 6) {
                    this->comb_tilde_10_feedBack_buffer = new Float64Buffer(this->comb_tilde_10_feedBack_bufferobj);
                }
            
                if (index == 7) {
                    this->comb_tilde_11_feedForward_buffer = new Float64Buffer(this->comb_tilde_11_feedForward_bufferobj);
                }
            
                if (index == 8) {
                    this->comb_tilde_11_feedBack_buffer = new Float64Buffer(this->comb_tilde_11_feedBack_bufferobj);
                }
            
                if (index == 9) {
                    this->comb_tilde_12_feedForward_buffer = new Float64Buffer(this->comb_tilde_12_feedForward_bufferobj);
                }
            
                if (index == 10) {
                    this->comb_tilde_12_feedBack_buffer = new Float64Buffer(this->comb_tilde_12_feedBack_bufferobj);
                }
            
                if (index == 11) {
                    this->comb_tilde_13_feedForward_buffer = new Float64Buffer(this->comb_tilde_13_feedForward_bufferobj);
                }
            
                if (index == 12) {
                    this->comb_tilde_13_feedBack_buffer = new Float64Buffer(this->comb_tilde_13_feedBack_bufferobj);
                }
            
                if (index == 13) {
                    this->comb_tilde_14_feedForward_buffer = new Float64Buffer(this->comb_tilde_14_feedForward_bufferobj);
                }
            
                if (index == 14) {
                    this->comb_tilde_14_feedBack_buffer = new Float64Buffer(this->comb_tilde_14_feedBack_bufferobj);
                }
            
                if (index == 15) {
                    this->comb_tilde_15_feedForward_buffer = new Float64Buffer(this->comb_tilde_15_feedForward_bufferobj);
                }
            
                if (index == 16) {
                    this->comb_tilde_15_feedBack_buffer = new Float64Buffer(this->comb_tilde_15_feedBack_bufferobj);
                }
            
                if (index == 17) {
                    this->comb_tilde_16_feedForward_buffer = new Float64Buffer(this->comb_tilde_16_feedForward_bufferobj);
                }
            
                if (index == 18) {
                    this->comb_tilde_16_feedBack_buffer = new Float64Buffer(this->comb_tilde_16_feedBack_bufferobj);
                }
            }
            
            void initialize() {
                this->comb_tilde_10_feedForward_bufferobj = initDataRef("comb_tilde_10_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_10_feedBack_bufferobj = initDataRef("comb_tilde_10_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_11_feedForward_bufferobj = initDataRef("comb_tilde_11_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_11_feedBack_bufferobj = initDataRef("comb_tilde_11_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_12_feedForward_bufferobj = initDataRef("comb_tilde_12_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_12_feedBack_bufferobj = initDataRef("comb_tilde_12_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_13_feedForward_bufferobj = initDataRef("comb_tilde_13_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_13_feedBack_bufferobj = initDataRef("comb_tilde_13_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_14_feedForward_bufferobj = initDataRef("comb_tilde_14_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_14_feedBack_bufferobj = initDataRef("comb_tilde_14_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_15_feedForward_bufferobj = initDataRef("comb_tilde_15_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_15_feedBack_bufferobj = initDataRef("comb_tilde_15_feedBack_bufferobj", true, nullptr);
                this->comb_tilde_16_feedForward_bufferobj = initDataRef("comb_tilde_16_feedForward_bufferobj", true, nullptr);
                this->comb_tilde_16_feedBack_bufferobj = initDataRef("comb_tilde_16_feedBack_bufferobj", true, nullptr);
                this->assign_defaults();
                this->setState();
                this->comb_tilde_10_feedForward_bufferobj->setIndex(5);
                this->comb_tilde_10_feedForward_buffer = new Float64Buffer(this->comb_tilde_10_feedForward_bufferobj);
                this->comb_tilde_10_feedBack_bufferobj->setIndex(6);
                this->comb_tilde_10_feedBack_buffer = new Float64Buffer(this->comb_tilde_10_feedBack_bufferobj);
                this->comb_tilde_11_feedForward_bufferobj->setIndex(7);
                this->comb_tilde_11_feedForward_buffer = new Float64Buffer(this->comb_tilde_11_feedForward_bufferobj);
                this->comb_tilde_11_feedBack_bufferobj->setIndex(8);
                this->comb_tilde_11_feedBack_buffer = new Float64Buffer(this->comb_tilde_11_feedBack_bufferobj);
                this->comb_tilde_12_feedForward_bufferobj->setIndex(9);
                this->comb_tilde_12_feedForward_buffer = new Float64Buffer(this->comb_tilde_12_feedForward_bufferobj);
                this->comb_tilde_12_feedBack_bufferobj->setIndex(10);
                this->comb_tilde_12_feedBack_buffer = new Float64Buffer(this->comb_tilde_12_feedBack_bufferobj);
                this->comb_tilde_13_feedForward_bufferobj->setIndex(11);
                this->comb_tilde_13_feedForward_buffer = new Float64Buffer(this->comb_tilde_13_feedForward_bufferobj);
                this->comb_tilde_13_feedBack_bufferobj->setIndex(12);
                this->comb_tilde_13_feedBack_buffer = new Float64Buffer(this->comb_tilde_13_feedBack_bufferobj);
                this->comb_tilde_14_feedForward_bufferobj->setIndex(13);
                this->comb_tilde_14_feedForward_buffer = new Float64Buffer(this->comb_tilde_14_feedForward_bufferobj);
                this->comb_tilde_14_feedBack_bufferobj->setIndex(14);
                this->comb_tilde_14_feedBack_buffer = new Float64Buffer(this->comb_tilde_14_feedBack_bufferobj);
                this->comb_tilde_15_feedForward_bufferobj->setIndex(15);
                this->comb_tilde_15_feedForward_buffer = new Float64Buffer(this->comb_tilde_15_feedForward_bufferobj);
                this->comb_tilde_15_feedBack_bufferobj->setIndex(16);
                this->comb_tilde_15_feedBack_buffer = new Float64Buffer(this->comb_tilde_15_feedBack_bufferobj);
                this->comb_tilde_16_feedForward_bufferobj->setIndex(17);
                this->comb_tilde_16_feedForward_buffer = new Float64Buffer(this->comb_tilde_16_feedForward_bufferobj);
                this->comb_tilde_16_feedBack_bufferobj->setIndex(18);
                this->comb_tilde_16_feedBack_buffer = new Float64Buffer(this->comb_tilde_16_feedBack_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 9;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->comb_tilde_10_feedForward_init();
                this->comb_tilde_10_feedBack_init();
                this->comb_tilde_10_init();
                this->comb_tilde_11_feedForward_init();
                this->comb_tilde_11_feedBack_init();
                this->comb_tilde_11_init();
                this->comb_tilde_12_feedForward_init();
                this->comb_tilde_12_feedBack_init();
                this->comb_tilde_12_init();
                this->comb_tilde_13_feedForward_init();
                this->comb_tilde_13_feedBack_init();
                this->comb_tilde_13_init();
                this->comb_tilde_14_feedForward_init();
                this->comb_tilde_14_feedBack_init();
                this->comb_tilde_14_init();
                this->comb_tilde_15_feedForward_init();
                this->comb_tilde_15_feedBack_init();
                this->comb_tilde_15_init();
                this->comb_tilde_16_feedForward_init();
                this->comb_tilde_16_feedBack_init();
                this->comb_tilde_16_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->comb_tilde_10_feedForward_buffer = this->comb_tilde_10_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_10_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_10_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_10_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->comb_tilde_10_feedBack_buffer = this->comb_tilde_10_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_10_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_10_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_10_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->comb_tilde_11_feedForward_buffer = this->comb_tilde_11_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_11_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_11_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_11_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->comb_tilde_11_feedBack_buffer = this->comb_tilde_11_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_11_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_11_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_11_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->comb_tilde_12_feedForward_buffer = this->comb_tilde_12_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_12_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_12_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_12_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->comb_tilde_12_feedBack_buffer = this->comb_tilde_12_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_12_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_12_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_12_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            
                this->comb_tilde_13_feedForward_buffer = this->comb_tilde_13_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_13_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_13_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_13_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(11);
                }
            
                this->comb_tilde_13_feedBack_buffer = this->comb_tilde_13_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_13_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_13_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_13_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(12);
                }
            
                this->comb_tilde_14_feedForward_buffer = this->comb_tilde_14_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_14_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_14_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_14_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(13);
                }
            
                this->comb_tilde_14_feedBack_buffer = this->comb_tilde_14_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_14_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_14_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_14_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(14);
                }
            
                this->comb_tilde_15_feedForward_buffer = this->comb_tilde_15_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_15_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_15_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_15_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(15);
                }
            
                this->comb_tilde_15_feedBack_buffer = this->comb_tilde_15_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_15_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_15_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_15_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(16);
                }
            
                this->comb_tilde_16_feedForward_buffer = this->comb_tilde_16_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_16_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_16_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_16_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(17);
                }
            
                this->comb_tilde_16_feedBack_buffer = this->comb_tilde_16_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_16_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_16_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_16_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(18);
                }
            }
            
            void dspexpr_29_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_33_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 27;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_32_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 35;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_30_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 3;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_13_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_13_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_13_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_13_feedForward_write(x[(Index)i]);
                    this->comb_tilde_13_feedBack_write(ov);
                    this->comb_tilde_13_feedForward_step();
                    this->comb_tilde_13_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_27_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 55;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_12_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_12_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_12_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_12_feedForward_write(x[(Index)i]);
                    this->comb_tilde_12_feedBack_write(ov);
                    this->comb_tilde_12_feedForward_step();
                    this->comb_tilde_12_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_26_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 135;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_11_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_11_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_11_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_11_feedForward_write(x[(Index)i]);
                    this->comb_tilde_11_feedBack_write(ov);
                    this->comb_tilde_11_feedForward_step();
                    this->comb_tilde_11_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_25_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 110;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_10_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_10_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_10_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_10_feedForward_write(x[(Index)i]);
                    this->comb_tilde_10_feedBack_write(ov);
                    this->comb_tilde_10_feedForward_step();
                    this->comb_tilde_10_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_34_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 52;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_14_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_14_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_14_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_14_feedForward_write(x[(Index)i]);
                    this->comb_tilde_14_feedBack_write(ov);
                    this->comb_tilde_14_feedForward_step();
                    this->comb_tilde_14_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_15_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_15_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_15_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_15_feedForward_write(x[(Index)i]);
                    this->comb_tilde_15_feedBack_write(ov);
                    this->comb_tilde_15_feedForward_step();
                    this->comb_tilde_15_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void comb_tilde_16_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                Sample * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_16_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_16_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_16_feedForward_write(x[(Index)i]);
                    this->comb_tilde_16_feedBack_write(ov);
                    this->comb_tilde_16_feedForward_step();
                    this->comb_tilde_16_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signaladder_09_perform(
                const Sample * in1,
                const Sample * in2,
                const Sample * in3,
                const Sample * in4,
                Sample * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_31_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_10_perform(
                const Sample * in1,
                const Sample * in2,
                const Sample * in3,
                const Sample * in4,
                Sample * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_28_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 0.355;//#map:_###_obj_###_:1
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void comb_tilde_10_feedForward_step() {
                this->comb_tilde_10_feedForward_reader++;
            
                if (this->comb_tilde_10_feedForward_reader >= (int)(this->comb_tilde_10_feedForward_buffer->getSize()))
                    this->comb_tilde_10_feedForward_reader = 0;
            }
            
            number comb_tilde_10_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_10_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_10_feedForward_wrap))
                );
            }
            
            void comb_tilde_10_feedForward_write(number v) {
                this->comb_tilde_10_feedForward_writer = this->comb_tilde_10_feedForward_reader;
                this->comb_tilde_10_feedForward_buffer[(Index)this->comb_tilde_10_feedForward_writer] = v;
            }
            
            number comb_tilde_10_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_10_feedForward__maxdelay : size);
                number val = this->comb_tilde_10_feedForward_read(effectiveSize, 0);
                this->comb_tilde_10_feedForward_write(v);
                this->comb_tilde_10_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_10_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_10_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_10_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_10_feedForward_init() {
                auto result = this->comb_tilde_10_feedForward_calcSizeInSamples();
                this->comb_tilde_10_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_10_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_10_feedForward_clear() {
                this->comb_tilde_10_feedForward_buffer->setZero();
            }
            
            void comb_tilde_10_feedForward_reset() {
                auto result = this->comb_tilde_10_feedForward_calcSizeInSamples();
                this->comb_tilde_10_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_10_feedForward_buffer);
                this->comb_tilde_10_feedForward_wrap = this->comb_tilde_10_feedForward_buffer->getSize() - 1;
                this->comb_tilde_10_feedForward_clear();
            
                if (this->comb_tilde_10_feedForward_reader >= this->comb_tilde_10_feedForward__maxdelay || this->comb_tilde_10_feedForward_writer >= this->comb_tilde_10_feedForward__maxdelay) {
                    this->comb_tilde_10_feedForward_reader = 0;
                    this->comb_tilde_10_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_10_feedForward_dspsetup() {
                this->comb_tilde_10_feedForward_reset();
            }
            
            number comb_tilde_10_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_10_feedForward_size() {
                return this->comb_tilde_10_feedForward__maxdelay;
            }
            
            void comb_tilde_10_feedBack_step() {
                this->comb_tilde_10_feedBack_reader++;
            
                if (this->comb_tilde_10_feedBack_reader >= (int)(this->comb_tilde_10_feedBack_buffer->getSize()))
                    this->comb_tilde_10_feedBack_reader = 0;
            }
            
            number comb_tilde_10_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_10_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_10_feedBack_wrap))
                );
            }
            
            void comb_tilde_10_feedBack_write(number v) {
                this->comb_tilde_10_feedBack_writer = this->comb_tilde_10_feedBack_reader;
                this->comb_tilde_10_feedBack_buffer[(Index)this->comb_tilde_10_feedBack_writer] = v;
            }
            
            number comb_tilde_10_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_10_feedBack__maxdelay : size);
                number val = this->comb_tilde_10_feedBack_read(effectiveSize, 0);
                this->comb_tilde_10_feedBack_write(v);
                this->comb_tilde_10_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_10_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_10_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_10_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_10_feedBack_init() {
                auto result = this->comb_tilde_10_feedBack_calcSizeInSamples();
                this->comb_tilde_10_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_10_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_10_feedBack_clear() {
                this->comb_tilde_10_feedBack_buffer->setZero();
            }
            
            void comb_tilde_10_feedBack_reset() {
                auto result = this->comb_tilde_10_feedBack_calcSizeInSamples();
                this->comb_tilde_10_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_10_feedBack_buffer);
                this->comb_tilde_10_feedBack_wrap = this->comb_tilde_10_feedBack_buffer->getSize() - 1;
                this->comb_tilde_10_feedBack_clear();
            
                if (this->comb_tilde_10_feedBack_reader >= this->comb_tilde_10_feedBack__maxdelay || this->comb_tilde_10_feedBack_writer >= this->comb_tilde_10_feedBack__maxdelay) {
                    this->comb_tilde_10_feedBack_reader = 0;
                    this->comb_tilde_10_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_10_feedBack_dspsetup() {
                this->comb_tilde_10_feedBack_reset();
            }
            
            number comb_tilde_10_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_10_feedBack_size() {
                return this->comb_tilde_10_feedBack__maxdelay;
            }
            
            void comb_tilde_10_init() {
                this->comb_tilde_10_feedForward_init();
                this->comb_tilde_10_feedBack_init();
            }
            
            void comb_tilde_10_clear() {
                this->comb_tilde_10_feedForward_clear();
                this->comb_tilde_10_feedBack_clear();
            }
            
            void comb_tilde_10_reset() {
                this->comb_tilde_10_init();
                this->comb_tilde_10_clear();
            }
            
            void comb_tilde_10_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_10_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_10_reset();
                this->comb_tilde_10_setupDone = true;
                this->comb_tilde_10_feedForward_dspsetup();
                this->comb_tilde_10_feedBack_dspsetup();
            }
            
            void comb_tilde_11_feedForward_step() {
                this->comb_tilde_11_feedForward_reader++;
            
                if (this->comb_tilde_11_feedForward_reader >= (int)(this->comb_tilde_11_feedForward_buffer->getSize()))
                    this->comb_tilde_11_feedForward_reader = 0;
            }
            
            number comb_tilde_11_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_11_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_11_feedForward_wrap))
                );
            }
            
            void comb_tilde_11_feedForward_write(number v) {
                this->comb_tilde_11_feedForward_writer = this->comb_tilde_11_feedForward_reader;
                this->comb_tilde_11_feedForward_buffer[(Index)this->comb_tilde_11_feedForward_writer] = v;
            }
            
            number comb_tilde_11_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_11_feedForward__maxdelay : size);
                number val = this->comb_tilde_11_feedForward_read(effectiveSize, 0);
                this->comb_tilde_11_feedForward_write(v);
                this->comb_tilde_11_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_11_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_11_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_11_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_11_feedForward_init() {
                auto result = this->comb_tilde_11_feedForward_calcSizeInSamples();
                this->comb_tilde_11_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_11_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_11_feedForward_clear() {
                this->comb_tilde_11_feedForward_buffer->setZero();
            }
            
            void comb_tilde_11_feedForward_reset() {
                auto result = this->comb_tilde_11_feedForward_calcSizeInSamples();
                this->comb_tilde_11_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_11_feedForward_buffer);
                this->comb_tilde_11_feedForward_wrap = this->comb_tilde_11_feedForward_buffer->getSize() - 1;
                this->comb_tilde_11_feedForward_clear();
            
                if (this->comb_tilde_11_feedForward_reader >= this->comb_tilde_11_feedForward__maxdelay || this->comb_tilde_11_feedForward_writer >= this->comb_tilde_11_feedForward__maxdelay) {
                    this->comb_tilde_11_feedForward_reader = 0;
                    this->comb_tilde_11_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_11_feedForward_dspsetup() {
                this->comb_tilde_11_feedForward_reset();
            }
            
            number comb_tilde_11_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_11_feedForward_size() {
                return this->comb_tilde_11_feedForward__maxdelay;
            }
            
            void comb_tilde_11_feedBack_step() {
                this->comb_tilde_11_feedBack_reader++;
            
                if (this->comb_tilde_11_feedBack_reader >= (int)(this->comb_tilde_11_feedBack_buffer->getSize()))
                    this->comb_tilde_11_feedBack_reader = 0;
            }
            
            number comb_tilde_11_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_11_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_11_feedBack_wrap))
                );
            }
            
            void comb_tilde_11_feedBack_write(number v) {
                this->comb_tilde_11_feedBack_writer = this->comb_tilde_11_feedBack_reader;
                this->comb_tilde_11_feedBack_buffer[(Index)this->comb_tilde_11_feedBack_writer] = v;
            }
            
            number comb_tilde_11_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_11_feedBack__maxdelay : size);
                number val = this->comb_tilde_11_feedBack_read(effectiveSize, 0);
                this->comb_tilde_11_feedBack_write(v);
                this->comb_tilde_11_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_11_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_11_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_11_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_11_feedBack_init() {
                auto result = this->comb_tilde_11_feedBack_calcSizeInSamples();
                this->comb_tilde_11_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_11_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_11_feedBack_clear() {
                this->comb_tilde_11_feedBack_buffer->setZero();
            }
            
            void comb_tilde_11_feedBack_reset() {
                auto result = this->comb_tilde_11_feedBack_calcSizeInSamples();
                this->comb_tilde_11_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_11_feedBack_buffer);
                this->comb_tilde_11_feedBack_wrap = this->comb_tilde_11_feedBack_buffer->getSize() - 1;
                this->comb_tilde_11_feedBack_clear();
            
                if (this->comb_tilde_11_feedBack_reader >= this->comb_tilde_11_feedBack__maxdelay || this->comb_tilde_11_feedBack_writer >= this->comb_tilde_11_feedBack__maxdelay) {
                    this->comb_tilde_11_feedBack_reader = 0;
                    this->comb_tilde_11_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_11_feedBack_dspsetup() {
                this->comb_tilde_11_feedBack_reset();
            }
            
            number comb_tilde_11_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_11_feedBack_size() {
                return this->comb_tilde_11_feedBack__maxdelay;
            }
            
            void comb_tilde_11_init() {
                this->comb_tilde_11_feedForward_init();
                this->comb_tilde_11_feedBack_init();
            }
            
            void comb_tilde_11_clear() {
                this->comb_tilde_11_feedForward_clear();
                this->comb_tilde_11_feedBack_clear();
            }
            
            void comb_tilde_11_reset() {
                this->comb_tilde_11_init();
                this->comb_tilde_11_clear();
            }
            
            void comb_tilde_11_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_11_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_11_reset();
                this->comb_tilde_11_setupDone = true;
                this->comb_tilde_11_feedForward_dspsetup();
                this->comb_tilde_11_feedBack_dspsetup();
            }
            
            void comb_tilde_12_feedForward_step() {
                this->comb_tilde_12_feedForward_reader++;
            
                if (this->comb_tilde_12_feedForward_reader >= (int)(this->comb_tilde_12_feedForward_buffer->getSize()))
                    this->comb_tilde_12_feedForward_reader = 0;
            }
            
            number comb_tilde_12_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_12_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_12_feedForward_wrap))
                );
            }
            
            void comb_tilde_12_feedForward_write(number v) {
                this->comb_tilde_12_feedForward_writer = this->comb_tilde_12_feedForward_reader;
                this->comb_tilde_12_feedForward_buffer[(Index)this->comb_tilde_12_feedForward_writer] = v;
            }
            
            number comb_tilde_12_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_12_feedForward__maxdelay : size);
                number val = this->comb_tilde_12_feedForward_read(effectiveSize, 0);
                this->comb_tilde_12_feedForward_write(v);
                this->comb_tilde_12_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_12_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_12_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_12_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_12_feedForward_init() {
                auto result = this->comb_tilde_12_feedForward_calcSizeInSamples();
                this->comb_tilde_12_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_12_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_12_feedForward_clear() {
                this->comb_tilde_12_feedForward_buffer->setZero();
            }
            
            void comb_tilde_12_feedForward_reset() {
                auto result = this->comb_tilde_12_feedForward_calcSizeInSamples();
                this->comb_tilde_12_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_12_feedForward_buffer);
                this->comb_tilde_12_feedForward_wrap = this->comb_tilde_12_feedForward_buffer->getSize() - 1;
                this->comb_tilde_12_feedForward_clear();
            
                if (this->comb_tilde_12_feedForward_reader >= this->comb_tilde_12_feedForward__maxdelay || this->comb_tilde_12_feedForward_writer >= this->comb_tilde_12_feedForward__maxdelay) {
                    this->comb_tilde_12_feedForward_reader = 0;
                    this->comb_tilde_12_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_12_feedForward_dspsetup() {
                this->comb_tilde_12_feedForward_reset();
            }
            
            number comb_tilde_12_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_12_feedForward_size() {
                return this->comb_tilde_12_feedForward__maxdelay;
            }
            
            void comb_tilde_12_feedBack_step() {
                this->comb_tilde_12_feedBack_reader++;
            
                if (this->comb_tilde_12_feedBack_reader >= (int)(this->comb_tilde_12_feedBack_buffer->getSize()))
                    this->comb_tilde_12_feedBack_reader = 0;
            }
            
            number comb_tilde_12_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_12_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_12_feedBack_wrap))
                );
            }
            
            void comb_tilde_12_feedBack_write(number v) {
                this->comb_tilde_12_feedBack_writer = this->comb_tilde_12_feedBack_reader;
                this->comb_tilde_12_feedBack_buffer[(Index)this->comb_tilde_12_feedBack_writer] = v;
            }
            
            number comb_tilde_12_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_12_feedBack__maxdelay : size);
                number val = this->comb_tilde_12_feedBack_read(effectiveSize, 0);
                this->comb_tilde_12_feedBack_write(v);
                this->comb_tilde_12_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_12_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_12_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_12_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_12_feedBack_init() {
                auto result = this->comb_tilde_12_feedBack_calcSizeInSamples();
                this->comb_tilde_12_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_12_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_12_feedBack_clear() {
                this->comb_tilde_12_feedBack_buffer->setZero();
            }
            
            void comb_tilde_12_feedBack_reset() {
                auto result = this->comb_tilde_12_feedBack_calcSizeInSamples();
                this->comb_tilde_12_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_12_feedBack_buffer);
                this->comb_tilde_12_feedBack_wrap = this->comb_tilde_12_feedBack_buffer->getSize() - 1;
                this->comb_tilde_12_feedBack_clear();
            
                if (this->comb_tilde_12_feedBack_reader >= this->comb_tilde_12_feedBack__maxdelay || this->comb_tilde_12_feedBack_writer >= this->comb_tilde_12_feedBack__maxdelay) {
                    this->comb_tilde_12_feedBack_reader = 0;
                    this->comb_tilde_12_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_12_feedBack_dspsetup() {
                this->comb_tilde_12_feedBack_reset();
            }
            
            number comb_tilde_12_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_12_feedBack_size() {
                return this->comb_tilde_12_feedBack__maxdelay;
            }
            
            void comb_tilde_12_init() {
                this->comb_tilde_12_feedForward_init();
                this->comb_tilde_12_feedBack_init();
            }
            
            void comb_tilde_12_clear() {
                this->comb_tilde_12_feedForward_clear();
                this->comb_tilde_12_feedBack_clear();
            }
            
            void comb_tilde_12_reset() {
                this->comb_tilde_12_init();
                this->comb_tilde_12_clear();
            }
            
            void comb_tilde_12_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_12_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_12_reset();
                this->comb_tilde_12_setupDone = true;
                this->comb_tilde_12_feedForward_dspsetup();
                this->comb_tilde_12_feedBack_dspsetup();
            }
            
            void comb_tilde_13_feedForward_step() {
                this->comb_tilde_13_feedForward_reader++;
            
                if (this->comb_tilde_13_feedForward_reader >= (int)(this->comb_tilde_13_feedForward_buffer->getSize()))
                    this->comb_tilde_13_feedForward_reader = 0;
            }
            
            number comb_tilde_13_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_13_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_13_feedForward_wrap))
                );
            }
            
            void comb_tilde_13_feedForward_write(number v) {
                this->comb_tilde_13_feedForward_writer = this->comb_tilde_13_feedForward_reader;
                this->comb_tilde_13_feedForward_buffer[(Index)this->comb_tilde_13_feedForward_writer] = v;
            }
            
            number comb_tilde_13_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_13_feedForward__maxdelay : size);
                number val = this->comb_tilde_13_feedForward_read(effectiveSize, 0);
                this->comb_tilde_13_feedForward_write(v);
                this->comb_tilde_13_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_13_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_13_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_13_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_13_feedForward_init() {
                auto result = this->comb_tilde_13_feedForward_calcSizeInSamples();
                this->comb_tilde_13_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_13_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_13_feedForward_clear() {
                this->comb_tilde_13_feedForward_buffer->setZero();
            }
            
            void comb_tilde_13_feedForward_reset() {
                auto result = this->comb_tilde_13_feedForward_calcSizeInSamples();
                this->comb_tilde_13_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_13_feedForward_buffer);
                this->comb_tilde_13_feedForward_wrap = this->comb_tilde_13_feedForward_buffer->getSize() - 1;
                this->comb_tilde_13_feedForward_clear();
            
                if (this->comb_tilde_13_feedForward_reader >= this->comb_tilde_13_feedForward__maxdelay || this->comb_tilde_13_feedForward_writer >= this->comb_tilde_13_feedForward__maxdelay) {
                    this->comb_tilde_13_feedForward_reader = 0;
                    this->comb_tilde_13_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_13_feedForward_dspsetup() {
                this->comb_tilde_13_feedForward_reset();
            }
            
            number comb_tilde_13_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_13_feedForward_size() {
                return this->comb_tilde_13_feedForward__maxdelay;
            }
            
            void comb_tilde_13_feedBack_step() {
                this->comb_tilde_13_feedBack_reader++;
            
                if (this->comb_tilde_13_feedBack_reader >= (int)(this->comb_tilde_13_feedBack_buffer->getSize()))
                    this->comb_tilde_13_feedBack_reader = 0;
            }
            
            number comb_tilde_13_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_13_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_13_feedBack_wrap))
                );
            }
            
            void comb_tilde_13_feedBack_write(number v) {
                this->comb_tilde_13_feedBack_writer = this->comb_tilde_13_feedBack_reader;
                this->comb_tilde_13_feedBack_buffer[(Index)this->comb_tilde_13_feedBack_writer] = v;
            }
            
            number comb_tilde_13_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_13_feedBack__maxdelay : size);
                number val = this->comb_tilde_13_feedBack_read(effectiveSize, 0);
                this->comb_tilde_13_feedBack_write(v);
                this->comb_tilde_13_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_13_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_13_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_13_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_13_feedBack_init() {
                auto result = this->comb_tilde_13_feedBack_calcSizeInSamples();
                this->comb_tilde_13_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_13_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_13_feedBack_clear() {
                this->comb_tilde_13_feedBack_buffer->setZero();
            }
            
            void comb_tilde_13_feedBack_reset() {
                auto result = this->comb_tilde_13_feedBack_calcSizeInSamples();
                this->comb_tilde_13_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_13_feedBack_buffer);
                this->comb_tilde_13_feedBack_wrap = this->comb_tilde_13_feedBack_buffer->getSize() - 1;
                this->comb_tilde_13_feedBack_clear();
            
                if (this->comb_tilde_13_feedBack_reader >= this->comb_tilde_13_feedBack__maxdelay || this->comb_tilde_13_feedBack_writer >= this->comb_tilde_13_feedBack__maxdelay) {
                    this->comb_tilde_13_feedBack_reader = 0;
                    this->comb_tilde_13_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_13_feedBack_dspsetup() {
                this->comb_tilde_13_feedBack_reset();
            }
            
            number comb_tilde_13_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_13_feedBack_size() {
                return this->comb_tilde_13_feedBack__maxdelay;
            }
            
            void comb_tilde_13_init() {
                this->comb_tilde_13_feedForward_init();
                this->comb_tilde_13_feedBack_init();
            }
            
            void comb_tilde_13_clear() {
                this->comb_tilde_13_feedForward_clear();
                this->comb_tilde_13_feedBack_clear();
            }
            
            void comb_tilde_13_reset() {
                this->comb_tilde_13_init();
                this->comb_tilde_13_clear();
            }
            
            void comb_tilde_13_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_13_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_13_reset();
                this->comb_tilde_13_setupDone = true;
                this->comb_tilde_13_feedForward_dspsetup();
                this->comb_tilde_13_feedBack_dspsetup();
            }
            
            void comb_tilde_14_feedForward_step() {
                this->comb_tilde_14_feedForward_reader++;
            
                if (this->comb_tilde_14_feedForward_reader >= (int)(this->comb_tilde_14_feedForward_buffer->getSize()))
                    this->comb_tilde_14_feedForward_reader = 0;
            }
            
            number comb_tilde_14_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_14_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_14_feedForward_wrap))
                );
            }
            
            void comb_tilde_14_feedForward_write(number v) {
                this->comb_tilde_14_feedForward_writer = this->comb_tilde_14_feedForward_reader;
                this->comb_tilde_14_feedForward_buffer[(Index)this->comb_tilde_14_feedForward_writer] = v;
            }
            
            number comb_tilde_14_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_14_feedForward__maxdelay : size);
                number val = this->comb_tilde_14_feedForward_read(effectiveSize, 0);
                this->comb_tilde_14_feedForward_write(v);
                this->comb_tilde_14_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_14_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_14_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_14_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_14_feedForward_init() {
                auto result = this->comb_tilde_14_feedForward_calcSizeInSamples();
                this->comb_tilde_14_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_14_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_14_feedForward_clear() {
                this->comb_tilde_14_feedForward_buffer->setZero();
            }
            
            void comb_tilde_14_feedForward_reset() {
                auto result = this->comb_tilde_14_feedForward_calcSizeInSamples();
                this->comb_tilde_14_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_14_feedForward_buffer);
                this->comb_tilde_14_feedForward_wrap = this->comb_tilde_14_feedForward_buffer->getSize() - 1;
                this->comb_tilde_14_feedForward_clear();
            
                if (this->comb_tilde_14_feedForward_reader >= this->comb_tilde_14_feedForward__maxdelay || this->comb_tilde_14_feedForward_writer >= this->comb_tilde_14_feedForward__maxdelay) {
                    this->comb_tilde_14_feedForward_reader = 0;
                    this->comb_tilde_14_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_14_feedForward_dspsetup() {
                this->comb_tilde_14_feedForward_reset();
            }
            
            number comb_tilde_14_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_14_feedForward_size() {
                return this->comb_tilde_14_feedForward__maxdelay;
            }
            
            void comb_tilde_14_feedBack_step() {
                this->comb_tilde_14_feedBack_reader++;
            
                if (this->comb_tilde_14_feedBack_reader >= (int)(this->comb_tilde_14_feedBack_buffer->getSize()))
                    this->comb_tilde_14_feedBack_reader = 0;
            }
            
            number comb_tilde_14_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_14_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_14_feedBack_wrap))
                );
            }
            
            void comb_tilde_14_feedBack_write(number v) {
                this->comb_tilde_14_feedBack_writer = this->comb_tilde_14_feedBack_reader;
                this->comb_tilde_14_feedBack_buffer[(Index)this->comb_tilde_14_feedBack_writer] = v;
            }
            
            number comb_tilde_14_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_14_feedBack__maxdelay : size);
                number val = this->comb_tilde_14_feedBack_read(effectiveSize, 0);
                this->comb_tilde_14_feedBack_write(v);
                this->comb_tilde_14_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_14_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_14_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_14_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_14_feedBack_init() {
                auto result = this->comb_tilde_14_feedBack_calcSizeInSamples();
                this->comb_tilde_14_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_14_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_14_feedBack_clear() {
                this->comb_tilde_14_feedBack_buffer->setZero();
            }
            
            void comb_tilde_14_feedBack_reset() {
                auto result = this->comb_tilde_14_feedBack_calcSizeInSamples();
                this->comb_tilde_14_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_14_feedBack_buffer);
                this->comb_tilde_14_feedBack_wrap = this->comb_tilde_14_feedBack_buffer->getSize() - 1;
                this->comb_tilde_14_feedBack_clear();
            
                if (this->comb_tilde_14_feedBack_reader >= this->comb_tilde_14_feedBack__maxdelay || this->comb_tilde_14_feedBack_writer >= this->comb_tilde_14_feedBack__maxdelay) {
                    this->comb_tilde_14_feedBack_reader = 0;
                    this->comb_tilde_14_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_14_feedBack_dspsetup() {
                this->comb_tilde_14_feedBack_reset();
            }
            
            number comb_tilde_14_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_14_feedBack_size() {
                return this->comb_tilde_14_feedBack__maxdelay;
            }
            
            void comb_tilde_14_init() {
                this->comb_tilde_14_feedForward_init();
                this->comb_tilde_14_feedBack_init();
            }
            
            void comb_tilde_14_clear() {
                this->comb_tilde_14_feedForward_clear();
                this->comb_tilde_14_feedBack_clear();
            }
            
            void comb_tilde_14_reset() {
                this->comb_tilde_14_init();
                this->comb_tilde_14_clear();
            }
            
            void comb_tilde_14_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_14_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_14_reset();
                this->comb_tilde_14_setupDone = true;
                this->comb_tilde_14_feedForward_dspsetup();
                this->comb_tilde_14_feedBack_dspsetup();
            }
            
            void comb_tilde_15_feedForward_step() {
                this->comb_tilde_15_feedForward_reader++;
            
                if (this->comb_tilde_15_feedForward_reader >= (int)(this->comb_tilde_15_feedForward_buffer->getSize()))
                    this->comb_tilde_15_feedForward_reader = 0;
            }
            
            number comb_tilde_15_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_15_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_15_feedForward_wrap))
                );
            }
            
            void comb_tilde_15_feedForward_write(number v) {
                this->comb_tilde_15_feedForward_writer = this->comb_tilde_15_feedForward_reader;
                this->comb_tilde_15_feedForward_buffer[(Index)this->comb_tilde_15_feedForward_writer] = v;
            }
            
            number comb_tilde_15_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_15_feedForward__maxdelay : size);
                number val = this->comb_tilde_15_feedForward_read(effectiveSize, 0);
                this->comb_tilde_15_feedForward_write(v);
                this->comb_tilde_15_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_15_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_15_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_15_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_15_feedForward_init() {
                auto result = this->comb_tilde_15_feedForward_calcSizeInSamples();
                this->comb_tilde_15_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_15_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_15_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_15_feedForward_clear() {
                this->comb_tilde_15_feedForward_buffer->setZero();
            }
            
            void comb_tilde_15_feedForward_reset() {
                auto result = this->comb_tilde_15_feedForward_calcSizeInSamples();
                this->comb_tilde_15_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_15_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_15_feedForward_buffer);
                this->comb_tilde_15_feedForward_wrap = this->comb_tilde_15_feedForward_buffer->getSize() - 1;
                this->comb_tilde_15_feedForward_clear();
            
                if (this->comb_tilde_15_feedForward_reader >= this->comb_tilde_15_feedForward__maxdelay || this->comb_tilde_15_feedForward_writer >= this->comb_tilde_15_feedForward__maxdelay) {
                    this->comb_tilde_15_feedForward_reader = 0;
                    this->comb_tilde_15_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_15_feedForward_dspsetup() {
                this->comb_tilde_15_feedForward_reset();
            }
            
            number comb_tilde_15_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_15_feedForward_size() {
                return this->comb_tilde_15_feedForward__maxdelay;
            }
            
            void comb_tilde_15_feedBack_step() {
                this->comb_tilde_15_feedBack_reader++;
            
                if (this->comb_tilde_15_feedBack_reader >= (int)(this->comb_tilde_15_feedBack_buffer->getSize()))
                    this->comb_tilde_15_feedBack_reader = 0;
            }
            
            number comb_tilde_15_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_15_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_15_feedBack_wrap))
                );
            }
            
            void comb_tilde_15_feedBack_write(number v) {
                this->comb_tilde_15_feedBack_writer = this->comb_tilde_15_feedBack_reader;
                this->comb_tilde_15_feedBack_buffer[(Index)this->comb_tilde_15_feedBack_writer] = v;
            }
            
            number comb_tilde_15_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_15_feedBack__maxdelay : size);
                number val = this->comb_tilde_15_feedBack_read(effectiveSize, 0);
                this->comb_tilde_15_feedBack_write(v);
                this->comb_tilde_15_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_15_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_15_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_15_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_15_feedBack_init() {
                auto result = this->comb_tilde_15_feedBack_calcSizeInSamples();
                this->comb_tilde_15_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_15_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_15_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_15_feedBack_clear() {
                this->comb_tilde_15_feedBack_buffer->setZero();
            }
            
            void comb_tilde_15_feedBack_reset() {
                auto result = this->comb_tilde_15_feedBack_calcSizeInSamples();
                this->comb_tilde_15_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_15_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_15_feedBack_buffer);
                this->comb_tilde_15_feedBack_wrap = this->comb_tilde_15_feedBack_buffer->getSize() - 1;
                this->comb_tilde_15_feedBack_clear();
            
                if (this->comb_tilde_15_feedBack_reader >= this->comb_tilde_15_feedBack__maxdelay || this->comb_tilde_15_feedBack_writer >= this->comb_tilde_15_feedBack__maxdelay) {
                    this->comb_tilde_15_feedBack_reader = 0;
                    this->comb_tilde_15_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_15_feedBack_dspsetup() {
                this->comb_tilde_15_feedBack_reset();
            }
            
            number comb_tilde_15_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_15_feedBack_size() {
                return this->comb_tilde_15_feedBack__maxdelay;
            }
            
            void comb_tilde_15_init() {
                this->comb_tilde_15_feedForward_init();
                this->comb_tilde_15_feedBack_init();
            }
            
            void comb_tilde_15_clear() {
                this->comb_tilde_15_feedForward_clear();
                this->comb_tilde_15_feedBack_clear();
            }
            
            void comb_tilde_15_reset() {
                this->comb_tilde_15_init();
                this->comb_tilde_15_clear();
            }
            
            void comb_tilde_15_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_15_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_15_reset();
                this->comb_tilde_15_setupDone = true;
                this->comb_tilde_15_feedForward_dspsetup();
                this->comb_tilde_15_feedBack_dspsetup();
            }
            
            void comb_tilde_16_feedForward_step() {
                this->comb_tilde_16_feedForward_reader++;
            
                if (this->comb_tilde_16_feedForward_reader >= (int)(this->comb_tilde_16_feedForward_buffer->getSize()))
                    this->comb_tilde_16_feedForward_reader = 0;
            }
            
            number comb_tilde_16_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_16_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_16_feedForward_wrap))
                );
            }
            
            void comb_tilde_16_feedForward_write(number v) {
                this->comb_tilde_16_feedForward_writer = this->comb_tilde_16_feedForward_reader;
                this->comb_tilde_16_feedForward_buffer[(Index)this->comb_tilde_16_feedForward_writer] = v;
            }
            
            number comb_tilde_16_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_16_feedForward__maxdelay : size);
                number val = this->comb_tilde_16_feedForward_read(effectiveSize, 0);
                this->comb_tilde_16_feedForward_write(v);
                this->comb_tilde_16_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_16_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_16_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_16_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_16_feedForward_init() {
                auto result = this->comb_tilde_16_feedForward_calcSizeInSamples();
                this->comb_tilde_16_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_16_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_16_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_16_feedForward_clear() {
                this->comb_tilde_16_feedForward_buffer->setZero();
            }
            
            void comb_tilde_16_feedForward_reset() {
                auto result = this->comb_tilde_16_feedForward_calcSizeInSamples();
                this->comb_tilde_16_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_16_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_16_feedForward_buffer);
                this->comb_tilde_16_feedForward_wrap = this->comb_tilde_16_feedForward_buffer->getSize() - 1;
                this->comb_tilde_16_feedForward_clear();
            
                if (this->comb_tilde_16_feedForward_reader >= this->comb_tilde_16_feedForward__maxdelay || this->comb_tilde_16_feedForward_writer >= this->comb_tilde_16_feedForward__maxdelay) {
                    this->comb_tilde_16_feedForward_reader = 0;
                    this->comb_tilde_16_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_16_feedForward_dspsetup() {
                this->comb_tilde_16_feedForward_reset();
            }
            
            number comb_tilde_16_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_16_feedForward_size() {
                return this->comb_tilde_16_feedForward__maxdelay;
            }
            
            void comb_tilde_16_feedBack_step() {
                this->comb_tilde_16_feedBack_reader++;
            
                if (this->comb_tilde_16_feedBack_reader >= (int)(this->comb_tilde_16_feedBack_buffer->getSize()))
                    this->comb_tilde_16_feedBack_reader = 0;
            }
            
            number comb_tilde_16_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index3 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index4 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((UBinOpInt)index2 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_16_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((UBinOpInt)index1 & (UBinOpInt)this->comb_tilde_16_feedBack_wrap))
                );
            }
            
            void comb_tilde_16_feedBack_write(number v) {
                this->comb_tilde_16_feedBack_writer = this->comb_tilde_16_feedBack_reader;
                this->comb_tilde_16_feedBack_buffer[(Index)this->comb_tilde_16_feedBack_writer] = v;
            }
            
            number comb_tilde_16_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_16_feedBack__maxdelay : size);
                number val = this->comb_tilde_16_feedBack_read(effectiveSize, 0);
                this->comb_tilde_16_feedBack_write(v);
                this->comb_tilde_16_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_16_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_16_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_16_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_16_feedBack_init() {
                auto result = this->comb_tilde_16_feedBack_calcSizeInSamples();
                this->comb_tilde_16_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_16_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_16_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_16_feedBack_clear() {
                this->comb_tilde_16_feedBack_buffer->setZero();
            }
            
            void comb_tilde_16_feedBack_reset() {
                auto result = this->comb_tilde_16_feedBack_calcSizeInSamples();
                this->comb_tilde_16_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_16_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_16_feedBack_buffer);
                this->comb_tilde_16_feedBack_wrap = this->comb_tilde_16_feedBack_buffer->getSize() - 1;
                this->comb_tilde_16_feedBack_clear();
            
                if (this->comb_tilde_16_feedBack_reader >= this->comb_tilde_16_feedBack__maxdelay || this->comb_tilde_16_feedBack_writer >= this->comb_tilde_16_feedBack__maxdelay) {
                    this->comb_tilde_16_feedBack_reader = 0;
                    this->comb_tilde_16_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_16_feedBack_dspsetup() {
                this->comb_tilde_16_feedBack_reset();
            }
            
            number comb_tilde_16_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_16_feedBack_size() {
                return this->comb_tilde_16_feedBack__maxdelay;
            }
            
            void comb_tilde_16_init() {
                this->comb_tilde_16_feedForward_init();
                this->comb_tilde_16_feedBack_init();
            }
            
            void comb_tilde_16_clear() {
                this->comb_tilde_16_feedForward_clear();
                this->comb_tilde_16_feedBack_clear();
            }
            
            void comb_tilde_16_reset() {
                this->comb_tilde_16_init();
                this->comb_tilde_16_clear();
            }
            
            void comb_tilde_16_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_16_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_16_reset();
                this->comb_tilde_16_setupDone = true;
                this->comb_tilde_16_feedForward_dspsetup();
                this->comb_tilde_16_feedBack_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                comb_tilde_10_x = 0;
                comb_tilde_10_delayTime = 110;
                comb_tilde_10_gain = 0;
                comb_tilde_10_ffGain = 1;
                comb_tilde_10_fbGain = 0;
                dspexpr_25_in1 = 0;
                dspexpr_25_in2 = 110;
                comb_tilde_11_x = 0;
                comb_tilde_11_delayTime = 135;
                comb_tilde_11_gain = 0;
                comb_tilde_11_ffGain = 1;
                comb_tilde_11_fbGain = 0;
                dspexpr_26_in1 = 0;
                dspexpr_26_in2 = 135;
                comb_tilde_12_x = 0;
                comb_tilde_12_delayTime = 55;
                comb_tilde_12_gain = 0;
                comb_tilde_12_ffGain = 1;
                comb_tilde_12_fbGain = 0;
                dspexpr_27_in1 = 0;
                dspexpr_27_in2 = 55;
                dspexpr_28_in1 = 0;
                dspexpr_28_in2 = 0.355;
                comb_tilde_13_x = 0;
                comb_tilde_13_delayTime = 3;
                comb_tilde_13_gain = 0;
                comb_tilde_13_ffGain = 1;
                comb_tilde_13_fbGain = 0;
                dspexpr_29_in1 = 0;
                dspexpr_29_in2 = 0;
                dspexpr_30_in1 = 0;
                dspexpr_30_in2 = 3;
                dspexpr_31_in1 = 0;
                dspexpr_31_in2 = -1;
                comb_tilde_14_x = 0;
                comb_tilde_14_delayTime = 35;
                comb_tilde_14_gain = 0;
                comb_tilde_14_ffGain = 1;
                comb_tilde_14_fbGain = 0;
                dspexpr_32_in1 = 0;
                dspexpr_32_in2 = 35;
                comb_tilde_15_x = 0;
                comb_tilde_15_delayTime = 27;
                comb_tilde_15_gain = 0;
                comb_tilde_15_ffGain = 1;
                comb_tilde_15_fbGain = 0;
                dspexpr_33_in1 = 0;
                dspexpr_33_in2 = 27;
                comb_tilde_16_x = 0;
                comb_tilde_16_delayTime = 52;
                comb_tilde_16_gain = 0;
                comb_tilde_16_ffGain = 1;
                comb_tilde_16_fbGain = 0;
                dspexpr_34_in1 = 0;
                dspexpr_34_in2 = 52;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                comb_tilde_10_feedForward__maxdelay = 0;
                comb_tilde_10_feedForward_sizemode = 0;
                comb_tilde_10_feedForward_wrap = 0;
                comb_tilde_10_feedForward_reader = 0;
                comb_tilde_10_feedForward_writer = 0;
                comb_tilde_10_feedBack__maxdelay = 0;
                comb_tilde_10_feedBack_sizemode = 0;
                comb_tilde_10_feedBack_wrap = 0;
                comb_tilde_10_feedBack_reader = 0;
                comb_tilde_10_feedBack_writer = 0;
                comb_tilde_10_setupDone = false;
                comb_tilde_11_feedForward__maxdelay = 0;
                comb_tilde_11_feedForward_sizemode = 0;
                comb_tilde_11_feedForward_wrap = 0;
                comb_tilde_11_feedForward_reader = 0;
                comb_tilde_11_feedForward_writer = 0;
                comb_tilde_11_feedBack__maxdelay = 0;
                comb_tilde_11_feedBack_sizemode = 0;
                comb_tilde_11_feedBack_wrap = 0;
                comb_tilde_11_feedBack_reader = 0;
                comb_tilde_11_feedBack_writer = 0;
                comb_tilde_11_setupDone = false;
                comb_tilde_12_feedForward__maxdelay = 0;
                comb_tilde_12_feedForward_sizemode = 0;
                comb_tilde_12_feedForward_wrap = 0;
                comb_tilde_12_feedForward_reader = 0;
                comb_tilde_12_feedForward_writer = 0;
                comb_tilde_12_feedBack__maxdelay = 0;
                comb_tilde_12_feedBack_sizemode = 0;
                comb_tilde_12_feedBack_wrap = 0;
                comb_tilde_12_feedBack_reader = 0;
                comb_tilde_12_feedBack_writer = 0;
                comb_tilde_12_setupDone = false;
                comb_tilde_13_feedForward__maxdelay = 0;
                comb_tilde_13_feedForward_sizemode = 0;
                comb_tilde_13_feedForward_wrap = 0;
                comb_tilde_13_feedForward_reader = 0;
                comb_tilde_13_feedForward_writer = 0;
                comb_tilde_13_feedBack__maxdelay = 0;
                comb_tilde_13_feedBack_sizemode = 0;
                comb_tilde_13_feedBack_wrap = 0;
                comb_tilde_13_feedBack_reader = 0;
                comb_tilde_13_feedBack_writer = 0;
                comb_tilde_13_setupDone = false;
                comb_tilde_14_feedForward__maxdelay = 0;
                comb_tilde_14_feedForward_sizemode = 0;
                comb_tilde_14_feedForward_wrap = 0;
                comb_tilde_14_feedForward_reader = 0;
                comb_tilde_14_feedForward_writer = 0;
                comb_tilde_14_feedBack__maxdelay = 0;
                comb_tilde_14_feedBack_sizemode = 0;
                comb_tilde_14_feedBack_wrap = 0;
                comb_tilde_14_feedBack_reader = 0;
                comb_tilde_14_feedBack_writer = 0;
                comb_tilde_14_setupDone = false;
                comb_tilde_15_feedForward__maxdelay = 0;
                comb_tilde_15_feedForward_sizemode = 0;
                comb_tilde_15_feedForward_wrap = 0;
                comb_tilde_15_feedForward_reader = 0;
                comb_tilde_15_feedForward_writer = 0;
                comb_tilde_15_feedBack__maxdelay = 0;
                comb_tilde_15_feedBack_sizemode = 0;
                comb_tilde_15_feedBack_wrap = 0;
                comb_tilde_15_feedBack_reader = 0;
                comb_tilde_15_feedBack_writer = 0;
                comb_tilde_15_setupDone = false;
                comb_tilde_16_feedForward__maxdelay = 0;
                comb_tilde_16_feedForward_sizemode = 0;
                comb_tilde_16_feedForward_wrap = 0;
                comb_tilde_16_feedForward_reader = 0;
                comb_tilde_16_feedForward_writer = 0;
                comb_tilde_16_feedBack__maxdelay = 0;
                comb_tilde_16_feedBack_sizemode = 0;
                comb_tilde_16_feedBack_wrap = 0;
                comb_tilde_16_feedBack_reader = 0;
                comb_tilde_16_feedBack_writer = 0;
                comb_tilde_16_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number comb_tilde_10_x;
                number comb_tilde_10_delayTime;
                number comb_tilde_10_gain;
                number comb_tilde_10_ffGain;
                number comb_tilde_10_fbGain;
                number dspexpr_25_in1;
                number dspexpr_25_in2;
                number comb_tilde_11_x;
                number comb_tilde_11_delayTime;
                number comb_tilde_11_gain;
                number comb_tilde_11_ffGain;
                number comb_tilde_11_fbGain;
                number dspexpr_26_in1;
                number dspexpr_26_in2;
                number comb_tilde_12_x;
                number comb_tilde_12_delayTime;
                number comb_tilde_12_gain;
                number comb_tilde_12_ffGain;
                number comb_tilde_12_fbGain;
                number dspexpr_27_in1;
                number dspexpr_27_in2;
                number dspexpr_28_in1;
                number dspexpr_28_in2;
                number comb_tilde_13_x;
                number comb_tilde_13_delayTime;
                number comb_tilde_13_gain;
                number comb_tilde_13_ffGain;
                number comb_tilde_13_fbGain;
                number dspexpr_29_in1;
                number dspexpr_29_in2;
                number dspexpr_30_in1;
                number dspexpr_30_in2;
                number dspexpr_31_in1;
                number dspexpr_31_in2;
                number comb_tilde_14_x;
                number comb_tilde_14_delayTime;
                number comb_tilde_14_gain;
                number comb_tilde_14_ffGain;
                number comb_tilde_14_fbGain;
                number dspexpr_32_in1;
                number dspexpr_32_in2;
                number comb_tilde_15_x;
                number comb_tilde_15_delayTime;
                number comb_tilde_15_gain;
                number comb_tilde_15_ffGain;
                number comb_tilde_15_fbGain;
                number dspexpr_33_in1;
                number dspexpr_33_in2;
                number comb_tilde_16_x;
                number comb_tilde_16_delayTime;
                number comb_tilde_16_gain;
                number comb_tilde_16_ffGain;
                number comb_tilde_16_fbGain;
                number dspexpr_34_in1;
                number dspexpr_34_in2;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef comb_tilde_10_feedForward_buffer;
                Index comb_tilde_10_feedForward__maxdelay;
                Int comb_tilde_10_feedForward_sizemode;
                Index comb_tilde_10_feedForward_wrap;
                Int comb_tilde_10_feedForward_reader;
                Int comb_tilde_10_feedForward_writer;
                Float64BufferRef comb_tilde_10_feedBack_buffer;
                Index comb_tilde_10_feedBack__maxdelay;
                Int comb_tilde_10_feedBack_sizemode;
                Index comb_tilde_10_feedBack_wrap;
                Int comb_tilde_10_feedBack_reader;
                Int comb_tilde_10_feedBack_writer;
                bool comb_tilde_10_setupDone;
                Float64BufferRef comb_tilde_11_feedForward_buffer;
                Index comb_tilde_11_feedForward__maxdelay;
                Int comb_tilde_11_feedForward_sizemode;
                Index comb_tilde_11_feedForward_wrap;
                Int comb_tilde_11_feedForward_reader;
                Int comb_tilde_11_feedForward_writer;
                Float64BufferRef comb_tilde_11_feedBack_buffer;
                Index comb_tilde_11_feedBack__maxdelay;
                Int comb_tilde_11_feedBack_sizemode;
                Index comb_tilde_11_feedBack_wrap;
                Int comb_tilde_11_feedBack_reader;
                Int comb_tilde_11_feedBack_writer;
                bool comb_tilde_11_setupDone;
                Float64BufferRef comb_tilde_12_feedForward_buffer;
                Index comb_tilde_12_feedForward__maxdelay;
                Int comb_tilde_12_feedForward_sizemode;
                Index comb_tilde_12_feedForward_wrap;
                Int comb_tilde_12_feedForward_reader;
                Int comb_tilde_12_feedForward_writer;
                Float64BufferRef comb_tilde_12_feedBack_buffer;
                Index comb_tilde_12_feedBack__maxdelay;
                Int comb_tilde_12_feedBack_sizemode;
                Index comb_tilde_12_feedBack_wrap;
                Int comb_tilde_12_feedBack_reader;
                Int comb_tilde_12_feedBack_writer;
                bool comb_tilde_12_setupDone;
                Float64BufferRef comb_tilde_13_feedForward_buffer;
                Index comb_tilde_13_feedForward__maxdelay;
                Int comb_tilde_13_feedForward_sizemode;
                Index comb_tilde_13_feedForward_wrap;
                Int comb_tilde_13_feedForward_reader;
                Int comb_tilde_13_feedForward_writer;
                Float64BufferRef comb_tilde_13_feedBack_buffer;
                Index comb_tilde_13_feedBack__maxdelay;
                Int comb_tilde_13_feedBack_sizemode;
                Index comb_tilde_13_feedBack_wrap;
                Int comb_tilde_13_feedBack_reader;
                Int comb_tilde_13_feedBack_writer;
                bool comb_tilde_13_setupDone;
                Float64BufferRef comb_tilde_14_feedForward_buffer;
                Index comb_tilde_14_feedForward__maxdelay;
                Int comb_tilde_14_feedForward_sizemode;
                Index comb_tilde_14_feedForward_wrap;
                Int comb_tilde_14_feedForward_reader;
                Int comb_tilde_14_feedForward_writer;
                Float64BufferRef comb_tilde_14_feedBack_buffer;
                Index comb_tilde_14_feedBack__maxdelay;
                Int comb_tilde_14_feedBack_sizemode;
                Index comb_tilde_14_feedBack_wrap;
                Int comb_tilde_14_feedBack_reader;
                Int comb_tilde_14_feedBack_writer;
                bool comb_tilde_14_setupDone;
                Float64BufferRef comb_tilde_15_feedForward_buffer;
                Index comb_tilde_15_feedForward__maxdelay;
                Int comb_tilde_15_feedForward_sizemode;
                Index comb_tilde_15_feedForward_wrap;
                Int comb_tilde_15_feedForward_reader;
                Int comb_tilde_15_feedForward_writer;
                Float64BufferRef comb_tilde_15_feedBack_buffer;
                Index comb_tilde_15_feedBack__maxdelay;
                Int comb_tilde_15_feedBack_sizemode;
                Index comb_tilde_15_feedBack_wrap;
                Int comb_tilde_15_feedBack_reader;
                Int comb_tilde_15_feedBack_writer;
                bool comb_tilde_15_setupDone;
                Float64BufferRef comb_tilde_16_feedForward_buffer;
                Index comb_tilde_16_feedForward__maxdelay;
                Int comb_tilde_16_feedForward_sizemode;
                Index comb_tilde_16_feedForward_wrap;
                Int comb_tilde_16_feedForward_reader;
                Int comb_tilde_16_feedForward_writer;
                Float64BufferRef comb_tilde_16_feedBack_buffer;
                Index comb_tilde_16_feedBack__maxdelay;
                Int comb_tilde_16_feedBack_sizemode;
                Index comb_tilde_16_feedBack_wrap;
                Int comb_tilde_16_feedBack_reader;
                Int comb_tilde_16_feedBack_writer;
                bool comb_tilde_16_setupDone;
                number stackprotect_count;
                DataRef comb_tilde_10_feedForward_bufferobj;
                DataRef comb_tilde_10_feedBack_bufferobj;
                DataRef comb_tilde_11_feedForward_bufferobj;
                DataRef comb_tilde_11_feedBack_bufferobj;
                DataRef comb_tilde_12_feedForward_bufferobj;
                DataRef comb_tilde_12_feedBack_bufferobj;
                DataRef comb_tilde_13_feedForward_bufferobj;
                DataRef comb_tilde_13_feedBack_bufferobj;
                DataRef comb_tilde_14_feedForward_bufferobj;
                DataRef comb_tilde_14_feedBack_bufferobj;
                DataRef comb_tilde_15_feedForward_bufferobj;
                DataRef comb_tilde_15_feedBack_bufferobj;
                DataRef comb_tilde_16_feedForward_bufferobj;
                DataRef comb_tilde_16_feedBack_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_1051()
    {
    }
    
    ~RNBOSubpatcher_1051()
    {
        delete this->p_01;
        delete this->p_02;
        delete this->p_03;
        delete this->p_04;
        delete this->p_05;
        delete this->p_06;
        delete this->p_07;
        delete this->p_08;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 378255229, false);
        getEngine()->flushClockEvents(this, 760652352, false);
        getEngine()->flushClockEvents(this, -798469121, false);
        getEngine()->flushClockEvents(this, 1554979579, false);
        getEngine()->flushClockEvents(this, 1937376702, false);
        getEngine()->flushClockEvents(this, -1180866244, false);
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        number inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    ParameterValue fromnormalized(ParameterIndex index, ParameterValue normalizedValue) {
        return this->convertFromNormalizedParameterValue(index, normalizedValue);
    }
    
    ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
        if (!stringCompare(paramid, "decay")) {
            return 0;
        }
    
        if (!stringCompare(paramid, "mix")) {
            return 1;
        }
    
        if (!stringCompare(paramid, "jitter")) {
            return 2;
        }
    
        if (!stringCompare(paramid, "damp")) {
            return 3;
        }
    
        if (!stringCompare(paramid, "size")) {
            return 4;
        }
    
        if (!stringCompare(paramid, "diff")) {
            return 5;
        }
    
        if (!stringCompare(paramid, "number_obj-26/value")) {
            return 6;
        }
    
        if (!stringCompare(paramid, "number_obj-2/value")) {
            return 7;
        }
    
        if (!stringCompare(paramid, "number_obj-119/value")) {
            return 8;
        }
    
        if (!stringCompare(paramid, "number_obj-67/value")) {
            return 9;
        }
    
        if (!stringCompare(paramid, "number_obj-3/value")) {
            return 10;
        }
    
        if (!stringCompare(paramid, "number_obj-54/value")) {
            return 11;
        }
    
        if (!stringCompare(paramid, "number_obj-4/value")) {
            return 12;
        }
    
        if (!stringCompare(paramid, "number_obj-9/value")) {
            return 13;
        }
    
        if (!stringCompare(paramid, "number_obj-21/value")) {
            return 14;
        }
    
        if (!stringCompare(paramid, "number_obj-23/value")) {
            return 15;
        }
    
        if (!stringCompare(paramid, "number_obj-16/value")) {
            return 16;
        }
    
        if (!stringCompare(paramid, "number_obj-18/value")) {
            return 17;
        }
    
        return INVALID_INDEX;
    }
    
    Index getNumMidiInputPorts() const {
        return 1;
    }
    
    void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
        this->updateTime(time);
        this->ctlin_01_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_02_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_03_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_04_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_05_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_06_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
    }
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        SampleValue ** inputs,
        Index numInputs,
        SampleValue ** outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * source_aDecay = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
        SampleValue * source_aDamp = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
        SampleValue * source_aJitter = (numOutputs >= 5 && outputs[4] ? outputs[4] : this->dummyBuffer);
        SampleValue * source_aDiff = (numOutputs >= 6 && outputs[5] ? outputs[5] : this->dummyBuffer);
        SampleValue * source_aSize = (numOutputs >= 7 && outputs[6] ? outputs[6] : this->dummyBuffer);
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->line_01_perform(this->signals[0], n);
        this->signalsend_01_perform(this->signals[0], this->signals[1], n);
        this->signalreceive_05_perform(this->signals[1], this->signals[0], n);
        this->signalforwarder_01_perform(this->signals[1], source_aDecay, n);
        this->line_02_perform(this->signals[1], n);
        this->line_03_perform(this->signals[2], n);
        this->signalsend_03_perform(this->signals[2], this->signals[3], n);
        this->signalreceive_04_perform(this->signals[3], this->signals[2], n);
        this->signalforwarder_02_perform(this->signals[3], source_aJitter, n);
        this->line_04_perform(this->signals[3], n);
        this->signalsend_02_perform(this->signals[3], this->signals[4], n);
        this->signalreceive_03_perform(this->signals[4], this->signals[3], n);
        this->signalreceive_01_perform(this->signals[4], this->signals[5], n);
        this->p_06_perform(in1, in2, this->signals[5], this->signals[6], this->signals[7], n);
        this->p_04_perform(this->signals[6], this->signals[7], this->signals[5], this->signals[8], n);
        this->signalforwarder_03_perform(this->signals[4], source_aDamp, n);
        this->line_05_perform(this->signals[4], n);
        this->signalsend_04_perform(this->signals[4], this->signals[7], n);
        this->signalreceive_06_perform(this->signals[7], this->signals[4], n);
        this->signalforwarder_04_perform(this->signals[7], source_aDiff, n);
        this->line_06_perform(this->signals[7], n);
        this->signalsend_05_perform(this->signals[7], this->signals[6], n);
        this->signalreceive_02_perform(this->signals[6], this->signals[7], n);
    
        this->p_05_perform(
            this->signals[5],
            this->signals[7],
            this->signals[2],
            this->signals[3],
            this->signals[0],
            this->signals[9],
            this->signals[10],
            this->signals[11],
            this->signals[12],
            n
        );
    
        this->p_07_perform(
            this->signals[8],
            this->signals[7],
            this->signals[2],
            this->signals[3],
            this->signals[0],
            this->signals[5],
            this->signals[13],
            this->signals[14],
            this->signals[15],
            n
        );
    
        this->p_03_perform(
            this->signals[9],
            this->signals[10],
            this->signals[11],
            this->signals[12],
            this->signals[5],
            this->signals[13],
            this->signals[14],
            this->signals[15],
            this->signals[0],
            this->signals[3],
            this->signals[2],
            this->signals[8],
            this->signals[16],
            this->signals[17],
            this->signals[18],
            this->signals[19],
            this->signals[20],
            this->signals[21],
            this->signals[22],
            this->signals[23],
            this->signals[24],
            this->signals[25],
            n
        );
    
        this->p_02_perform(
            this->signals[0],
            this->signals[3],
            this->signals[2],
            this->signals[8],
            this->signals[16],
            this->signals[17],
            this->signals[18],
            this->signals[7],
            this->signals[4],
            this->signals[15],
            n
        );
    
        this->p_08_perform(
            this->signals[19],
            this->signals[20],
            this->signals[21],
            this->signals[22],
            this->signals[23],
            this->signals[24],
            this->signals[25],
            this->signals[7],
            this->signals[4],
            this->signals[18],
            n
        );
    
        this->p_01_perform(
            in1,
            in2,
            this->signals[15],
            this->signals[18],
            this->signals[1],
            out1,
            out2,
            n
        );
    
        this->signalforwarder_05_perform(this->signals[6], source_aSize, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 26; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
        this->p_01->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_02->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_03->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_04->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_05->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_06->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_07->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_08->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            this->setProbingIndex(-1);
            break;
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_01 = new RNBOSubpatcher_1025();
        this->p_01->setEngineAndPatcher(this->getEngine(), this);
        this->p_01->initialize();
        this->p_01->setParameterOffset(this->getParameterOffset(this->p_01));
        this->p_02 = new RNBOSubpatcher_1026();
        this->p_02->setEngineAndPatcher(this->getEngine(), this);
        this->p_02->initialize();
        this->p_02->setParameterOffset(this->getParameterOffset(this->p_02));
        this->p_03 = new RNBOSubpatcher_1027();
        this->p_03->setEngineAndPatcher(this->getEngine(), this);
        this->p_03->initialize();
        this->p_03->setParameterOffset(this->getParameterOffset(this->p_03));
        this->p_04 = new RNBOSubpatcher_1028();
        this->p_04->setEngineAndPatcher(this->getEngine(), this);
        this->p_04->initialize();
        this->p_04->setParameterOffset(this->getParameterOffset(this->p_04));
        this->p_05 = new RNBOSubpatcher_1029();
        this->p_05->setEngineAndPatcher(this->getEngine(), this);
        this->p_05->initialize();
        this->p_05->setParameterOffset(this->getParameterOffset(this->p_05));
        this->p_06 = new RNBOSubpatcher_1030();
        this->p_06->setEngineAndPatcher(this->getEngine(), this);
        this->p_06->initialize();
        this->p_06->setParameterOffset(this->getParameterOffset(this->p_06));
        this->p_07 = new RNBOSubpatcher_1031();
        this->p_07->setEngineAndPatcher(this->getEngine(), this);
        this->p_07->initialize();
        this->p_07->setParameterOffset(this->getParameterOffset(this->p_07));
        this->p_08 = new RNBOSubpatcher_1032();
        this->p_08->setEngineAndPatcher(this->getEngine(), this);
        this->p_08->initialize();
        this->p_08->setParameterOffset(this->getParameterOffset(this->p_08));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_01_getPresetValue(getSubState(preset, "decay"));
        this->param_02_getPresetValue(getSubState(preset, "mix"));
        this->param_03_getPresetValue(getSubState(preset, "jitter"));
        this->param_04_getPresetValue(getSubState(preset, "damp"));
        this->param_05_getPresetValue(getSubState(preset, "size"));
        this->param_06_getPresetValue(getSubState(preset, "diff"));
        this->p_01->getPreset(getSubState(getSubState(preset, "__sps"), "Mix~"));
        this->p_02->getPreset(getSubState(getSubState(preset, "__sps"), "CombL~"));
        this->p_03->getPreset(getSubState(getSubState(preset, "__sps"), "Shuffle~"));
        this->p_04->getPreset(getSubState(getSubState(preset, "__sps"), "Blur~"));
        this->p_05->getPreset(getSubState(getSubState(preset, "__sps"), "RoomA~"));
        this->p_06->getPreset(getSubState(getSubState(preset, "__sps"), "Damp~"));
        this->p_07->getPreset(getSubState(getSubState(preset, "__sps"), "RoomB~"));
        this->p_08->getPreset(getSubState(getSubState(preset, "__sps"), "CombR~"));
    }
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_01->processTempoEvent(time, tempo);
        this->p_02->processTempoEvent(time, tempo);
        this->p_03->processTempoEvent(time, tempo);
        this->p_04->processTempoEvent(time, tempo);
        this->p_05->processTempoEvent(time, tempo);
        this->p_06->processTempoEvent(time, tempo);
        this->p_07->processTempoEvent(time, tempo);
        this->p_08->processTempoEvent(time, tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_01->processTransportEvent(time, state);
        this->p_02->processTransportEvent(time, state);
        this->p_03->processTransportEvent(time, state);
        this->p_04->processTransportEvent(time, state);
        this->p_05->processTransportEvent(time, state);
        this->p_06->processTransportEvent(time, state);
        this->p_07->processTransportEvent(time, state);
        this->p_08->processTransportEvent(time, state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_01->processBeatTimeEvent(time, beattime);
        this->p_02->processBeatTimeEvent(time, beattime);
        this->p_03->processBeatTimeEvent(time, beattime);
        this->p_04->processBeatTimeEvent(time, beattime);
        this->p_05->processBeatTimeEvent(time, beattime);
        this->p_06->processBeatTimeEvent(time, beattime);
        this->p_07->processBeatTimeEvent(time, beattime);
        this->p_08->processBeatTimeEvent(time, beattime);
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_01->processTimeSignatureEvent(time, numerator, denominator);
        this->p_02->processTimeSignatureEvent(time, numerator, denominator);
        this->p_03->processTimeSignatureEvent(time, numerator, denominator);
        this->p_04->processTimeSignatureEvent(time, numerator, denominator);
        this->p_05->processTimeSignatureEvent(time, numerator, denominator);
        this->p_06->processTimeSignatureEvent(time, numerator, denominator);
        this->p_07->processTimeSignatureEvent(time, numerator, denominator);
        this->p_08->processTimeSignatureEvent(time, numerator, denominator);
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            this->param_01_value_set(v);
            break;
        case 1:
            this->param_02_value_set(v);
            break;
        case 2:
            this->param_03_value_set(v);
            break;
        case 3:
            this->param_04_value_set(v);
            break;
        case 4:
            this->param_05_value_set(v);
            break;
        case 5:
            this->param_06_value_set(v);
            break;
        case 6:
            this->numberobj_01_value_set(v);
            break;
        case 7:
            this->numberobj_02_value_set(v);
            break;
        case 8:
            this->numberobj_03_value_set(v);
            break;
        case 9:
            this->numberobj_04_value_set(v);
            break;
        case 10:
            this->numberobj_05_value_set(v);
            break;
        case 11:
            this->numberobj_06_value_set(v);
            break;
        case 12:
            this->numberobj_07_value_set(v);
            break;
        case 13:
            this->numberobj_08_value_set(v);
            break;
        case 14:
            this->numberobj_09_value_set(v);
            break;
        case 15:
            this->numberobj_10_value_set(v);
            break;
        case 16:
            this->numberobj_11_value_set(v);
            break;
        case 17:
            this->numberobj_12_value_set(v);
            break;
        default:
            index -= 18;
    
            if (index < this->p_01->getNumParameters())
                this->p_01->setParameterValue(index, v, time);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                this->p_02->setParameterValue(index, v, time);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                this->p_03->setParameterValue(index, v, time);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                this->p_04->setParameterValue(index, v, time);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                this->p_05->setParameterValue(index, v, time);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                this->p_06->setParameterValue(index, v, time);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                this->p_07->setParameterValue(index, v, time);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                this->p_08->setParameterValue(index, v, time);
    
            break;
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            return this->param_01_value;
        case 1:
            return this->param_02_value;
        case 2:
            return this->param_03_value;
        case 3:
            return this->param_04_value;
        case 4:
            return this->param_05_value;
        case 5:
            return this->param_06_value;
        case 6:
            return this->numberobj_01_value;
        case 7:
            return this->numberobj_02_value;
        case 8:
            return this->numberobj_03_value;
        case 9:
            return this->numberobj_04_value;
        case 10:
            return this->numberobj_05_value;
        case 11:
            return this->numberobj_06_value;
        case 12:
            return this->numberobj_07_value;
        case 13:
            return this->numberobj_08_value;
        case 14:
            return this->numberobj_09_value;
        case 15:
            return this->numberobj_10_value;
        case 16:
            return this->numberobj_11_value;
        case 17:
            return this->numberobj_12_value;
        default:
            index -= 18;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterValue(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterValue(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterValue(index);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterValue(index);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterValue(index);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterValue(index);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterValue(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterValue(index);
    
            return 0;
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 5;
    }
    
    ParameterIndex getNumParameters() const {
        return 18 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters() + this->p_04->getNumParameters() + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "decay";
        case 1:
            return "mix";
        case 2:
            return "jitter";
        case 3:
            return "damp";
        case 4:
            return "size";
        case 5:
            return "diff";
        case 6:
            return "numberobj_01_value";
        case 7:
            return "numberobj_02_value";
        case 8:
            return "numberobj_03_value";
        case 9:
            return "numberobj_04_value";
        case 10:
            return "numberobj_05_value";
        case 11:
            return "numberobj_06_value";
        case 12:
            return "numberobj_07_value";
        case 13:
            return "numberobj_08_value";
        case 14:
            return "numberobj_09_value";
        case 15:
            return "numberobj_10_value";
        case 16:
            return "numberobj_11_value";
        case 17:
            return "numberobj_12_value";
        default:
            index -= 18;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterName(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterName(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterName(index);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterName(index);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterName(index);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterName(index);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterName(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterName(index);
    
            return "bogus";
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "patcher_obj-15/decay";
        case 1:
            return "patcher_obj-15/mix";
        case 2:
            return "patcher_obj-15/jitter";
        case 3:
            return "patcher_obj-15/damp";
        case 4:
            return "patcher_obj-15/size";
        case 5:
            return "patcher_obj-15/diff";
        case 6:
            return "patcher_obj-15/number_obj-26/value";
        case 7:
            return "patcher_obj-15/number_obj-2/value";
        case 8:
            return "patcher_obj-15/number_obj-119/value";
        case 9:
            return "patcher_obj-15/number_obj-67/value";
        case 10:
            return "patcher_obj-15/number_obj-3/value";
        case 11:
            return "patcher_obj-15/number_obj-54/value";
        case 12:
            return "patcher_obj-15/number_obj-4/value";
        case 13:
            return "patcher_obj-15/number_obj-9/value";
        case 14:
            return "patcher_obj-15/number_obj-21/value";
        case 15:
            return "patcher_obj-15/number_obj-23/value";
        case 16:
            return "patcher_obj-15/number_obj-16/value";
        case 17:
            return "patcher_obj-15/number_obj-18/value";
        default:
            index -= 18;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterId(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterId(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterId(index);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterId(index);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterId(index);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterId(index);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterId(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterId(index);
    
            return "bogus";
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Decay";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 1:
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Mix";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 2:
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Jitter";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 3:
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Damp";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 4:
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Size";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 5:
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Diff";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 6:
                info->type = ParameterTypeNumber;
                info->initialValue = 0.52;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 7:
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 8:
                info->type = ParameterTypeNumber;
                info->initialValue = 0.6;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 9:
                info->type = ParameterTypeNumber;
                info->initialValue = 19.999003208318815;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 10:
                info->type = ParameterTypeNumber;
                info->initialValue = 60;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 11:
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 12:
                info->type = ParameterTypeNumber;
                info->initialValue = 2713.7017003957862;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 13:
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 14:
                info->type = ParameterTypeNumber;
                info->initialValue = 0.805;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 15:
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 16:
                info->type = ParameterTypeNumber;
                info->initialValue = 0.5;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 17:
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            default:
                index -= 18;
    
                if (index < this->p_01->getNumParameters())
                    this->p_01->getParameterInfo(index, info);
    
                index -= this->p_01->getNumParameters();
    
                if (index < this->p_02->getNumParameters())
                    this->p_02->getParameterInfo(index, info);
    
                index -= this->p_02->getNumParameters();
    
                if (index < this->p_03->getNumParameters())
                    this->p_03->getParameterInfo(index, info);
    
                index -= this->p_03->getNumParameters();
    
                if (index < this->p_04->getNumParameters())
                    this->p_04->getParameterInfo(index, info);
    
                index -= this->p_04->getNumParameters();
    
                if (index < this->p_05->getNumParameters())
                    this->p_05->getParameterInfo(index, info);
    
                index -= this->p_05->getNumParameters();
    
                if (index < this->p_06->getNumParameters())
                    this->p_06->getParameterInfo(index, info);
    
                index -= this->p_06->getNumParameters();
    
                if (index < this->p_07->getNumParameters())
                    this->p_07->getParameterInfo(index, info);
    
                index -= this->p_07->getNumParameters();
    
                if (index < this->p_08->getNumParameters())
                    this->p_08->getParameterInfo(index, info);
    
                break;
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_01)
            return 18;
    
        if (subpatcher == this->p_02)
            return 18 + this->p_01->getNumParameters();
    
        if (subpatcher == this->p_03)
            return 18 + this->p_01->getNumParameters() + this->p_02->getNumParameters();
    
        if (subpatcher == this->p_04)
            return 18 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters();
    
        if (subpatcher == this->p_05)
            return 18 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters() + this->p_04->getNumParameters();
    
        if (subpatcher == this->p_06)
            return 18 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters() + this->p_04->getNumParameters() + this->p_05->getNumParameters();
    
        if (subpatcher == this->p_07)
            return 18 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters() + this->p_04->getNumParameters() + this->p_05->getNumParameters() + this->p_06->getNumParameters();
    
        if (subpatcher == this->p_08)
            return 18 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters() + this->p_04->getNumParameters() + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 6:
        case 8:
        case 9:
        case 12:
        case 14:
        case 16:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0) / (1 - 0);
                return normalizedValue;
            }
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 10:
        case 11:
        case 13:
        case 15:
        case 17:
            {
                value = (value < 0 ? 0 : (value > 100 ? 100 : value));
                ParameterValue normalizedValue = (value - 0) / (100 - 0);
                return normalizedValue;
            }
        default:
            index -= 18;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->convertToNormalizedParameterValue(index, value);
    
            return value;
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 6:
        case 8:
        case 9:
        case 12:
        case 14:
        case 16:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
                {
                    return 0 + value * (1 - 0);
                }
            }
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 10:
        case 11:
        case 13:
        case 15:
        case 17:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
                {
                    return 0 + value * (100 - 0);
                }
            }
        default:
            index -= 18;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->convertFromNormalizedParameterValue(index, value);
    
            return value;
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            return this->param_01_value_constrain(value);
        case 1:
            return this->param_02_value_constrain(value);
        case 2:
            return this->param_03_value_constrain(value);
        case 3:
            return this->param_04_value_constrain(value);
        case 4:
            return this->param_05_value_constrain(value);
        case 5:
            return this->param_06_value_constrain(value);
        default:
            index -= 18;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->constrainParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->constrainParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->constrainParameterValue(index, value);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->constrainParameterValue(index, value);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->constrainParameterValue(index, value);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->constrainParameterValue(index, value);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->constrainParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->constrainParameterValue(index, value);
    
            return value;
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 378255229:
            this->line_01_target_bang();
            break;
        case 760652352:
            this->line_02_target_bang();
            break;
        case -798469121:
            this->line_03_target_bang();
            break;
        case 1554979579:
            this->line_04_target_bang();
            break;
        case 1937376702:
            this->line_05_target_bang();
            break;
        case -1180866244:
            this->line_06_target_bang();
            break;
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("format"):
            if (TAG("patcher_obj-15/number_obj-26") == objectId)
                this->numberobj_01_format_set(payload);
    
            if (TAG("patcher_obj-15/number_obj-2") == objectId)
                this->numberobj_02_format_set(payload);
    
            if (TAG("patcher_obj-15/number_obj-119") == objectId)
                this->numberobj_03_format_set(payload);
    
            if (TAG("patcher_obj-15/number_obj-67") == objectId)
                this->numberobj_04_format_set(payload);
    
            if (TAG("patcher_obj-15/number_obj-3") == objectId)
                this->numberobj_05_format_set(payload);
    
            if (TAG("patcher_obj-15/number_obj-54") == objectId)
                this->numberobj_06_format_set(payload);
    
            if (TAG("patcher_obj-15/number_obj-4") == objectId)
                this->numberobj_07_format_set(payload);
    
            if (TAG("patcher_obj-15/number_obj-9") == objectId)
                this->numberobj_08_format_set(payload);
    
            if (TAG("patcher_obj-15/number_obj-21") == objectId)
                this->numberobj_09_format_set(payload);
    
            if (TAG("patcher_obj-15/number_obj-23") == objectId)
                this->numberobj_10_format_set(payload);
    
            if (TAG("patcher_obj-15/number_obj-16") == objectId)
                this->numberobj_11_format_set(payload);
    
            if (TAG("patcher_obj-15/number_obj-18") == objectId)
                this->numberobj_12_format_set(payload);
    
            break;
        }
    
        this->p_01->processNumMessage(tag, objectId, time, payload);
        this->p_02->processNumMessage(tag, objectId, time, payload);
        this->p_03->processNumMessage(tag, objectId, time, payload);
        this->p_04->processNumMessage(tag, objectId, time, payload);
        this->p_05->processNumMessage(tag, objectId, time, payload);
        this->p_06->processNumMessage(tag, objectId, time, payload);
        this->p_07->processNumMessage(tag, objectId, time, payload);
        this->p_08->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_01->processListMessage(tag, objectId, time, payload);
        this->p_02->processListMessage(tag, objectId, time, payload);
        this->p_03->processListMessage(tag, objectId, time, payload);
        this->p_04->processListMessage(tag, objectId, time, payload);
        this->p_05->processListMessage(tag, objectId, time, payload);
        this->p_06->processListMessage(tag, objectId, time, payload);
        this->p_07->processListMessage(tag, objectId, time, payload);
        this->p_08->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_01->processBangMessage(tag, objectId, time);
        this->p_02->processBangMessage(tag, objectId, time);
        this->p_03->processBangMessage(tag, objectId, time);
        this->p_04->processBangMessage(tag, objectId, time);
        this->p_05->processBangMessage(tag, objectId, time);
        this->p_06->processBangMessage(tag, objectId, time);
        this->p_07->processBangMessage(tag, objectId, time);
        this->p_08->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("setup"):
            return "setup";
        case TAG("patcher_obj-15/number_obj-26"):
            return "patcher_obj-15/number_obj-26";
        case TAG("patcher_obj-15/number_obj-2"):
            return "patcher_obj-15/number_obj-2";
        case TAG("patcher_obj-15/number_obj-119"):
            return "patcher_obj-15/number_obj-119";
        case TAG("patcher_obj-15/number_obj-67"):
            return "patcher_obj-15/number_obj-67";
        case TAG("patcher_obj-15/number_obj-3"):
            return "patcher_obj-15/number_obj-3";
        case TAG("patcher_obj-15/number_obj-54"):
            return "patcher_obj-15/number_obj-54";
        case TAG("patcher_obj-15/number_obj-4"):
            return "patcher_obj-15/number_obj-4";
        case TAG("patcher_obj-15/number_obj-9"):
            return "patcher_obj-15/number_obj-9";
        case TAG("patcher_obj-15/number_obj-21"):
            return "patcher_obj-15/number_obj-21";
        case TAG("patcher_obj-15/number_obj-23"):
            return "patcher_obj-15/number_obj-23";
        case TAG("patcher_obj-15/number_obj-16"):
            return "patcher_obj-15/number_obj-16";
        case TAG("patcher_obj-15/number_obj-18"):
            return "patcher_obj-15/number_obj-18";
        case TAG("format"):
            return "format";
        }
    
        auto subpatchResult_0 = this->p_01->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_02->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_03->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        auto subpatchResult_3 = this->p_04->resolveTag(tag);
    
        if (subpatchResult_3)
            return subpatchResult_3;
    
        auto subpatchResult_4 = this->p_05->resolveTag(tag);
    
        if (subpatchResult_4)
            return subpatchResult_4;
    
        auto subpatchResult_5 = this->p_06->resolveTag(tag);
    
        if (subpatchResult_5)
            return subpatchResult_5;
    
        auto subpatchResult_6 = this->p_07->resolveTag(tag);
    
        if (subpatchResult_6)
            return subpatchResult_6;
    
        auto subpatchResult_7 = this->p_08->resolveTag(tag);
    
        if (subpatchResult_7)
            return subpatchResult_7;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            return nullptr;
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->p_01->processDataViewUpdate(index, time);
        this->p_02->processDataViewUpdate(index, time);
        this->p_03->processDataViewUpdate(index, time);
        this->p_04->processDataViewUpdate(index, time);
        this->p_05->processDataViewUpdate(index, time);
        this->p_06->processDataViewUpdate(index, time);
        this->p_07->processDataViewUpdate(index, time);
        this->p_08->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void param_01_value_set(number v) {
        v = this->param_01_value_constrain(v);
        this->param_01_value = v;
        this->sendParameter(0, false);
    
        if (this->param_01_value != this->param_01_lastValue) {
            this->getEngine()->presetTouched();
            this->param_01_lastValue = this->param_01_value;
        }
    
        this->numberobj_02_value_set(v);
    }
    
    void param_02_value_set(number v) {
        v = this->param_02_value_constrain(v);
        this->param_02_value = v;
        this->sendParameter(1, false);
    
        if (this->param_02_value != this->param_02_lastValue) {
            this->getEngine()->presetTouched();
            this->param_02_lastValue = this->param_02_value;
        }
    
        this->numberobj_05_value_set(v);
    }
    
    void param_03_value_set(number v) {
        v = this->param_03_value_constrain(v);
        this->param_03_value = v;
        this->sendParameter(2, false);
    
        if (this->param_03_value != this->param_03_lastValue) {
            this->getEngine()->presetTouched();
            this->param_03_lastValue = this->param_03_value;
        }
    
        this->numberobj_06_value_set(v);
    }
    
    void param_04_value_set(number v) {
        v = this->param_04_value_constrain(v);
        this->param_04_value = v;
        this->sendParameter(3, false);
    
        if (this->param_04_value != this->param_04_lastValue) {
            this->getEngine()->presetTouched();
            this->param_04_lastValue = this->param_04_value;
        }
    
        this->numberobj_08_value_set(v);
    }
    
    void param_05_value_set(number v) {
        v = this->param_05_value_constrain(v);
        this->param_05_value = v;
        this->sendParameter(4, false);
    
        if (this->param_05_value != this->param_05_lastValue) {
            this->getEngine()->presetTouched();
            this->param_05_lastValue = this->param_05_value;
        }
    
        this->numberobj_10_value_set(v);
    }
    
    void param_06_value_set(number v) {
        v = this->param_06_value_constrain(v);
        this->param_06_value = v;
        this->sendParameter(5, false);
    
        if (this->param_06_value != this->param_06_lastValue) {
            this->getEngine()->presetTouched();
            this->param_06_lastValue = this->param_06_value;
        }
    
        this->numberobj_12_value_set(v);
    }
    
    void numberobj_01_format_set(number v) {
        if (v == 0) {
            this->numberobj_01_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_01_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_01_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_01_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_01_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_01_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_01_currentFormat = 6;
        }
    }
    
    void numberobj_02_format_set(number v) {
        if (v == 0) {
            this->numberobj_02_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_02_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_02_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_02_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_02_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_02_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_02_currentFormat = 6;
        }
    }
    
    void numberobj_03_format_set(number v) {
        if (v == 0) {
            this->numberobj_03_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_03_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_03_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_03_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_03_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_03_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_03_currentFormat = 6;
        }
    }
    
    void numberobj_04_format_set(number v) {
        if (v == 0) {
            this->numberobj_04_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_04_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_04_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_04_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_04_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_04_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_04_currentFormat = 6;
        }
    }
    
    void numberobj_05_format_set(number v) {
        if (v == 0) {
            this->numberobj_05_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_05_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_05_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_05_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_05_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_05_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_05_currentFormat = 6;
        }
    }
    
    void numberobj_06_format_set(number v) {
        if (v == 0) {
            this->numberobj_06_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_06_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_06_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_06_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_06_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_06_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_06_currentFormat = 6;
        }
    }
    
    void numberobj_07_format_set(number v) {
        if (v == 0) {
            this->numberobj_07_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_07_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_07_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_07_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_07_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_07_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_07_currentFormat = 6;
        }
    }
    
    void numberobj_08_format_set(number v) {
        if (v == 0) {
            this->numberobj_08_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_08_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_08_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_08_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_08_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_08_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_08_currentFormat = 6;
        }
    }
    
    void numberobj_09_format_set(number v) {
        if (v == 0) {
            this->numberobj_09_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_09_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_09_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_09_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_09_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_09_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_09_currentFormat = 6;
        }
    }
    
    void numberobj_10_format_set(number v) {
        if (v == 0) {
            this->numberobj_10_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_10_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_10_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_10_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_10_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_10_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_10_currentFormat = 6;
        }
    }
    
    void numberobj_11_format_set(number v) {
        if (v == 0) {
            this->numberobj_11_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_11_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_11_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_11_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_11_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_11_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_11_currentFormat = 6;
        }
    }
    
    void numberobj_12_format_set(number v) {
        if (v == 0) {
            this->numberobj_12_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_12_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_12_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_12_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_12_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_12_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_12_currentFormat = 6;
        }
    }
    
    void line_01_target_bang() {}
    
    void line_02_target_bang() {}
    
    void line_03_target_bang() {}
    
    void line_04_target_bang() {}
    
    void line_05_target_bang() {}
    
    void line_06_target_bang() {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numberobj_01_init();
        this->numberobj_02_init();
        this->numberobj_03_init();
        this->numberobj_04_init();
        this->numberobj_05_init();
        this->numberobj_06_init();
        this->numberobj_07_init();
        this->numberobj_08_init();
        this->numberobj_09_init();
        this->numberobj_10_init();
        this->numberobj_11_init();
        this->numberobj_12_init();
        this->p_01->initializeObjects();
        this->p_02->initializeObjects();
        this->p_03->initializeObjects();
        this->p_04->initializeObjects();
        this->p_05->initializeObjects();
        this->p_06->initializeObjects();
        this->p_07->initializeObjects();
        this->p_08->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_01->startup();
        this->p_02->startup();
        this->p_03->startup();
        this->p_04->startup();
        this->p_05->startup();
        this->p_06->startup();
        this->p_07->startup();
        this->p_08->startup();
    
        {
            this->scheduleParamInit(0, 4);
        }
    
        {
            this->scheduleParamInit(1, 6);
        }
    
        {
            this->scheduleParamInit(2, 5);
        }
    
        {
            this->scheduleParamInit(3, 1);
        }
    
        {
            this->scheduleParamInit(4, 3);
        }
    
        {
            this->scheduleParamInit(5, 2);
        }
    }
    
    void allocateDataRefs() {
        this->p_01->allocateDataRefs();
        this->p_02->allocateDataRefs();
        this->p_03->allocateDataRefs();
        this->p_04->allocateDataRefs();
        this->p_05->allocateDataRefs();
        this->p_06->allocateDataRefs();
        this->p_07->allocateDataRefs();
        this->p_08->allocateDataRefs();
    }
    
    static number param_01_value_constrain(number v) {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void line_01_segments_set(const list& v) {
        this->line_01_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            SampleIndex currentTime = this->currentsampletime();
            number lastRampValue = this->line_01_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
            for (Index i = 0; i < this->line_01_activeRamps->length; i += 3) {
                rampEnd = this->line_01_activeRamps[(Index)(i + 2)];
    
                if (rampEnd > currentTime) {
                    this->line_01_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->line_01_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->line_01_activeRamps[(Index)i] - valueDiff;
                    this->line_01_activeRamps[(Index)i] = lastRampValue;
                    this->line_01_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->line_01_activeRamps[(Index)i];
                }
            }
    
            if (rampEnd < currentTime) {
                this->line_01_activeRamps->push(lastRampValue);
                this->line_01_activeRamps->push(0);
                this->line_01_activeRamps->push(currentTime);
            }
    
            number lastRampEnd = currentTime;
    
            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;
    
                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
                } else {
                    rampTimeInSamples = this->mstosamps(this->line_01_time);
                }
    
                if (rampTimeInSamples <= 0)
                    rampTimeInSamples = 1;
    
                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->line_01_activeRamps->push(destinationValue);
                this->line_01_activeRamps->push(inc);
                this->line_01_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
    
    void numberobj_01_output_set(number v) {
        {
            list converted = {v};
            this->line_01_segments_set(converted);
        }
    }
    
    void numberobj_01_value_set(number v) {
        this->numberobj_01_value_setter(v);
        v = this->numberobj_01_value;
        this->sendParameter(6, false);
        this->numberobj_01_output_set(v);
    }
    
    void scale_01_out_set(const list& v) {
        this->scale_01_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_01_value_set(converted);
        }
    }
    
    void scale_01_input_set(const list& v) {
        this->scale_01_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_01_inlow,
                this->scale_01_inhigh,
                this->scale_01_outlow,
                this->scale_01_outhigh,
                this->scale_01_power
            ));
        }
    
        this->scale_01_out_set(tmp);
    }
    
    void numberobj_02_output_set(number v) {
        {
            list converted = {v};
            this->scale_01_input_set(converted);
        }
    }
    
    void numberobj_02_value_set(number v) {
        this->numberobj_02_value_setter(v);
        v = this->numberobj_02_value;
        this->sendParameter(7, false);
        this->numberobj_02_output_set(v);
    }
    
    static number param_02_value_constrain(number v) {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void line_02_segments_set(const list& v) {
        this->line_02_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            SampleIndex currentTime = this->currentsampletime();
            number lastRampValue = this->line_02_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
            for (Index i = 0; i < this->line_02_activeRamps->length; i += 3) {
                rampEnd = this->line_02_activeRamps[(Index)(i + 2)];
    
                if (rampEnd > currentTime) {
                    this->line_02_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->line_02_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->line_02_activeRamps[(Index)i] - valueDiff;
                    this->line_02_activeRamps[(Index)i] = lastRampValue;
                    this->line_02_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->line_02_activeRamps[(Index)i];
                }
            }
    
            if (rampEnd < currentTime) {
                this->line_02_activeRamps->push(lastRampValue);
                this->line_02_activeRamps->push(0);
                this->line_02_activeRamps->push(currentTime);
            }
    
            number lastRampEnd = currentTime;
    
            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;
    
                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
                } else {
                    rampTimeInSamples = this->mstosamps(this->line_02_time);
                }
    
                if (rampTimeInSamples <= 0)
                    rampTimeInSamples = 1;
    
                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->line_02_activeRamps->push(destinationValue);
                this->line_02_activeRamps->push(inc);
                this->line_02_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
    
    void numberobj_03_output_set(number v) {
        {
            list converted = {v};
            this->line_02_segments_set(converted);
        }
    }
    
    void numberobj_03_value_set(number v) {
        this->numberobj_03_value_setter(v);
        v = this->numberobj_03_value;
        this->sendParameter(8, false);
        this->numberobj_03_output_set(v);
    }
    
    void expr_02_out1_set(number v) {
        this->expr_02_out1 = v;
        this->numberobj_03_value_set(this->expr_02_out1);
    }
    
    void expr_02_in1_set(number in1) {
        this->expr_02_in1 = in1;
    
        this->expr_02_out1_set(
            (this->expr_02_in2 == 0 ? 0 : (this->expr_02_in2 == 0. ? 0. : this->expr_02_in1 / this->expr_02_in2))
        );//#map:patcher_obj-15//_obj-120:1
    }
    
    void numberobj_05_output_set(number v) {
        this->expr_02_in1_set(v);
    }
    
    void numberobj_05_value_set(number v) {
        this->numberobj_05_value_setter(v);
        v = this->numberobj_05_value;
        this->sendParameter(10, false);
        this->numberobj_05_output_set(v);
    }
    
    static number param_03_value_constrain(number v) {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void line_03_segments_set(const list& v) {
        this->line_03_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            SampleIndex currentTime = this->currentsampletime();
            number lastRampValue = this->line_03_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
            for (Index i = 0; i < this->line_03_activeRamps->length; i += 3) {
                rampEnd = this->line_03_activeRamps[(Index)(i + 2)];
    
                if (rampEnd > currentTime) {
                    this->line_03_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->line_03_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->line_03_activeRamps[(Index)i] - valueDiff;
                    this->line_03_activeRamps[(Index)i] = lastRampValue;
                    this->line_03_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->line_03_activeRamps[(Index)i];
                }
            }
    
            if (rampEnd < currentTime) {
                this->line_03_activeRamps->push(lastRampValue);
                this->line_03_activeRamps->push(0);
                this->line_03_activeRamps->push(currentTime);
            }
    
            number lastRampEnd = currentTime;
    
            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;
    
                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
                } else {
                    rampTimeInSamples = this->mstosamps(this->line_03_time);
                }
    
                if (rampTimeInSamples <= 0)
                    rampTimeInSamples = 1;
    
                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->line_03_activeRamps->push(destinationValue);
                this->line_03_activeRamps->push(inc);
                this->line_03_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
    
    void numberobj_04_output_set(number v) {
        {
            list converted = {v};
            this->line_03_segments_set(converted);
        }
    }
    
    void numberobj_04_value_set(number v) {
        this->numberobj_04_value_setter(v);
        v = this->numberobj_04_value;
        this->sendParameter(9, false);
        this->numberobj_04_output_set(v);
    }
    
    void scale_02_out_set(const list& v) {
        this->scale_02_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_04_value_set(converted);
        }
    }
    
    void scale_02_input_set(const list& v) {
        this->scale_02_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_02_inlow,
                this->scale_02_inhigh,
                this->scale_02_outlow,
                this->scale_02_outhigh,
                this->scale_02_power
            ));
        }
    
        this->scale_02_out_set(tmp);
    }
    
    void numberobj_06_output_set(number v) {
        {
            list converted = {v};
            this->scale_02_input_set(converted);
        }
    }
    
    void numberobj_06_value_set(number v) {
        this->numberobj_06_value_setter(v);
        v = this->numberobj_06_value;
        this->sendParameter(11, false);
        this->numberobj_06_output_set(v);
    }
    
    static number param_04_value_constrain(number v) {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void line_04_segments_set(const list& v) {
        this->line_04_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            SampleIndex currentTime = this->currentsampletime();
            number lastRampValue = this->line_04_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
            for (Index i = 0; i < this->line_04_activeRamps->length; i += 3) {
                rampEnd = this->line_04_activeRamps[(Index)(i + 2)];
    
                if (rampEnd > currentTime) {
                    this->line_04_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->line_04_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->line_04_activeRamps[(Index)i] - valueDiff;
                    this->line_04_activeRamps[(Index)i] = lastRampValue;
                    this->line_04_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->line_04_activeRamps[(Index)i];
                }
            }
    
            if (rampEnd < currentTime) {
                this->line_04_activeRamps->push(lastRampValue);
                this->line_04_activeRamps->push(0);
                this->line_04_activeRamps->push(currentTime);
            }
    
            number lastRampEnd = currentTime;
    
            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;
    
                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
                } else {
                    rampTimeInSamples = this->mstosamps(this->line_04_time);
                }
    
                if (rampTimeInSamples <= 0)
                    rampTimeInSamples = 1;
    
                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->line_04_activeRamps->push(destinationValue);
                this->line_04_activeRamps->push(inc);
                this->line_04_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
    
    void numberobj_07_output_set(number v) {
        {
            list converted = {v};
            this->line_04_segments_set(converted);
        }
    }
    
    void numberobj_07_value_set(number v) {
        this->numberobj_07_value_setter(v);
        v = this->numberobj_07_value;
        this->sendParameter(12, false);
        this->numberobj_07_output_set(v);
    }
    
    void scale_03_out_set(const list& v) {
        this->scale_03_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_07_value_set(converted);
        }
    }
    
    void scale_03_input_set(const list& v) {
        this->scale_03_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_03_inlow,
                this->scale_03_inhigh,
                this->scale_03_outlow,
                this->scale_03_outhigh,
                this->scale_03_power
            ));
        }
    
        this->scale_03_out_set(tmp);
    }
    
    void numberobj_08_output_set(number v) {
        {
            list converted = {v};
            this->scale_03_input_set(converted);
        }
    }
    
    void numberobj_08_value_set(number v) {
        this->numberobj_08_value_setter(v);
        v = this->numberobj_08_value;
        this->sendParameter(13, false);
        this->numberobj_08_output_set(v);
    }
    
    static number param_05_value_constrain(number v) {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void line_06_segments_set(const list& v) {
        this->line_06_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            SampleIndex currentTime = this->currentsampletime();
            number lastRampValue = this->line_06_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
            for (Index i = 0; i < this->line_06_activeRamps->length; i += 3) {
                rampEnd = this->line_06_activeRamps[(Index)(i + 2)];
    
                if (rampEnd > currentTime) {
                    this->line_06_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->line_06_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->line_06_activeRamps[(Index)i] - valueDiff;
                    this->line_06_activeRamps[(Index)i] = lastRampValue;
                    this->line_06_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->line_06_activeRamps[(Index)i];
                }
            }
    
            if (rampEnd < currentTime) {
                this->line_06_activeRamps->push(lastRampValue);
                this->line_06_activeRamps->push(0);
                this->line_06_activeRamps->push(currentTime);
            }
    
            number lastRampEnd = currentTime;
    
            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;
    
                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
                } else {
                    rampTimeInSamples = this->mstosamps(this->line_06_time);
                }
    
                if (rampTimeInSamples <= 0)
                    rampTimeInSamples = 1;
    
                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->line_06_activeRamps->push(destinationValue);
                this->line_06_activeRamps->push(inc);
                this->line_06_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
    
    void numberobj_09_output_set(number v) {
        {
            list converted = {v};
            this->line_06_segments_set(converted);
        }
    }
    
    void numberobj_09_value_set(number v) {
        this->numberobj_09_value_setter(v);
        v = this->numberobj_09_value;
        this->sendParameter(14, false);
        this->numberobj_09_output_set(v);
    }
    
    void scale_04_out_set(const list& v) {
        this->scale_04_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_09_value_set(converted);
        }
    }
    
    void scale_04_input_set(const list& v) {
        this->scale_04_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_04_inlow,
                this->scale_04_inhigh,
                this->scale_04_outlow,
                this->scale_04_outhigh,
                this->scale_04_power
            ));
        }
    
        this->scale_04_out_set(tmp);
    }
    
    void numberobj_10_output_set(number v) {
        {
            list converted = {v};
            this->scale_04_input_set(converted);
        }
    }
    
    void numberobj_10_value_set(number v) {
        this->numberobj_10_value_setter(v);
        v = this->numberobj_10_value;
        this->sendParameter(15, false);
        this->numberobj_10_output_set(v);
    }
    
    static number param_06_value_constrain(number v) {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void line_05_segments_set(const list& v) {
        this->line_05_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            SampleIndex currentTime = this->currentsampletime();
            number lastRampValue = this->line_05_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
            for (Index i = 0; i < this->line_05_activeRamps->length; i += 3) {
                rampEnd = this->line_05_activeRamps[(Index)(i + 2)];
    
                if (rampEnd > currentTime) {
                    this->line_05_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->line_05_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->line_05_activeRamps[(Index)i] - valueDiff;
                    this->line_05_activeRamps[(Index)i] = lastRampValue;
                    this->line_05_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->line_05_activeRamps[(Index)i];
                }
            }
    
            if (rampEnd < currentTime) {
                this->line_05_activeRamps->push(lastRampValue);
                this->line_05_activeRamps->push(0);
                this->line_05_activeRamps->push(currentTime);
            }
    
            number lastRampEnd = currentTime;
    
            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;
    
                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
                } else {
                    rampTimeInSamples = this->mstosamps(this->line_05_time);
                }
    
                if (rampTimeInSamples <= 0)
                    rampTimeInSamples = 1;
    
                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->line_05_activeRamps->push(destinationValue);
                this->line_05_activeRamps->push(inc);
                this->line_05_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
    
    void numberobj_11_output_set(number v) {
        {
            list converted = {v};
            this->line_05_segments_set(converted);
        }
    }
    
    void numberobj_11_value_set(number v) {
        this->numberobj_11_value_setter(v);
        v = this->numberobj_11_value;
        this->sendParameter(16, false);
        this->numberobj_11_output_set(v);
    }
    
    void expr_07_out1_set(number v) {
        this->expr_07_out1 = v;
        this->numberobj_11_value_set(this->expr_07_out1);
    }
    
    void expr_07_in1_set(number in1) {
        this->expr_07_in1 = in1;
    
        this->expr_07_out1_set(
            (this->expr_07_in2 == 0 ? 0 : (this->expr_07_in2 == 0. ? 0. : this->expr_07_in1 / this->expr_07_in2))
        );//#map:patcher_obj-15//_obj-17:1
    }
    
    void numberobj_12_output_set(number v) {
        this->expr_07_in1_set(v);
    }
    
    void numberobj_12_value_set(number v) {
        this->numberobj_12_value_setter(v);
        v = this->numberobj_12_value;
        this->sendParameter(17, false);
        this->numberobj_12_output_set(v);
    }
    
    void ctlin_01_outchannel_set(number ) {}
    
    void ctlin_01_outcontroller_set(number ) {}
    
    void fromnormalized_01_output_set(number v) {
        this->param_01_value_set(v);
    }
    
    void fromnormalized_01_input_set(number v) {
        this->fromnormalized_01_output_set(this->fromnormalized(0, v));
    }
    
    void expr_01_out1_set(number v) {
        this->expr_01_out1 = v;
        this->fromnormalized_01_input_set(this->expr_01_out1);
    }
    
    void expr_01_in1_set(number in1) {
        this->expr_01_in1 = in1;
        this->expr_01_out1_set(this->expr_01_in1 * this->expr_01_in2);//#map:expr_01:1
    }
    
    void ctlin_01_value_set(number v) {
        this->expr_01_in1_set(v);
    }
    
    void ctlin_01_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_01_channel || this->ctlin_01_channel == -1) && (data[1] == this->ctlin_01_controller || this->ctlin_01_controller == -1)) {
            this->ctlin_01_outchannel_set(channel);
            this->ctlin_01_outcontroller_set(data[1]);
            this->ctlin_01_value_set(data[2]);
            this->ctlin_01_status = 0;
        }
    }
    
    void ctlin_02_outchannel_set(number ) {}
    
    void ctlin_02_outcontroller_set(number ) {}
    
    void fromnormalized_02_output_set(number v) {
        this->param_02_value_set(v);
    }
    
    void fromnormalized_02_input_set(number v) {
        this->fromnormalized_02_output_set(this->fromnormalized(1, v));
    }
    
    void expr_03_out1_set(number v) {
        this->expr_03_out1 = v;
        this->fromnormalized_02_input_set(this->expr_03_out1);
    }
    
    void expr_03_in1_set(number in1) {
        this->expr_03_in1 = in1;
        this->expr_03_out1_set(this->expr_03_in1 * this->expr_03_in2);//#map:expr_03:1
    }
    
    void ctlin_02_value_set(number v) {
        this->expr_03_in1_set(v);
    }
    
    void ctlin_02_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_02_channel || this->ctlin_02_channel == -1) && (data[1] == this->ctlin_02_controller || this->ctlin_02_controller == -1)) {
            this->ctlin_02_outchannel_set(channel);
            this->ctlin_02_outcontroller_set(data[1]);
            this->ctlin_02_value_set(data[2]);
            this->ctlin_02_status = 0;
        }
    }
    
    void ctlin_03_outchannel_set(number ) {}
    
    void ctlin_03_outcontroller_set(number ) {}
    
    void fromnormalized_03_output_set(number v) {
        this->param_03_value_set(v);
    }
    
    void fromnormalized_03_input_set(number v) {
        this->fromnormalized_03_output_set(this->fromnormalized(2, v));
    }
    
    void expr_04_out1_set(number v) {
        this->expr_04_out1 = v;
        this->fromnormalized_03_input_set(this->expr_04_out1);
    }
    
    void expr_04_in1_set(number in1) {
        this->expr_04_in1 = in1;
        this->expr_04_out1_set(this->expr_04_in1 * this->expr_04_in2);//#map:expr_04:1
    }
    
    void ctlin_03_value_set(number v) {
        this->expr_04_in1_set(v);
    }
    
    void ctlin_03_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_03_channel || this->ctlin_03_channel == -1) && (data[1] == this->ctlin_03_controller || this->ctlin_03_controller == -1)) {
            this->ctlin_03_outchannel_set(channel);
            this->ctlin_03_outcontroller_set(data[1]);
            this->ctlin_03_value_set(data[2]);
            this->ctlin_03_status = 0;
        }
    }
    
    void ctlin_04_outchannel_set(number ) {}
    
    void ctlin_04_outcontroller_set(number ) {}
    
    void fromnormalized_04_output_set(number v) {
        this->param_04_value_set(v);
    }
    
    void fromnormalized_04_input_set(number v) {
        this->fromnormalized_04_output_set(this->fromnormalized(3, v));
    }
    
    void expr_05_out1_set(number v) {
        this->expr_05_out1 = v;
        this->fromnormalized_04_input_set(this->expr_05_out1);
    }
    
    void expr_05_in1_set(number in1) {
        this->expr_05_in1 = in1;
        this->expr_05_out1_set(this->expr_05_in1 * this->expr_05_in2);//#map:expr_05:1
    }
    
    void ctlin_04_value_set(number v) {
        this->expr_05_in1_set(v);
    }
    
    void ctlin_04_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_04_channel || this->ctlin_04_channel == -1) && (data[1] == this->ctlin_04_controller || this->ctlin_04_controller == -1)) {
            this->ctlin_04_outchannel_set(channel);
            this->ctlin_04_outcontroller_set(data[1]);
            this->ctlin_04_value_set(data[2]);
            this->ctlin_04_status = 0;
        }
    }
    
    void ctlin_05_outchannel_set(number ) {}
    
    void ctlin_05_outcontroller_set(number ) {}
    
    void fromnormalized_05_output_set(number v) {
        this->param_05_value_set(v);
    }
    
    void fromnormalized_05_input_set(number v) {
        this->fromnormalized_05_output_set(this->fromnormalized(4, v));
    }
    
    void expr_06_out1_set(number v) {
        this->expr_06_out1 = v;
        this->fromnormalized_05_input_set(this->expr_06_out1);
    }
    
    void expr_06_in1_set(number in1) {
        this->expr_06_in1 = in1;
        this->expr_06_out1_set(this->expr_06_in1 * this->expr_06_in2);//#map:expr_06:1
    }
    
    void ctlin_05_value_set(number v) {
        this->expr_06_in1_set(v);
    }
    
    void ctlin_05_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_05_channel || this->ctlin_05_channel == -1) && (data[1] == this->ctlin_05_controller || this->ctlin_05_controller == -1)) {
            this->ctlin_05_outchannel_set(channel);
            this->ctlin_05_outcontroller_set(data[1]);
            this->ctlin_05_value_set(data[2]);
            this->ctlin_05_status = 0;
        }
    }
    
    void ctlin_06_outchannel_set(number ) {}
    
    void ctlin_06_outcontroller_set(number ) {}
    
    void fromnormalized_06_output_set(number v) {
        this->param_06_value_set(v);
    }
    
    void fromnormalized_06_input_set(number v) {
        this->fromnormalized_06_output_set(this->fromnormalized(5, v));
    }
    
    void expr_08_out1_set(number v) {
        this->expr_08_out1 = v;
        this->fromnormalized_06_input_set(this->expr_08_out1);
    }
    
    void expr_08_in1_set(number in1) {
        this->expr_08_in1 = in1;
        this->expr_08_out1_set(this->expr_08_in1 * this->expr_08_in2);//#map:expr_08:1
    }
    
    void ctlin_06_value_set(number v) {
        this->expr_08_in1_set(v);
    }
    
    void ctlin_06_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_06_channel || this->ctlin_06_channel == -1) && (data[1] == this->ctlin_06_controller || this->ctlin_06_controller == -1)) {
            this->ctlin_06_outchannel_set(channel);
            this->ctlin_06_outcontroller_set(data[1]);
            this->ctlin_06_value_set(data[2]);
            this->ctlin_06_status = 0;
        }
    }
    
    void line_01_perform(Sample * out, Index n) {
        auto __line_01_currentValue = this->line_01_currentValue;
        Index i = 0;
    
        if ((bool)(this->line_01_activeRamps->length)) {
            while ((bool)(this->line_01_activeRamps->length) && i < n) {
                number destinationValue = this->line_01_activeRamps[0];
                number inc = this->line_01_activeRamps[1];
                number rampTimeInSamples = this->line_01_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __line_01_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->line_01_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->line_01_activeRamps->length))) this->getEngine()->scheduleClockEventWithValue(
                        this,
                        378255229,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;
                }
    
                __line_01_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __line_01_currentValue;
            i++;
        }
    
        this->line_01_currentValue = __line_01_currentValue;
    }
    
    void signalsend_01_perform(const Sample * input, Sample * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalreceive_05_perform(const Sample * receive, Sample * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = receive[(Index)i];
        }
    }
    
    void signalforwarder_01_perform(const Sample * input, Sample * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void line_02_perform(Sample * out, Index n) {
        auto __line_02_currentValue = this->line_02_currentValue;
        Index i = 0;
    
        if ((bool)(this->line_02_activeRamps->length)) {
            while ((bool)(this->line_02_activeRamps->length) && i < n) {
                number destinationValue = this->line_02_activeRamps[0];
                number inc = this->line_02_activeRamps[1];
                number rampTimeInSamples = this->line_02_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __line_02_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->line_02_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->line_02_activeRamps->length))) this->getEngine()->scheduleClockEventWithValue(
                        this,
                        760652352,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;
                }
    
                __line_02_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __line_02_currentValue;
            i++;
        }
    
        this->line_02_currentValue = __line_02_currentValue;
    }
    
    void line_03_perform(Sample * out, Index n) {
        auto __line_03_currentValue = this->line_03_currentValue;
        Index i = 0;
    
        if ((bool)(this->line_03_activeRamps->length)) {
            while ((bool)(this->line_03_activeRamps->length) && i < n) {
                number destinationValue = this->line_03_activeRamps[0];
                number inc = this->line_03_activeRamps[1];
                number rampTimeInSamples = this->line_03_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __line_03_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->line_03_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->line_03_activeRamps->length))) this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -798469121,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;
                }
    
                __line_03_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __line_03_currentValue;
            i++;
        }
    
        this->line_03_currentValue = __line_03_currentValue;
    }
    
    void signalsend_03_perform(const Sample * input, Sample * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalreceive_04_perform(const Sample * receive, Sample * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = receive[(Index)i];
        }
    }
    
    void signalforwarder_02_perform(const Sample * input, Sample * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void line_04_perform(Sample * out, Index n) {
        auto __line_04_currentValue = this->line_04_currentValue;
        Index i = 0;
    
        if ((bool)(this->line_04_activeRamps->length)) {
            while ((bool)(this->line_04_activeRamps->length) && i < n) {
                number destinationValue = this->line_04_activeRamps[0];
                number inc = this->line_04_activeRamps[1];
                number rampTimeInSamples = this->line_04_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __line_04_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->line_04_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->line_04_activeRamps->length))) this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1554979579,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;
                }
    
                __line_04_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __line_04_currentValue;
            i++;
        }
    
        this->line_04_currentValue = __line_04_currentValue;
    }
    
    void signalsend_02_perform(const Sample * input, Sample * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalreceive_03_perform(const Sample * receive, Sample * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = receive[(Index)i];
        }
    }
    
    void signalreceive_01_perform(const Sample * receive, Sample * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = receive[(Index)i];
        }
    }
    
    void p_06_perform(
        Sample * in1,
        Sample * in2,
        Sample * in3,
        Sample * out1,
        Sample * out2,
        Index n
    ) {
        // subpatcher: Damp~
        SampleArray<3> ins = {in1, in2, in3};
    
        SampleArray<2> outs = {out1, out2};
        this->p_06->process(ins, 3, outs, 2, n);
    }
    
    void p_04_perform(Sample * in1, Sample * in2, Sample * out1, Sample * out2, Index n) {
        // subpatcher: Blur~
        SampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_04->process(ins, 2, outs, 2, n);
    }
    
    void signalforwarder_03_perform(const Sample * input, Sample * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void line_05_perform(Sample * out, Index n) {
        auto __line_05_currentValue = this->line_05_currentValue;
        Index i = 0;
    
        if ((bool)(this->line_05_activeRamps->length)) {
            while ((bool)(this->line_05_activeRamps->length) && i < n) {
                number destinationValue = this->line_05_activeRamps[0];
                number inc = this->line_05_activeRamps[1];
                number rampTimeInSamples = this->line_05_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __line_05_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->line_05_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->line_05_activeRamps->length))) this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1937376702,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;
                }
    
                __line_05_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __line_05_currentValue;
            i++;
        }
    
        this->line_05_currentValue = __line_05_currentValue;
    }
    
    void signalsend_04_perform(const Sample * input, Sample * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalreceive_06_perform(const Sample * receive, Sample * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = receive[(Index)i];
        }
    }
    
    void signalforwarder_04_perform(const Sample * input, Sample * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void line_06_perform(Sample * out, Index n) {
        auto __line_06_currentValue = this->line_06_currentValue;
        Index i = 0;
    
        if ((bool)(this->line_06_activeRamps->length)) {
            while ((bool)(this->line_06_activeRamps->length) && i < n) {
                number destinationValue = this->line_06_activeRamps[0];
                number inc = this->line_06_activeRamps[1];
                number rampTimeInSamples = this->line_06_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __line_06_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->line_06_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->line_06_activeRamps->length))) this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1180866244,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;
                }
    
                __line_06_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __line_06_currentValue;
            i++;
        }
    
        this->line_06_currentValue = __line_06_currentValue;
    }
    
    void signalsend_05_perform(const Sample * input, Sample * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalreceive_02_perform(const Sample * receive, Sample * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = receive[(Index)i];
        }
    }
    
    void p_05_perform(
        Sample * in1,
        Sample * in2,
        Sample * in3,
        Sample * in4,
        Sample * in5,
        Sample * out1,
        Sample * out2,
        Sample * out3,
        Sample * out4,
        Index n
    ) {
        // subpatcher: RoomA~
        SampleArray<5> ins = {in1, in2, in3, in4, in5};
    
        SampleArray<4> outs = {out1, out2, out3, out4};
        this->p_05->process(ins, 5, outs, 4, n);
    }
    
    void p_07_perform(
        Sample * in1,
        Sample * in2,
        Sample * in3,
        Sample * in4,
        Sample * in5,
        Sample * out1,
        Sample * out2,
        Sample * out3,
        Sample * out4,
        Index n
    ) {
        // subpatcher: RoomB~
        SampleArray<5> ins = {in1, in2, in3, in4, in5};
    
        SampleArray<4> outs = {out1, out2, out3, out4};
        this->p_07->process(ins, 5, outs, 4, n);
    }
    
    void p_03_perform(
        Sample * in1,
        Sample * in2,
        Sample * in3,
        Sample * in4,
        Sample * in5,
        Sample * in6,
        Sample * in7,
        Sample * in8,
        Sample * out1,
        Sample * out2,
        Sample * out3,
        Sample * out4,
        Sample * out5,
        Sample * out6,
        Sample * out7,
        Sample * out8,
        Sample * out9,
        Sample * out10,
        Sample * out11,
        Sample * out12,
        Sample * out13,
        Sample * out14,
        Index n
    ) {
        // subpatcher: Shuffle~
        SampleArray<8> ins = {in1, in2, in3, in4, in5, in6, in7, in8};
    
        SampleArray<14> outs = {
            out1,
            out2,
            out3,
            out4,
            out5,
            out6,
            out7,
            out8,
            out9,
            out10,
            out11,
            out12,
            out13,
            out14
        };
    
        this->p_03->process(ins, 8, outs, 14, n);
    }
    
    void p_02_perform(
        Sample * in1,
        Sample * in2,
        Sample * in3,
        Sample * in4,
        Sample * in5,
        Sample * in6,
        Sample * in7,
        Sample * in8,
        Sample * in9,
        Sample * out1,
        Index n
    ) {
        // subpatcher: CombL~
        SampleArray<9> ins = {in1, in2, in3, in4, in5, in6, in7, in8, in9};
    
        SampleArray<1> outs = {out1};
        this->p_02->process(ins, 9, outs, 1, n);
    }
    
    void p_08_perform(
        Sample * in1,
        Sample * in2,
        Sample * in3,
        Sample * in4,
        Sample * in5,
        Sample * in6,
        Sample * in7,
        Sample * in8,
        Sample * in9,
        Sample * out1,
        Index n
    ) {
        // subpatcher: CombR~
        SampleArray<9> ins = {in1, in2, in3, in4, in5, in6, in7, in8, in9};
    
        SampleArray<1> outs = {out1};
        this->p_08->process(ins, 9, outs, 1, n);
    }
    
    void p_01_perform(
        Sample * in1,
        Sample * in2,
        Sample * in3,
        Sample * in4,
        Sample * in5,
        Sample * out1,
        Sample * out2,
        Index n
    ) {
        // subpatcher: Mix~
        SampleArray<5> ins = {in1, in2, in3, in4, in5};
    
        SampleArray<2> outs = {out1, out2};
        this->p_01->process(ins, 5, outs, 2, n);
    }
    
    void signalforwarder_05_perform(const Sample * input, Sample * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_01_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_01_value = localvalue;
    }
    
    void numberobj_02_value_setter(number v) {
        number localvalue = v;
    
        {
            if (localvalue < 0)
                localvalue = 0;
        }
    
        {
            if (localvalue > 100)
                localvalue = 100;
        }
    
        if (this->numberobj_02_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_02_value = localvalue;
    }
    
    void numberobj_03_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_03_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_03_value = localvalue;
    }
    
    void numberobj_04_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_04_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_04_value = localvalue;
    }
    
    void numberobj_05_value_setter(number v) {
        number localvalue = v;
    
        {
            if (localvalue < 0)
                localvalue = 0;
        }
    
        {
            if (localvalue > 100)
                localvalue = 100;
        }
    
        if (this->numberobj_05_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_05_value = localvalue;
    }
    
    void numberobj_06_value_setter(number v) {
        number localvalue = v;
    
        {
            if (localvalue < 0)
                localvalue = 0;
        }
    
        {
            if (localvalue > 100)
                localvalue = 100;
        }
    
        if (this->numberobj_06_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_06_value = localvalue;
    }
    
    void numberobj_07_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_07_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_07_value = localvalue;
    }
    
    void numberobj_08_value_setter(number v) {
        number localvalue = v;
    
        {
            if (localvalue < 0)
                localvalue = 0;
        }
    
        {
            if (localvalue > 100)
                localvalue = 100;
        }
    
        if (this->numberobj_08_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_08_value = localvalue;
    }
    
    void numberobj_09_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_09_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_09_value = localvalue;
    }
    
    void numberobj_10_value_setter(number v) {
        number localvalue = v;
    
        {
            if (localvalue < 0)
                localvalue = 0;
        }
    
        {
            if (localvalue > 100)
                localvalue = 100;
        }
    
        if (this->numberobj_10_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_10_value = localvalue;
    }
    
    void numberobj_11_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_11_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_11_value = localvalue;
    }
    
    void numberobj_12_value_setter(number v) {
        number localvalue = v;
    
        {
            if (localvalue < 0)
                localvalue = 0;
        }
    
        {
            if (localvalue > 100)
                localvalue = 100;
        }
    
        if (this->numberobj_12_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_12_value = localvalue;
    }
    
    void numberobj_01_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("patcher_obj-15/number_obj-26"), 1, this->_currentTime);
    }
    
    void numberobj_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_01_value;
    }
    
    void numberobj_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_01_value_set(preset["value"]);
    }
    
    void numberobj_02_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("patcher_obj-15/number_obj-2"), 1, this->_currentTime);
    }
    
    void numberobj_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_02_value;
    }
    
    void numberobj_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_02_value_set(preset["value"]);
    }
    
    void param_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_01_value;
    }
    
    void param_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_01_value_set(preset["value"]);
    }
    
    void numberobj_03_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("patcher_obj-15/number_obj-119"), 1, this->_currentTime);
    }
    
    void numberobj_03_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_03_value;
    }
    
    void numberobj_03_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_03_value_set(preset["value"]);
    }
    
    void numberobj_04_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("patcher_obj-15/number_obj-67"), 1, this->_currentTime);
    }
    
    void numberobj_04_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_04_value;
    }
    
    void numberobj_04_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_04_value_set(preset["value"]);
    }
    
    void numberobj_05_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("patcher_obj-15/number_obj-3"), 1, this->_currentTime);
    }
    
    void numberobj_05_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_05_value;
    }
    
    void numberobj_05_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_05_value_set(preset["value"]);
    }
    
    void param_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_02_value;
    }
    
    void param_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_02_value_set(preset["value"]);
    }
    
    void numberobj_06_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("patcher_obj-15/number_obj-54"), 1, this->_currentTime);
    }
    
    void numberobj_06_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_06_value;
    }
    
    void numberobj_06_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_06_value_set(preset["value"]);
    }
    
    void param_03_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_03_value;
    }
    
    void param_03_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_03_value_set(preset["value"]);
    }
    
    void numberobj_07_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("patcher_obj-15/number_obj-4"), 1, this->_currentTime);
    }
    
    void numberobj_07_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_07_value;
    }
    
    void numberobj_07_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_07_value_set(preset["value"]);
    }
    
    void numberobj_08_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("patcher_obj-15/number_obj-9"), 1, this->_currentTime);
    }
    
    void numberobj_08_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_08_value;
    }
    
    void numberobj_08_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_08_value_set(preset["value"]);
    }
    
    void param_04_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_04_value;
    }
    
    void param_04_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_04_value_set(preset["value"]);
    }
    
    void numberobj_09_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("patcher_obj-15/number_obj-21"), 1, this->_currentTime);
    }
    
    void numberobj_09_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_09_value;
    }
    
    void numberobj_09_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_09_value_set(preset["value"]);
    }
    
    void numberobj_10_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("patcher_obj-15/number_obj-23"), 1, this->_currentTime);
    }
    
    void numberobj_10_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_10_value;
    }
    
    void numberobj_10_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_10_value_set(preset["value"]);
    }
    
    void param_05_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_05_value;
    }
    
    void param_05_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_05_value_set(preset["value"]);
    }
    
    void numberobj_11_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("patcher_obj-15/number_obj-16"), 1, this->_currentTime);
    }
    
    void numberobj_11_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_11_value;
    }
    
    void numberobj_11_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_11_value_set(preset["value"]);
    }
    
    void numberobj_12_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("patcher_obj-15/number_obj-18"), 1, this->_currentTime);
    }
    
    void numberobj_12_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_12_value;
    }
    
    void numberobj_12_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_12_value_set(preset["value"]);
    }
    
    void param_06_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_06_value;
    }
    
    void param_06_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_06_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        p_01_target = 0;
        line_01_time = 50;
        numberobj_01_value = 0.52;
        numberobj_01_value_setter(numberobj_01_value);
        scale_01_inlow = 0;
        scale_01_inhigh = 100;
        scale_01_outlow = 0.05;
        scale_01_outhigh = 0.99;
        scale_01_power = 1;
        numberobj_02_value = 50;
        numberobj_02_value_setter(numberobj_02_value);
        param_01_value = 50;
        p_02_target = 0;
        p_03_target = 0;
        p_04_target = 0;
        p_05_target = 0;
        p_06_target = 0;
        p_07_target = 0;
        p_08_target = 0;
        numberobj_03_value = 0.6;
        numberobj_03_value_setter(numberobj_03_value);
        expr_02_in1 = 0;
        expr_02_in2 = 100;
        expr_02_out1 = 0;
        line_02_time = 10;
        numberobj_04_value = 19.999003208318815;
        numberobj_04_value_setter(numberobj_04_value);
        scale_02_inlow = 0;
        scale_02_inhigh = 100;
        scale_02_outlow = 0;
        scale_02_outhigh = 50;
        scale_02_power = 1.322;
        numberobj_05_value = 60;
        numberobj_05_value_setter(numberobj_05_value);
        param_02_value = 50;
        line_03_time = 50;
        numberobj_06_value = 50;
        numberobj_06_value_setter(numberobj_06_value);
        param_03_value = 50;
        line_04_time = 50;
        numberobj_07_value = 2713.7017003957862;
        numberobj_07_value_setter(numberobj_07_value);
        scale_03_inlow = 0;
        scale_03_inhigh = 100;
        scale_03_outlow = 12000;
        scale_03_outhigh = 300;
        scale_03_power = 0.333333;
        numberobj_08_value = 50;
        numberobj_08_value_setter(numberobj_08_value);
        param_04_value = 50;
        line_05_time = 50;
        line_06_time = 50;
        numberobj_09_value = 0.805;
        numberobj_09_value_setter(numberobj_09_value);
        scale_04_inlow = 0;
        scale_04_inhigh = 100;
        scale_04_outlow = 0.01;
        scale_04_outhigh = 1.6;
        scale_04_power = 1;
        numberobj_10_value = 50;
        numberobj_10_value_setter(numberobj_10_value);
        param_05_value = 50;
        numberobj_11_value = 0.5;
        numberobj_11_value_setter(numberobj_11_value);
        expr_07_in1 = 0;
        expr_07_in2 = 100;
        expr_07_out1 = 0;
        numberobj_12_value = 50;
        numberobj_12_value_setter(numberobj_12_value);
        param_06_value = 50;
        ctlin_01_input = 0;
        ctlin_01_controller = 4;
        ctlin_01_channel = -1;
        expr_01_in1 = 0;
        expr_01_in2 = 0.007874015748;
        expr_01_out1 = 0;
        ctlin_02_input = 0;
        ctlin_02_controller = 6;
        ctlin_02_channel = -1;
        expr_03_in1 = 0;
        expr_03_in2 = 0.007874015748;
        expr_03_out1 = 0;
        ctlin_03_input = 0;
        ctlin_03_controller = 5;
        ctlin_03_channel = -1;
        expr_04_in1 = 0;
        expr_04_in2 = 0.007874015748;
        expr_04_out1 = 0;
        ctlin_04_input = 0;
        ctlin_04_controller = 1;
        ctlin_04_channel = -1;
        expr_05_in1 = 0;
        expr_05_in2 = 0.007874015748;
        expr_05_out1 = 0;
        ctlin_05_input = 0;
        ctlin_05_controller = 3;
        ctlin_05_channel = -1;
        expr_06_in1 = 0;
        expr_06_in2 = 0.007874015748;
        expr_06_out1 = 0;
        ctlin_06_input = 0;
        ctlin_06_controller = 2;
        ctlin_06_channel = -1;
        expr_08_in1 = 0;
        expr_08_in2 = 0.007874015748;
        expr_08_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        signals[5] = nullptr;
        signals[6] = nullptr;
        signals[7] = nullptr;
        signals[8] = nullptr;
        signals[9] = nullptr;
        signals[10] = nullptr;
        signals[11] = nullptr;
        signals[12] = nullptr;
        signals[13] = nullptr;
        signals[14] = nullptr;
        signals[15] = nullptr;
        signals[16] = nullptr;
        signals[17] = nullptr;
        signals[18] = nullptr;
        signals[19] = nullptr;
        signals[20] = nullptr;
        signals[21] = nullptr;
        signals[22] = nullptr;
        signals[23] = nullptr;
        signals[24] = nullptr;
        signals[25] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        line_01_currentValue = 0;
        numberobj_01_currentFormat = 6;
        numberobj_01_lastValue = 0;
        numberobj_02_currentFormat = 6;
        numberobj_02_lastValue = 0;
        param_01_lastValue = 0;
        numberobj_03_currentFormat = 6;
        numberobj_03_lastValue = 0;
        line_02_currentValue = 0;
        numberobj_04_currentFormat = 6;
        numberobj_04_lastValue = 0;
        numberobj_05_currentFormat = 6;
        numberobj_05_lastValue = 0;
        param_02_lastValue = 0;
        line_03_currentValue = 0;
        numberobj_06_currentFormat = 6;
        numberobj_06_lastValue = 0;
        param_03_lastValue = 0;
        line_04_currentValue = 0;
        numberobj_07_currentFormat = 6;
        numberobj_07_lastValue = 0;
        numberobj_08_currentFormat = 6;
        numberobj_08_lastValue = 0;
        param_04_lastValue = 0;
        line_05_currentValue = 0;
        line_06_currentValue = 0;
        numberobj_09_currentFormat = 6;
        numberobj_09_lastValue = 0;
        numberobj_10_currentFormat = 6;
        numberobj_10_lastValue = 0;
        param_05_lastValue = 0;
        numberobj_11_currentFormat = 6;
        numberobj_11_lastValue = 0;
        numberobj_12_currentFormat = 6;
        numberobj_12_lastValue = 0;
        param_06_lastValue = 0;
        ctlin_01_status = 0;
        ctlin_01_byte1 = -1;
        ctlin_01_inchan = 0;
        ctlin_02_status = 0;
        ctlin_02_byte1 = -1;
        ctlin_02_inchan = 0;
        ctlin_03_status = 0;
        ctlin_03_byte1 = -1;
        ctlin_03_inchan = 0;
        ctlin_04_status = 0;
        ctlin_04_byte1 = -1;
        ctlin_04_inchan = 0;
        ctlin_05_status = 0;
        ctlin_05_byte1 = -1;
        ctlin_05_inchan = 0;
        ctlin_06_status = 0;
        ctlin_06_byte1 = -1;
        ctlin_06_inchan = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number p_01_target;
        list line_01_segments;
        number line_01_time;
        number numberobj_01_value;
        list scale_01_input;
        number scale_01_inlow;
        number scale_01_inhigh;
        number scale_01_outlow;
        number scale_01_outhigh;
        number scale_01_power;
        list scale_01_out;
        number numberobj_02_value;
        number param_01_value;
        number p_02_target;
        number p_03_target;
        number p_04_target;
        number p_05_target;
        number p_06_target;
        number p_07_target;
        number p_08_target;
        number numberobj_03_value;
        number expr_02_in1;
        number expr_02_in2;
        number expr_02_out1;
        list line_02_segments;
        number line_02_time;
        number numberobj_04_value;
        list scale_02_input;
        number scale_02_inlow;
        number scale_02_inhigh;
        number scale_02_outlow;
        number scale_02_outhigh;
        number scale_02_power;
        list scale_02_out;
        number numberobj_05_value;
        number param_02_value;
        list line_03_segments;
        number line_03_time;
        number numberobj_06_value;
        number param_03_value;
        list line_04_segments;
        number line_04_time;
        number numberobj_07_value;
        list scale_03_input;
        number scale_03_inlow;
        number scale_03_inhigh;
        number scale_03_outlow;
        number scale_03_outhigh;
        number scale_03_power;
        list scale_03_out;
        number numberobj_08_value;
        number param_04_value;
        list line_05_segments;
        number line_05_time;
        list line_06_segments;
        number line_06_time;
        number numberobj_09_value;
        list scale_04_input;
        number scale_04_inlow;
        number scale_04_inhigh;
        number scale_04_outlow;
        number scale_04_outhigh;
        number scale_04_power;
        list scale_04_out;
        number numberobj_10_value;
        number param_05_value;
        number numberobj_11_value;
        number expr_07_in1;
        number expr_07_in2;
        number expr_07_out1;
        number numberobj_12_value;
        number param_06_value;
        number ctlin_01_input;
        number ctlin_01_controller;
        number ctlin_01_channel;
        number expr_01_in1;
        number expr_01_in2;
        number expr_01_out1;
        number ctlin_02_input;
        number ctlin_02_controller;
        number ctlin_02_channel;
        number expr_03_in1;
        number expr_03_in2;
        number expr_03_out1;
        number ctlin_03_input;
        number ctlin_03_controller;
        number ctlin_03_channel;
        number expr_04_in1;
        number expr_04_in2;
        number expr_04_out1;
        number ctlin_04_input;
        number ctlin_04_controller;
        number ctlin_04_channel;
        number expr_05_in1;
        number expr_05_in2;
        number expr_05_out1;
        number ctlin_05_input;
        number ctlin_05_controller;
        number ctlin_05_channel;
        number expr_06_in1;
        number expr_06_in2;
        number expr_06_out1;
        number ctlin_06_input;
        number ctlin_06_controller;
        number ctlin_06_channel;
        number expr_08_in1;
        number expr_08_in2;
        number expr_08_out1;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[26];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        list line_01_activeRamps;
        number line_01_currentValue;
        Int numberobj_01_currentFormat;
        number numberobj_01_lastValue;
        Int numberobj_02_currentFormat;
        number numberobj_02_lastValue;
        number param_01_lastValue;
        Int numberobj_03_currentFormat;
        number numberobj_03_lastValue;
        list line_02_activeRamps;
        number line_02_currentValue;
        Int numberobj_04_currentFormat;
        number numberobj_04_lastValue;
        Int numberobj_05_currentFormat;
        number numberobj_05_lastValue;
        number param_02_lastValue;
        list line_03_activeRamps;
        number line_03_currentValue;
        Int numberobj_06_currentFormat;
        number numberobj_06_lastValue;
        number param_03_lastValue;
        list line_04_activeRamps;
        number line_04_currentValue;
        Int numberobj_07_currentFormat;
        number numberobj_07_lastValue;
        Int numberobj_08_currentFormat;
        number numberobj_08_lastValue;
        number param_04_lastValue;
        list line_05_activeRamps;
        number line_05_currentValue;
        list line_06_activeRamps;
        number line_06_currentValue;
        Int numberobj_09_currentFormat;
        number numberobj_09_lastValue;
        Int numberobj_10_currentFormat;
        number numberobj_10_lastValue;
        number param_05_lastValue;
        Int numberobj_11_currentFormat;
        number numberobj_11_lastValue;
        Int numberobj_12_currentFormat;
        number numberobj_12_lastValue;
        number param_06_lastValue;
        int ctlin_01_status;
        int ctlin_01_byte1;
        int ctlin_01_inchan;
        int ctlin_02_status;
        int ctlin_02_byte1;
        int ctlin_02_inchan;
        int ctlin_03_status;
        int ctlin_03_byte1;
        int ctlin_03_inchan;
        int ctlin_04_status;
        int ctlin_04_byte1;
        int ctlin_04_inchan;
        int ctlin_05_status;
        int ctlin_05_byte1;
        int ctlin_05_inchan;
        int ctlin_06_status;
        int ctlin_06_byte1;
        int ctlin_06_inchan;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_1025* p_01;
        RNBOSubpatcher_1026* p_02;
        RNBOSubpatcher_1027* p_03;
        RNBOSubpatcher_1028* p_04;
        RNBOSubpatcher_1029* p_05;
        RNBOSubpatcher_1030* p_06;
        RNBOSubpatcher_1031* p_07;
        RNBOSubpatcher_1032* p_08;
    
};

class RNBOSubpatcher_1052 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_1052()
    {
    }
    
    ~RNBOSubpatcher_1052()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, 892732297, false);
    }
    
    ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
        if (!stringCompare(paramid, "message_obj-38/bangval")) {
            return 0;
        }
    
        if (!stringCompare(paramid, "message_obj-40/bangval")) {
            return 1;
        }
    
        if (!stringCompare(paramid, "number_obj-23/value")) {
            return 2;
        }
    
        if (!stringCompare(paramid, "message_obj-42/bangval")) {
            return 3;
        }
    
        if (!stringCompare(paramid, "message_obj-45/bangval")) {
            return 4;
        }
    
        if (!stringCompare(paramid, "number_obj-20/value")) {
            return 5;
        }
    
        return INVALID_INDEX;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        SampleValue ** inputs,
        Index numInputs,
        SampleValue ** outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            this->setProbingIndex(-1);
            break;
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            this->message_01_bangval_bang();
            break;
        case 1:
            this->message_02_bangval_bang();
            break;
        case 2:
            this->numberobj_13_value_set(v);
            break;
        case 3:
            this->message_03_bangval_bang();
            break;
        case 4:
            this->message_04_bangval_bang();
            break;
        case 5:
            this->numberobj_14_value_set(v);
            break;
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 2:
            return this->numberobj_13_value;
        case 5:
            return this->numberobj_14_value;
        default:
            return 0;
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 6;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "message_01_bangval";
        case 1:
            return "message_02_bangval";
        case 2:
            return "numberobj_13_value";
        case 3:
            return "message_03_bangval";
        case 4:
            return "message_04_bangval";
        case 5:
            return "numberobj_14_value";
        default:
            return "bogus";
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "p_obj-10/message_obj-38/bangval";
        case 1:
            return "p_obj-10/message_obj-40/bangval";
        case 2:
            return "p_obj-10/number_obj-23/value";
        case 3:
            return "p_obj-10/message_obj-42/bangval";
        case 4:
            return "p_obj-10/message_obj-45/bangval";
        case 5:
            return "p_obj-10/number_obj-20/value";
        default:
            return "bogus";
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 1:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 2:
                info->type = ParameterTypeNumber;
                info->initialValue = 48;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 3:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 4:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 5:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 2:
        case 5:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0) / (1 - 0);
                return normalizedValue;
            }
        default:
            return value;
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 2:
        case 5:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
                {
                    return 0 + value * (1 - 0);
                }
            }
        default:
            return value;
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            return value;
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -871642103:
            this->loadbang_01_startupbang_bang();
            break;
        case 892732297:
            this->loadmess_01_startupbang_bang();
            break;
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("format"):
            if (TAG("p_obj-10/number_obj-23") == objectId)
                this->numberobj_13_format_set(payload);
    
            if (TAG("p_obj-10/number_obj-20") == objectId)
                this->numberobj_14_format_set(payload);
    
            break;
        }
    }
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            if (TAG("p_obj-10/loadbang_obj-25") == objectId)
                this->loadbang_01_startupbang_bang();
    
            if (TAG("p_obj-10/loadmess_obj-18") == objectId)
                this->loadmess_01_startupbang_bang();
    
            break;
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("setup"):
            return "setup";
        case TAG("p_obj-10/number_obj-23"):
            return "p_obj-10/number_obj-23";
        case TAG("p_obj-10/number_obj-20"):
            return "p_obj-10/number_obj-20";
        case TAG("format"):
            return "format";
        case TAG("startupbang"):
            return "startupbang";
        case TAG("p_obj-10/loadbang_obj-25"):
            return "p_obj-10/loadbang_obj-25";
        case TAG("p_obj-10/loadmess_obj-18"):
            return "p_obj-10/loadmess_obj-18";
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            return nullptr;
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_01_out1_bang_bang() {
        this->trigger_02_input_bang_bang();
        this->expr_09_in1_bang();
    }
    
    void eventinlet_01_out1_list_set(const list& v) {
        this->trigger_02_input_list_set(v);
    
        {
            if (v->length > 1)
                this->expr_09_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_09_in1_set(converted);
        }
    }
    
    void numberobj_13_format_set(number v) {
        if (v == 0) {
            this->numberobj_13_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_13_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_13_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_13_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_13_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_13_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_13_currentFormat = 6;
        }
    }
    
    void loadbang_01_startupbang_bang() {
        this->loadbang_01_output_bang();
    }
    
    void numberobj_14_format_set(number v) {
        if (v == 0) {
            this->numberobj_14_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_14_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_14_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_14_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_14_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_14_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_14_currentFormat = 6;
        }
    }
    
    void eventinlet_02_out1_bang_bang() {
        this->counter_01_input_bang();
    }
    
    void eventinlet_02_out1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->counter_01_input_bang();
    }
    
    void loadmess_01_startupbang_bang() {
        this->loadmess_01_message_bang();
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->numberobj_13_init();
        this->numberobj_14_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
    }
    
    void allocateDataRefs() {}
    
    void gate_01_onoff_set(number v) {
        this->gate_01_onoff = v;
    }
    
    void expr_10_out1_set(number v) {
        this->expr_10_out1 = v;
        this->gate_01_onoff_set(this->expr_10_out1);
    }
    
    void expr_10_in1_set(number in1) {
        this->expr_10_in1 = in1;
        this->expr_10_out1_set(1 - this->expr_10_in1);//#map:p_obj-10/expr_obj-21:1
    }
    
    void receive_02_output_number_set(number v) {
        this->receive_02_output_number = v;
        this->expr_10_in1_set(v);
    }
    
    void numberobj_14_output_set(number ) {}
    
    void numberobj_14_value_set(number v) {
        this->numberobj_14_value_setter(v);
        v = this->numberobj_14_value;
        this->sendParameter(5, false);
        this->numberobj_14_output_set(v);
    }
    
    void numberobj_13_output_set(number ) {}
    
    void numberobj_13_value_set(number v) {
        this->numberobj_13_value_setter(v);
        v = this->numberobj_13_value;
        this->sendParameter(2, false);
        this->numberobj_13_output_set(v);
    }
    
    void eventoutlet_01_in1_list_set(const list& v) {
        this->getPatcher()->p_27_out1_list_set((list)v);
    }
    
    void listlookup_01_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_13_value_set(converted);
        }
    
        this->eventoutlet_01_in1_list_set(v);
    }
    
    void listlookup_01_input_set(const list& v) {
        this->listlookup_01_input = jsCreateListCopy(v);
        list tmp = list();
    
        for (Index i = 0; i < v->length; i++) {
            long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
    
            if (j >= 0 && (Index)(j) < this->listlookup_01_lookup->length)
                tmp->push(this->listlookup_01_lookup[(Index)j]);
        }
    
        if ((bool)(tmp->length))
            this->listlookup_01_out_set(tmp);
    }
    
    void counter_01_output_set(number v) {
        this->counter_01_output = v;
        this->numberobj_14_value_set(v);
    
        {
            list converted = {v};
            this->listlookup_01_input_set(converted);
        }
    }
    
    void counter_01_overflow_bang_bang() {}
    
    static number counter_01_overflow_number_constrain(number v) {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_01_overflow_number_set(number v) {
        v = this->counter_01_overflow_number_constrain(v);
        this->counter_01_overflow_number = v;
    }
    
    void counter_01_carry_set(number v) {
        this->counter_01_carry = v;
    }
    
    void counter_01_underflow_bang_bang() {}
    
    static number counter_01_underflow_number_constrain(number v) {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_01_underflow_number_set(number v) {
        v = this->counter_01_underflow_number_constrain(v);
        this->counter_01_underflow_number = v;
    }
    
    void counter_01_resetnow_set(number v) {
        this->counter_01_resetnow = v;
        this->counter_01_count = v;
        this->counter_01_input();
    }
    
    void receive_04_output_list_set(const list& v) {
        this->receive_04_output_list = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_01_resetnow_set(converted);
        }
    }
    
    void counter_01_input_bang() {
        this->counter_01_output_set(this->counter_01_count);
        this->counter_01_inc();
    
        if (this->counter_01_count > this->counter_01_maximum) {
            if (this->counter_01_direction == 2) {
                this->counter_01_phase = !(bool)(this->counter_01_phase);
                this->counter_01_count = this->counter_01_maximum;
                this->counter_01_inc();
            } else
                this->counter_01_count = this->counter_01_minimum;
    
            if ((bool)(!(bool)(this->counter_01_overflow_number))) {
                if (this->counter_01_carryflag == 1)
                    this->counter_01_overflow_bang_bang();
                else
                    this->counter_01_overflow_number_set(1);
            }
    
            this->counter_01_carry_set(this->counter_01_carry + 1);
        } else if ((bool)(this->counter_01_overflow_number) && this->counter_01_carryflag == 0)
            this->counter_01_overflow_number_set(0);
    
        if (this->counter_01_count < this->counter_01_minimum) {
            if (this->counter_01_direction == 2) {
                this->counter_01_phase = !(bool)(this->counter_01_phase);
                this->counter_01_count = this->counter_01_minimum;
                this->counter_01_inc();
            } else
                this->counter_01_count = this->counter_01_maximum;
    
            if ((bool)(!(bool)(this->counter_01_underflow_number))) {
                if (this->counter_01_carryflag == 1)
                    this->counter_01_underflow_bang_bang();
                else
                    this->counter_01_underflow_number_set(1);
            }
    
            this->counter_01_carry_set(this->counter_01_carry + 1);
        } else if ((bool)(this->counter_01_underflow_number) && this->counter_01_carryflag == 0)
            this->counter_01_underflow_number_set(0);
    }
    
    void eventinlet_02_out1_number_set(number v) {
        RNBO_UNUSED(v);
        this->counter_01_input_bang();
    }
    
    void expr_11_in2_set(number v) {
        this->expr_11_in2 = v;
    }
    
    void trigger_01_out2_set(number v) {
        this->expr_11_in2_set(v);
    }
    
    void expr_12_in2_set(number v) {
        this->expr_12_in2 = v;
    }
    
    void expr_11_out1_set(number v) {
        this->expr_11_out1 = v;
        this->expr_12_in2_set(this->expr_11_out1);
    }
    
    void expr_11_in1_bang() {
        this->expr_11_out1_set(this->expr_11_in1 + this->expr_11_in2);//#map:p_obj-10/+_obj-8:1
    }
    
    void trigger_01_out1_bang() {
        this->expr_11_in1_bang();
    }
    
    void trigger_01_input_number_set(number v) {
        this->trigger_01_out2_set(rnbo_trunc(v));
        this->trigger_01_out1_bang();
    }
    
    void receive_03_output_number_set(number v) {
        this->receive_03_output_number = v;
        this->trigger_01_input_number_set(v);
    }
    
    void expr_11_in1_set(number in1) {
        this->expr_11_in1 = in1;
        this->expr_11_out1_set(this->expr_11_in1 + this->expr_11_in2);//#map:p_obj-10/+_obj-8:1
    }
    
    void receive_01_output_number_set(number v) {
        this->receive_01_output_number = v;
        this->expr_11_in1_set(v);
    }
    
    void gate_02_onoff_set(number v) {
        this->gate_02_onoff = v;
    }
    
    void trigger_02_out2_set(number v) {
        this->gate_02_onoff_set(v);
    }
    
    void listgroup_01_size_set(number v) {
        this->listgroup_01_size = v;
    }
    
    void listlen_01_out1_set(number v) {
        this->listgroup_01_size_set(v);
    }
    
    void listlen_01_input_set(const list& input) {
        this->listlen_01_input = jsCreateListCopy(input);
    
        {
            this->listlen_01_out1_set(input->length);
            return;
        }
    }
    
    void trigger_03_out2_set(const list& v) {
        this->listlen_01_input_set(v);
    }
    
    void print_03_input_list_set(const list& v) {
        {
            console->log("from iter", v);
        }
    }
    
    void print_02_input_number_set(number v) {
        {
            console->log("thing", v);
        }
    }
    
    void listlookup_01_lookup_set(const list& v) {
        this->listlookup_01_lookup = jsCreateListCopy(v);
    }
    
    void gate_01_out1_list_set(const list& v) {
        this->gate_01_out1_list = jsCreateListCopy(v);
        this->eventoutlet_01_in1_list_set(v);
    }
    
    void gate_01_input_list_set(const list& v) {
        if (this->gate_01_onoff == 1)
            this->gate_01_out1_list_set(v);
    }
    
    void print_01_input_list_set(const list& v) {
        {
            console->log("group", v);
        }
    }
    
    void listgroup_01_out_set(const list& v) {
        this->listlookup_01_lookup_set(v);
        this->gate_01_input_list_set(v);
        this->print_01_input_list_set(v);
    }
    
    void listgroup_01_input_number_set(number v) {
        this->listgroup_01_grouped = this->listgroup_01_grouped->concat(v);
        this->listgroup_01_checkOutput();
    }
    
    void expr_12_out1_set(number v) {
        this->expr_12_out1 = v;
        this->print_02_input_number_set(this->expr_12_out1);
        this->listgroup_01_input_number_set(this->expr_12_out1);
    }
    
    void expr_12_in1_set(number in1) {
        this->expr_12_in1 = in1;
        this->expr_12_out1_set(this->expr_12_in1 + this->expr_12_in2);//#map:p_obj-10/+_obj-28:1
    }
    
    void iter_01_out_set(const list& v) {
        this->print_03_input_list_set(v);
    
        {
            if (v->length > 1)
                this->expr_12_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_12_in1_set(converted);
        }
    }
    
    void iter_01_input_set(const list& v) {
        this->iter_01_input = jsCreateListCopy(v);
        list tmp = list();
        Index i = 0;
        number l = (this->iter_01_size >= 1 ? this->iter_01_size : 1);
    
        while (i < v->length) {
            if (tmp->length == l) {
                this->iter_01_out_set(tmp);
                tmp->length = 0;
            }
    
            tmp->push(v[(Index)i]);
            i++;
        }
    
        if (tmp->length > 0)
            this->iter_01_out_set(tmp);
    }
    
    void trigger_03_out1_set(const list& v) {
        this->iter_01_input_set(v);
    }
    
    void trigger_03_input_list_set(const list& v) {
        this->trigger_03_out2_set(v);
        this->trigger_03_out1_set(v);
    }
    
    void message_01_out_set(const list& v) {
        this->trigger_03_input_list_set(v);
    }
    
    void message_01_bangval_bang() {
        this->sendParameter(0, true);
        this->message_01_out_set({0, 4, 7, 11});
    }
    
    void gate_02_out1_bang_bang() {
        this->message_01_bangval_bang();
    }
    
    void message_02_out_set(const list& v) {
        this->trigger_03_input_list_set(v);
    }
    
    void message_02_bangval_bang() {
        this->sendParameter(1, true);
        this->message_02_out_set({0, 4, 7, 14});
    }
    
    void gate_02_out2_bang_bang() {
        this->message_02_bangval_bang();
    }
    
    void message_03_out_set(const list& v) {
        this->trigger_03_input_list_set(v);
    }
    
    void message_03_bangval_bang() {
        this->sendParameter(3, true);
        this->message_03_out_set({-3, 0, 4, 9});
    }
    
    void gate_02_out3_bang_bang() {
        this->message_03_bangval_bang();
    }
    
    void message_04_out_set(const list& v) {
        this->trigger_03_input_list_set(v);
    }
    
    void message_04_bangval_bang() {
        this->sendParameter(4, true);
        this->message_04_out_set({2, 4, 7, 12});
    }
    
    void gate_02_out4_bang_bang() {
        this->message_04_bangval_bang();
    }
    
    void gate_02_input_bang_bang() {
        if (this->gate_02_onoff == 1)
            this->gate_02_out1_bang_bang();
        else if (this->gate_02_onoff == 2)
            this->gate_02_out2_bang_bang();
        else if (this->gate_02_onoff == 3)
            this->gate_02_out3_bang_bang();
        else if (this->gate_02_onoff == 4)
            this->gate_02_out4_bang_bang();
    }
    
    void trigger_02_out1_bang() {
        this->gate_02_input_bang_bang();
    }
    
    void trigger_02_input_number_set(number v) {
        this->trigger_02_out2_set(rnbo_trunc(v));
        this->trigger_02_out1_bang();
    }
    
    void route_01_nomatch_bang_bang() {}
    
    void listlookup_01_reset_bang() {
        {
            list __value = list();
            this->listlookup_01_input = jsCreateListCopy(__value);
        };
    
        {
            list __value = list();
            this->listlookup_01_lookup = jsCreateListCopy(__value);
        };
    }
    
    void route_01_match1_bang_bang() {
        this->listlookup_01_reset_bang();
    }
    
    void route_01_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->listlookup_01_reset_bang();
    }
    
    void route_01_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->listlookup_01_reset_bang();
    }
    
    void route_01_nomatch_number_set(number ) {}
    
    void route_01_nomatch_list_set(const list& ) {}
    
    void route_01_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_01_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_01_selector1) {
                if (input->length == 0)
                    this->route_01_match1_bang_bang();
                else if (input->length == 1)
                    this->route_01_match1_number_set(input[0]);
                else
                    this->route_01_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_01_nomatch_number_set(v[0]);
                } else {
                    this->route_01_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_01_input_number_set(number v) {
        this->route_01_input_list_set({v});
    }
    
    void expr_09_out1_set(number v) {
        this->expr_09_out1 = v;
        this->route_01_input_number_set(this->expr_09_out1);
    }
    
    void expr_09_in1_set(number in1) {
        this->expr_09_in1 = in1;
        this->expr_09_out1_set(this->expr_09_in1 < this->expr_09_in2);//#map:p_obj-10/lessthan_obj-26:1
    }
    
    void eventinlet_01_out1_number_set(number v) {
        this->trigger_02_input_number_set(v);
        this->expr_09_in1_set(v);
    }
    
    void trigger_02_input_bang_bang() {
        this->trigger_02_out2_set(0);
        this->trigger_02_out1_bang();
    }
    
    void expr_09_in1_bang() {
        this->expr_09_out1_set(this->expr_09_in1 < this->expr_09_in2);//#map:p_obj-10/lessthan_obj-26:1
    }
    
    void trigger_02_input_list_set(const list& v) {
        this->trigger_02_out2_set((v->length > 0 ? rnbo_trunc(v[0]) : 0));
        this->trigger_02_out1_bang();
    }
    
    void expr_09_in2_set(number v) {
        this->expr_09_in2 = v;
    }
    
    void listgroup_01_input_bang_bang() {
        if (this->listgroup_01_grouped->length > 0) {
            this->listgroup_01_out_set(this->listgroup_01_grouped);
            this->listgroup_01_grouped->length = 0;
        }
    }
    
    void loadbang_01_output_bang() {
        this->listgroup_01_input_bang_bang();
    }
    
    void counter_01_resetnext_set(number v) {
        this->counter_01_resetnext = v;
        this->counter_01_count = v;
    }
    
    void loadmess_01_message_bang() {
        list v = this->loadmess_01_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_01_resetnext_set(converted);
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void iter_01_size_setter(number v) {
        this->iter_01_size = rnbo_floor(v);
    }
    
    void numberobj_13_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_13_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_13_value = localvalue;
    }
    
    void numberobj_14_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_14_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_14_value = localvalue;
    }
    
    void listgroup_01_checkOutput() {
        const Index isize = (const Index)(this->listgroup_01_size);
    
        while (this->listgroup_01_grouped->length >= isize) {
            list tmp = list();
    
            for (Index i = 0; i < isize; i++) {
                tmp->push(this->listgroup_01_grouped[(Index)i]);
            }
    
            this->listgroup_01_out_set(tmp);
            this->listgroup_01_grouped->splice(0, isize);
        }
    }
    
    void numberobj_13_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-10/number_obj-23"), 1, this->_currentTime);
    }
    
    void numberobj_13_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_13_value;
    }
    
    void numberobj_13_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_13_value_set(preset["value"]);
    }
    
    void numberobj_14_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-10/number_obj-20"), 1, this->_currentTime);
    }
    
    void numberobj_14_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_14_value;
    }
    
    void numberobj_14_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_14_value_set(preset["value"]);
    }
    
    void counter_01_inc() {
        this->counter_01_count = ((bool)(this->counter_01_phase) ? this->counter_01_count + 1 : this->counter_01_count - 1);
    }
    
    void counter_01_input() {
        this->counter_01_output_set(this->counter_01_count);
        this->counter_01_inc();
    
        if (this->counter_01_count > this->counter_01_maximum) {
            if (this->counter_01_direction == 2) {
                this->counter_01_phase = !(bool)(this->counter_01_phase);
                this->counter_01_count = this->counter_01_maximum;
                this->counter_01_inc();
            } else
                this->counter_01_count = this->counter_01_minimum;
    
            if ((bool)(!(bool)(this->counter_01_overflow_number))) {
                if (this->counter_01_carryflag == 1)
                    this->counter_01_overflow_bang_bang();
                else
                    this->counter_01_overflow_number_set(1);
            }
    
            this->counter_01_carry_set(this->counter_01_carry + 1);
        } else if ((bool)(this->counter_01_overflow_number) && this->counter_01_carryflag == 0)
            this->counter_01_overflow_number_set(0);
    
        if (this->counter_01_count < this->counter_01_minimum) {
            if (this->counter_01_direction == 2) {
                this->counter_01_phase = !(bool)(this->counter_01_phase);
                this->counter_01_count = this->counter_01_minimum;
                this->counter_01_inc();
            } else
                this->counter_01_count = this->counter_01_maximum;
    
            if ((bool)(!(bool)(this->counter_01_underflow_number))) {
                if (this->counter_01_carryflag == 1)
                    this->counter_01_underflow_bang_bang();
                else
                    this->counter_01_underflow_number_set(1);
            }
    
            this->counter_01_carry_set(this->counter_01_carry + 1);
        } else if ((bool)(this->counter_01_underflow_number) && this->counter_01_carryflag == 0)
            this->counter_01_underflow_number_set(0);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        route_01_selector1 = 1;
        expr_09_in1 = 0;
        expr_09_in2 = 1;
        expr_09_out1 = 0;
        receive_01_output_number = 0;
        expr_10_in1 = 0;
        expr_10_out1 = 0;
        receive_02_output_number = 0;
        gate_01_onoff = 0;
        gate_01_out1_number = 0;
        expr_11_in1 = 0;
        expr_11_in2 = 0;
        expr_11_out1 = 0;
        receive_03_output_number = 0;
        gate_02_onoff = 0;
        gate_02_out1_number = 0;
        gate_02_out2_number = 0;
        gate_02_out3_number = 0;
        gate_02_out4_number = 0;
        expr_12_in1 = 0;
        expr_12_in2 = 0;
        expr_12_out1 = 0;
        listgroup_01_size = 4;
        iter_01_input = { 0 };
        iter_01_size = 1;
        iter_01_size_setter(iter_01_size);
        numberobj_13_value = 48;
        numberobj_13_value_setter(numberobj_13_value);
        numberobj_14_value = 0;
        numberobj_14_value_setter(numberobj_14_value);
        counter_01_carryflag = 0;
        counter_01_direction = 0;
        counter_01_resetnext = 0;
        counter_01_resetnow = 0;
        counter_01_maximum = 3;
        counter_01_output = 0;
        counter_01_underflow_number = 0;
        counter_01_overflow_number = 0;
        counter_01_carry = 0;
        counter_01_minimum = 0;
        loadmess_01_message = { 0 };
        receive_04_output_number = 0;
        expr_13_in1 = 0;
        expr_13_in2 = 1;
        expr_13_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_13_currentFormat = 6;
        numberobj_13_lastValue = 0;
        numberobj_14_currentFormat = 6;
        numberobj_14_lastValue = 0;
        counter_01_count = 0;
        counter_01_phase = true;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number route_01_selector1;
        number expr_09_in1;
        number expr_09_in2;
        number expr_09_out1;
        number receive_01_output_number;
        list receive_01_output_list;
        number expr_10_in1;
        number expr_10_out1;
        number receive_02_output_number;
        list receive_02_output_list;
        number gate_01_onoff;
        number gate_01_out1_number;
        list gate_01_out1_list;
        number expr_11_in1;
        number expr_11_in2;
        number expr_11_out1;
        number receive_03_output_number;
        list receive_03_output_list;
        number gate_02_onoff;
        number gate_02_out1_number;
        list gate_02_out1_list;
        number gate_02_out2_number;
        list gate_02_out2_list;
        number gate_02_out3_number;
        list gate_02_out3_list;
        number gate_02_out4_number;
        list gate_02_out4_list;
        number expr_12_in1;
        number expr_12_in2;
        number expr_12_out1;
        list listlookup_01_input;
        list listlookup_01_lookup;
        number listgroup_01_size;
        list iter_01_input;
        number iter_01_size;
        number numberobj_13_value;
        list listlen_01_input;
        number numberobj_14_value;
        Int counter_01_carryflag;
        number counter_01_direction;
        number counter_01_resetnext;
        number counter_01_resetnow;
        number counter_01_maximum;
        number counter_01_output;
        number counter_01_underflow_number;
        number counter_01_overflow_number;
        number counter_01_carry;
        number counter_01_minimum;
        list loadmess_01_message;
        number receive_04_output_number;
        list receive_04_output_list;
        number expr_13_in1;
        number expr_13_in2;
        number expr_13_out1;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        list listgroup_01_grouped;
        Int numberobj_13_currentFormat;
        number numberobj_13_lastValue;
        Int numberobj_14_currentFormat;
        number numberobj_14_lastValue;
        number counter_01_count;
        bool counter_01_phase;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_1053 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_1053()
    {
    }
    
    ~RNBOSubpatcher_1053()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, 892732297, false);
    }
    
    ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
        if (!stringCompare(paramid, "message_obj-38/bangval")) {
            return 0;
        }
    
        if (!stringCompare(paramid, "message_obj-40/bangval")) {
            return 1;
        }
    
        if (!stringCompare(paramid, "number_obj-23/value")) {
            return 2;
        }
    
        if (!stringCompare(paramid, "message_obj-42/bangval")) {
            return 3;
        }
    
        if (!stringCompare(paramid, "message_obj-45/bangval")) {
            return 4;
        }
    
        if (!stringCompare(paramid, "number_obj-20/value")) {
            return 5;
        }
    
        return INVALID_INDEX;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        SampleValue ** inputs,
        Index numInputs,
        SampleValue ** outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            this->setProbingIndex(-1);
            break;
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            this->message_05_bangval_bang();
            break;
        case 1:
            this->message_06_bangval_bang();
            break;
        case 2:
            this->numberobj_15_value_set(v);
            break;
        case 3:
            this->message_07_bangval_bang();
            break;
        case 4:
            this->message_08_bangval_bang();
            break;
        case 5:
            this->numberobj_16_value_set(v);
            break;
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 2:
            return this->numberobj_15_value;
        case 5:
            return this->numberobj_16_value;
        default:
            return 0;
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 6;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "message_05_bangval";
        case 1:
            return "message_06_bangval";
        case 2:
            return "numberobj_15_value";
        case 3:
            return "message_07_bangval";
        case 4:
            return "message_08_bangval";
        case 5:
            return "numberobj_16_value";
        default:
            return "bogus";
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "p_obj-19/message_obj-38/bangval";
        case 1:
            return "p_obj-19/message_obj-40/bangval";
        case 2:
            return "p_obj-19/number_obj-23/value";
        case 3:
            return "p_obj-19/message_obj-42/bangval";
        case 4:
            return "p_obj-19/message_obj-45/bangval";
        case 5:
            return "p_obj-19/number_obj-20/value";
        default:
            return "bogus";
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 1:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 2:
                info->type = ParameterTypeNumber;
                info->initialValue = 47;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 3:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 4:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 5:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 2:
        case 5:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0) / (1 - 0);
                return normalizedValue;
            }
        default:
            return value;
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 2:
        case 5:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
                {
                    return 0 + value * (1 - 0);
                }
            }
        default:
            return value;
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            return value;
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -871642103:
            this->loadbang_02_startupbang_bang();
            break;
        case 892732297:
            this->loadmess_02_startupbang_bang();
            break;
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("format"):
            if (TAG("p_obj-19/number_obj-23") == objectId)
                this->numberobj_15_format_set(payload);
    
            if (TAG("p_obj-19/number_obj-20") == objectId)
                this->numberobj_16_format_set(payload);
    
            break;
        }
    }
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            if (TAG("p_obj-19/loadbang_obj-25") == objectId)
                this->loadbang_02_startupbang_bang();
    
            if (TAG("p_obj-19/loadmess_obj-18") == objectId)
                this->loadmess_02_startupbang_bang();
    
            break;
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("setup"):
            return "setup";
        case TAG("p_obj-19/number_obj-23"):
            return "p_obj-19/number_obj-23";
        case TAG("p_obj-19/number_obj-20"):
            return "p_obj-19/number_obj-20";
        case TAG("format"):
            return "format";
        case TAG("startupbang"):
            return "startupbang";
        case TAG("p_obj-19/loadbang_obj-25"):
            return "p_obj-19/loadbang_obj-25";
        case TAG("p_obj-19/loadmess_obj-18"):
            return "p_obj-19/loadmess_obj-18";
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            return nullptr;
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_03_out1_bang_bang() {
        this->trigger_05_input_bang_bang();
        this->expr_14_in1_bang();
    }
    
    void eventinlet_03_out1_list_set(const list& v) {
        this->trigger_05_input_list_set(v);
    
        {
            if (v->length > 1)
                this->expr_14_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_14_in1_set(converted);
        }
    }
    
    void numberobj_15_format_set(number v) {
        if (v == 0) {
            this->numberobj_15_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_15_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_15_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_15_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_15_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_15_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_15_currentFormat = 6;
        }
    }
    
    void loadbang_02_startupbang_bang() {
        this->loadbang_02_output_bang();
    }
    
    void numberobj_16_format_set(number v) {
        if (v == 0) {
            this->numberobj_16_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_16_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_16_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_16_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_16_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_16_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_16_currentFormat = 6;
        }
    }
    
    void eventinlet_04_out1_bang_bang() {
        this->counter_02_input_bang();
    }
    
    void eventinlet_04_out1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->counter_02_input_bang();
    }
    
    void loadmess_02_startupbang_bang() {
        this->loadmess_02_message_bang();
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->numberobj_15_init();
        this->numberobj_16_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
    }
    
    void allocateDataRefs() {}
    
    void gate_03_onoff_set(number v) {
        this->gate_03_onoff = v;
    }
    
    void expr_15_out1_set(number v) {
        this->expr_15_out1 = v;
        this->gate_03_onoff_set(this->expr_15_out1);
    }
    
    void expr_15_in1_set(number in1) {
        this->expr_15_in1 = in1;
        this->expr_15_out1_set(1 - this->expr_15_in1);//#map:p_obj-19/expr_obj-21:1
    }
    
    void receive_06_output_number_set(number v) {
        this->receive_06_output_number = v;
        this->expr_15_in1_set(v);
    }
    
    void numberobj_16_output_set(number ) {}
    
    void numberobj_16_value_set(number v) {
        this->numberobj_16_value_setter(v);
        v = this->numberobj_16_value;
        this->sendParameter(5, false);
        this->numberobj_16_output_set(v);
    }
    
    void numberobj_15_output_set(number ) {}
    
    void numberobj_15_value_set(number v) {
        this->numberobj_15_value_setter(v);
        v = this->numberobj_15_value;
        this->sendParameter(2, false);
        this->numberobj_15_output_set(v);
    }
    
    void eventoutlet_02_in1_list_set(const list& v) {
        this->getPatcher()->p_28_out1_list_set((list)v);
    }
    
    void listlookup_02_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_15_value_set(converted);
        }
    
        this->eventoutlet_02_in1_list_set(v);
    }
    
    void listlookup_02_input_set(const list& v) {
        this->listlookup_02_input = jsCreateListCopy(v);
        list tmp = list();
    
        for (Index i = 0; i < v->length; i++) {
            long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
    
            if (j >= 0 && (Index)(j) < this->listlookup_02_lookup->length)
                tmp->push(this->listlookup_02_lookup[(Index)j]);
        }
    
        if ((bool)(tmp->length))
            this->listlookup_02_out_set(tmp);
    }
    
    void counter_02_output_set(number v) {
        this->counter_02_output = v;
        this->numberobj_16_value_set(v);
    
        {
            list converted = {v};
            this->listlookup_02_input_set(converted);
        }
    }
    
    void counter_02_overflow_bang_bang() {}
    
    static number counter_02_overflow_number_constrain(number v) {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_02_overflow_number_set(number v) {
        v = this->counter_02_overflow_number_constrain(v);
        this->counter_02_overflow_number = v;
    }
    
    void counter_02_carry_set(number v) {
        this->counter_02_carry = v;
    }
    
    void counter_02_underflow_bang_bang() {}
    
    static number counter_02_underflow_number_constrain(number v) {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_02_underflow_number_set(number v) {
        v = this->counter_02_underflow_number_constrain(v);
        this->counter_02_underflow_number = v;
    }
    
    void counter_02_resetnow_set(number v) {
        this->counter_02_resetnow = v;
        this->counter_02_count = v;
        this->counter_02_input();
    }
    
    void receive_08_output_list_set(const list& v) {
        this->receive_08_output_list = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_02_resetnow_set(converted);
        }
    }
    
    void counter_02_input_bang() {
        this->counter_02_output_set(this->counter_02_count);
        this->counter_02_inc();
    
        if (this->counter_02_count > this->counter_02_maximum) {
            if (this->counter_02_direction == 2) {
                this->counter_02_phase = !(bool)(this->counter_02_phase);
                this->counter_02_count = this->counter_02_maximum;
                this->counter_02_inc();
            } else
                this->counter_02_count = this->counter_02_minimum;
    
            if ((bool)(!(bool)(this->counter_02_overflow_number))) {
                if (this->counter_02_carryflag == 1)
                    this->counter_02_overflow_bang_bang();
                else
                    this->counter_02_overflow_number_set(1);
            }
    
            this->counter_02_carry_set(this->counter_02_carry + 1);
        } else if ((bool)(this->counter_02_overflow_number) && this->counter_02_carryflag == 0)
            this->counter_02_overflow_number_set(0);
    
        if (this->counter_02_count < this->counter_02_minimum) {
            if (this->counter_02_direction == 2) {
                this->counter_02_phase = !(bool)(this->counter_02_phase);
                this->counter_02_count = this->counter_02_minimum;
                this->counter_02_inc();
            } else
                this->counter_02_count = this->counter_02_maximum;
    
            if ((bool)(!(bool)(this->counter_02_underflow_number))) {
                if (this->counter_02_carryflag == 1)
                    this->counter_02_underflow_bang_bang();
                else
                    this->counter_02_underflow_number_set(1);
            }
    
            this->counter_02_carry_set(this->counter_02_carry + 1);
        } else if ((bool)(this->counter_02_underflow_number) && this->counter_02_carryflag == 0)
            this->counter_02_underflow_number_set(0);
    }
    
    void eventinlet_04_out1_number_set(number v) {
        RNBO_UNUSED(v);
        this->counter_02_input_bang();
    }
    
    void expr_16_in2_set(number v) {
        this->expr_16_in2 = v;
    }
    
    void trigger_04_out2_set(number v) {
        this->expr_16_in2_set(v);
    }
    
    void expr_17_in2_set(number v) {
        this->expr_17_in2 = v;
    }
    
    void expr_16_out1_set(number v) {
        this->expr_16_out1 = v;
        this->expr_17_in2_set(this->expr_16_out1);
    }
    
    void expr_16_in1_bang() {
        this->expr_16_out1_set(this->expr_16_in1 + this->expr_16_in2);//#map:p_obj-19/+_obj-8:1
    }
    
    void trigger_04_out1_bang() {
        this->expr_16_in1_bang();
    }
    
    void trigger_04_input_number_set(number v) {
        this->trigger_04_out2_set(rnbo_trunc(v));
        this->trigger_04_out1_bang();
    }
    
    void receive_07_output_number_set(number v) {
        this->receive_07_output_number = v;
        this->trigger_04_input_number_set(v);
    }
    
    void expr_16_in1_set(number in1) {
        this->expr_16_in1 = in1;
        this->expr_16_out1_set(this->expr_16_in1 + this->expr_16_in2);//#map:p_obj-19/+_obj-8:1
    }
    
    void receive_05_output_number_set(number v) {
        this->receive_05_output_number = v;
        this->expr_16_in1_set(v);
    }
    
    void gate_04_onoff_set(number v) {
        this->gate_04_onoff = v;
    }
    
    void trigger_05_out2_set(number v) {
        this->gate_04_onoff_set(v);
    }
    
    void listgroup_02_size_set(number v) {
        this->listgroup_02_size = v;
    }
    
    void listlen_02_out1_set(number v) {
        this->listgroup_02_size_set(v);
    }
    
    void listlen_02_input_set(const list& input) {
        this->listlen_02_input = jsCreateListCopy(input);
    
        {
            this->listlen_02_out1_set(input->length);
            return;
        }
    }
    
    void trigger_06_out2_set(const list& v) {
        this->listlen_02_input_set(v);
    }
    
    void listlookup_02_lookup_set(const list& v) {
        this->listlookup_02_lookup = jsCreateListCopy(v);
    }
    
    void gate_03_out1_list_set(const list& v) {
        this->gate_03_out1_list = jsCreateListCopy(v);
        this->eventoutlet_02_in1_list_set(v);
    }
    
    void gate_03_input_list_set(const list& v) {
        if (this->gate_03_onoff == 1)
            this->gate_03_out1_list_set(v);
    }
    
    void print_04_input_list_set(const list& v) {
        {
            console->log("group", v);
        }
    }
    
    void listgroup_02_out_set(const list& v) {
        this->listlookup_02_lookup_set(v);
        this->gate_03_input_list_set(v);
        this->print_04_input_list_set(v);
    }
    
    void listgroup_02_input_number_set(number v) {
        this->listgroup_02_grouped = this->listgroup_02_grouped->concat(v);
        this->listgroup_02_checkOutput();
    }
    
    void expr_17_out1_set(number v) {
        this->expr_17_out1 = v;
        this->listgroup_02_input_number_set(this->expr_17_out1);
    }
    
    void expr_17_in1_set(number in1) {
        this->expr_17_in1 = in1;
        this->expr_17_out1_set(this->expr_17_in1 + this->expr_17_in2);//#map:p_obj-19/+_obj-28:1
    }
    
    void iter_02_out_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_17_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_17_in1_set(converted);
        }
    }
    
    void iter_02_input_set(const list& v) {
        this->iter_02_input = jsCreateListCopy(v);
        list tmp = list();
        Index i = 0;
        number l = (this->iter_02_size >= 1 ? this->iter_02_size : 1);
    
        while (i < v->length) {
            if (tmp->length == l) {
                this->iter_02_out_set(tmp);
                tmp->length = 0;
            }
    
            tmp->push(v[(Index)i]);
            i++;
        }
    
        if (tmp->length > 0)
            this->iter_02_out_set(tmp);
    }
    
    void trigger_06_out1_set(const list& v) {
        this->iter_02_input_set(v);
    }
    
    void trigger_06_input_list_set(const list& v) {
        this->trigger_06_out2_set(v);
        this->trigger_06_out1_set(v);
    }
    
    void message_05_out_set(const list& v) {
        this->trigger_06_input_list_set(v);
    }
    
    void message_05_bangval_bang() {
        this->sendParameter(0, true);
        this->message_05_out_set({-1, 2, 6, 7});
    }
    
    void gate_04_out1_bang_bang() {
        this->message_05_bangval_bang();
    }
    
    void message_06_out_set(const list& v) {
        this->trigger_06_input_list_set(v);
    }
    
    void message_06_bangval_bang() {
        this->sendParameter(1, true);
        this->message_06_out_set({0, 2, 5, 9});
    }
    
    void gate_04_out2_bang_bang() {
        this->message_06_bangval_bang();
    }
    
    void message_07_out_set(const list& v) {
        this->trigger_06_input_list_set(v);
    }
    
    void message_07_bangval_bang() {
        this->sendParameter(3, true);
        this->message_07_out_set({2, 4, 7, 11});
    }
    
    void gate_04_out3_bang_bang() {
        this->message_07_bangval_bang();
    }
    
    void message_08_out_set(const list& v) {
        this->trigger_06_input_list_set(v);
    }
    
    void message_08_bangval_bang() {
        this->sendParameter(4, true);
        this->message_08_out_set({0, 5, 7, 9});
    }
    
    void gate_04_out4_bang_bang() {
        this->message_08_bangval_bang();
    }
    
    void gate_04_input_bang_bang() {
        if (this->gate_04_onoff == 1)
            this->gate_04_out1_bang_bang();
        else if (this->gate_04_onoff == 2)
            this->gate_04_out2_bang_bang();
        else if (this->gate_04_onoff == 3)
            this->gate_04_out3_bang_bang();
        else if (this->gate_04_onoff == 4)
            this->gate_04_out4_bang_bang();
    }
    
    void trigger_05_out1_bang() {
        this->gate_04_input_bang_bang();
    }
    
    void trigger_05_input_number_set(number v) {
        this->trigger_05_out2_set(rnbo_trunc(v));
        this->trigger_05_out1_bang();
    }
    
    void route_02_nomatch_bang_bang() {}
    
    void listlookup_02_reset_bang() {
        {
            list __value = list();
            this->listlookup_02_input = jsCreateListCopy(__value);
        };
    
        {
            list __value = list();
            this->listlookup_02_lookup = jsCreateListCopy(__value);
        };
    }
    
    void route_02_match1_bang_bang() {
        this->listlookup_02_reset_bang();
    }
    
    void route_02_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->listlookup_02_reset_bang();
    }
    
    void route_02_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->listlookup_02_reset_bang();
    }
    
    void route_02_nomatch_number_set(number ) {}
    
    void route_02_nomatch_list_set(const list& ) {}
    
    void route_02_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_02_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_02_selector1) {
                if (input->length == 0)
                    this->route_02_match1_bang_bang();
                else if (input->length == 1)
                    this->route_02_match1_number_set(input[0]);
                else
                    this->route_02_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_02_nomatch_number_set(v[0]);
                } else {
                    this->route_02_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_02_input_number_set(number v) {
        this->route_02_input_list_set({v});
    }
    
    void expr_14_out1_set(number v) {
        this->expr_14_out1 = v;
        this->route_02_input_number_set(this->expr_14_out1);
    }
    
    void expr_14_in1_set(number in1) {
        this->expr_14_in1 = in1;
        this->expr_14_out1_set(this->expr_14_in1 < this->expr_14_in2);//#map:p_obj-19/lessthan_obj-26:1
    }
    
    void eventinlet_03_out1_number_set(number v) {
        this->trigger_05_input_number_set(v);
        this->expr_14_in1_set(v);
    }
    
    void trigger_05_input_bang_bang() {
        this->trigger_05_out2_set(0);
        this->trigger_05_out1_bang();
    }
    
    void expr_14_in1_bang() {
        this->expr_14_out1_set(this->expr_14_in1 < this->expr_14_in2);//#map:p_obj-19/lessthan_obj-26:1
    }
    
    void trigger_05_input_list_set(const list& v) {
        this->trigger_05_out2_set((v->length > 0 ? rnbo_trunc(v[0]) : 0));
        this->trigger_05_out1_bang();
    }
    
    void expr_14_in2_set(number v) {
        this->expr_14_in2 = v;
    }
    
    void listgroup_02_input_bang_bang() {
        if (this->listgroup_02_grouped->length > 0) {
            this->listgroup_02_out_set(this->listgroup_02_grouped);
            this->listgroup_02_grouped->length = 0;
        }
    }
    
    void loadbang_02_output_bang() {
        this->listgroup_02_input_bang_bang();
    }
    
    void counter_02_resetnext_set(number v) {
        this->counter_02_resetnext = v;
        this->counter_02_count = v;
    }
    
    void loadmess_02_message_bang() {
        list v = this->loadmess_02_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_02_resetnext_set(converted);
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void iter_02_size_setter(number v) {
        this->iter_02_size = rnbo_floor(v);
    }
    
    void numberobj_15_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_15_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_15_value = localvalue;
    }
    
    void numberobj_16_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_16_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_16_value = localvalue;
    }
    
    void listgroup_02_checkOutput() {
        const Index isize = (const Index)(this->listgroup_02_size);
    
        while (this->listgroup_02_grouped->length >= isize) {
            list tmp = list();
    
            for (Index i = 0; i < isize; i++) {
                tmp->push(this->listgroup_02_grouped[(Index)i]);
            }
    
            this->listgroup_02_out_set(tmp);
            this->listgroup_02_grouped->splice(0, isize);
        }
    }
    
    void numberobj_15_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-19/number_obj-23"), 1, this->_currentTime);
    }
    
    void numberobj_15_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_15_value;
    }
    
    void numberobj_15_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_15_value_set(preset["value"]);
    }
    
    void numberobj_16_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-19/number_obj-20"), 1, this->_currentTime);
    }
    
    void numberobj_16_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_16_value;
    }
    
    void numberobj_16_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_16_value_set(preset["value"]);
    }
    
    void counter_02_inc() {
        this->counter_02_count = ((bool)(this->counter_02_phase) ? this->counter_02_count + 1 : this->counter_02_count - 1);
    }
    
    void counter_02_input() {
        this->counter_02_output_set(this->counter_02_count);
        this->counter_02_inc();
    
        if (this->counter_02_count > this->counter_02_maximum) {
            if (this->counter_02_direction == 2) {
                this->counter_02_phase = !(bool)(this->counter_02_phase);
                this->counter_02_count = this->counter_02_maximum;
                this->counter_02_inc();
            } else
                this->counter_02_count = this->counter_02_minimum;
    
            if ((bool)(!(bool)(this->counter_02_overflow_number))) {
                if (this->counter_02_carryflag == 1)
                    this->counter_02_overflow_bang_bang();
                else
                    this->counter_02_overflow_number_set(1);
            }
    
            this->counter_02_carry_set(this->counter_02_carry + 1);
        } else if ((bool)(this->counter_02_overflow_number) && this->counter_02_carryflag == 0)
            this->counter_02_overflow_number_set(0);
    
        if (this->counter_02_count < this->counter_02_minimum) {
            if (this->counter_02_direction == 2) {
                this->counter_02_phase = !(bool)(this->counter_02_phase);
                this->counter_02_count = this->counter_02_minimum;
                this->counter_02_inc();
            } else
                this->counter_02_count = this->counter_02_maximum;
    
            if ((bool)(!(bool)(this->counter_02_underflow_number))) {
                if (this->counter_02_carryflag == 1)
                    this->counter_02_underflow_bang_bang();
                else
                    this->counter_02_underflow_number_set(1);
            }
    
            this->counter_02_carry_set(this->counter_02_carry + 1);
        } else if ((bool)(this->counter_02_underflow_number) && this->counter_02_carryflag == 0)
            this->counter_02_underflow_number_set(0);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        route_02_selector1 = 1;
        expr_14_in1 = 0;
        expr_14_in2 = 1;
        expr_14_out1 = 0;
        receive_05_output_number = 0;
        expr_15_in1 = 0;
        expr_15_out1 = 0;
        receive_06_output_number = 0;
        gate_03_onoff = 0;
        gate_03_out1_number = 0;
        expr_16_in1 = 0;
        expr_16_in2 = 0;
        expr_16_out1 = 0;
        receive_07_output_number = 0;
        gate_04_onoff = 0;
        gate_04_out1_number = 0;
        gate_04_out2_number = 0;
        gate_04_out3_number = 0;
        gate_04_out4_number = 0;
        expr_17_in1 = 0;
        expr_17_in2 = 0;
        expr_17_out1 = 0;
        listgroup_02_size = 4;
        iter_02_input = { 0 };
        iter_02_size = 1;
        iter_02_size_setter(iter_02_size);
        numberobj_15_value = 47;
        numberobj_15_value_setter(numberobj_15_value);
        numberobj_16_value = 0;
        numberobj_16_value_setter(numberobj_16_value);
        counter_02_carryflag = 0;
        counter_02_direction = 0;
        counter_02_resetnext = 0;
        counter_02_resetnow = 0;
        counter_02_maximum = 3;
        counter_02_output = 0;
        counter_02_underflow_number = 0;
        counter_02_overflow_number = 0;
        counter_02_carry = 0;
        counter_02_minimum = 0;
        loadmess_02_message = { 0 };
        receive_08_output_number = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_15_currentFormat = 6;
        numberobj_15_lastValue = 0;
        numberobj_16_currentFormat = 6;
        numberobj_16_lastValue = 0;
        counter_02_count = 0;
        counter_02_phase = true;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number route_02_selector1;
        number expr_14_in1;
        number expr_14_in2;
        number expr_14_out1;
        number receive_05_output_number;
        list receive_05_output_list;
        number expr_15_in1;
        number expr_15_out1;
        number receive_06_output_number;
        list receive_06_output_list;
        number gate_03_onoff;
        number gate_03_out1_number;
        list gate_03_out1_list;
        number expr_16_in1;
        number expr_16_in2;
        number expr_16_out1;
        number receive_07_output_number;
        list receive_07_output_list;
        number gate_04_onoff;
        number gate_04_out1_number;
        list gate_04_out1_list;
        number gate_04_out2_number;
        list gate_04_out2_list;
        number gate_04_out3_number;
        list gate_04_out3_list;
        number gate_04_out4_number;
        list gate_04_out4_list;
        number expr_17_in1;
        number expr_17_in2;
        number expr_17_out1;
        list listlookup_02_input;
        list listlookup_02_lookup;
        number listgroup_02_size;
        list iter_02_input;
        number iter_02_size;
        number numberobj_15_value;
        list listlen_02_input;
        number numberobj_16_value;
        Int counter_02_carryflag;
        number counter_02_direction;
        number counter_02_resetnext;
        number counter_02_resetnow;
        number counter_02_maximum;
        number counter_02_output;
        number counter_02_underflow_number;
        number counter_02_overflow_number;
        number counter_02_carry;
        number counter_02_minimum;
        list loadmess_02_message;
        number receive_08_output_number;
        list receive_08_output_list;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        list listgroup_02_grouped;
        Int numberobj_15_currentFormat;
        number numberobj_15_lastValue;
        Int numberobj_16_currentFormat;
        number numberobj_16_lastValue;
        number counter_02_count;
        bool counter_02_phase;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_1054 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_1033 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1054;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1033()
            {
            }
            
            ~RNBOSubpatcher_1033()
            {
            }
            
            virtual RNBOSubpatcher_1054* getPatcher() const {
                return static_cast<RNBOSubpatcher_1054 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                if (!stringCompare(paramid, "number_obj-62/value")) {
                    return 0;
                }
            
                if (!stringCompare(paramid, "flonum[2]/value")) {
                    return 1;
                }
            
                if (!stringCompare(paramid, "flonum[3]/value")) {
                    return 2;
                }
            
                if (!stringCompare(paramid, "flonum/value")) {
                    return 3;
                }
            
                if (!stringCompare(paramid, "flonum[1]/value")) {
                    return 4;
                }
            
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                this->dspexpr_37_perform(this->dspexpr_37_in1, this->signals[0], n);
                this->dspexpr_36_perform(in1, this->signals[0], this->signals[1], n);
            
                this->average_rms_tilde_01_perform(
                    this->signals[1],
                    this->average_rms_tilde_01_windowSize,
                    this->average_rms_tilde_01_reset,
                    this->signals[0],
                    n
                );
            
                this->dspexpr_41_perform(this->signals[0], this->signals[2], n);
                this->dspexpr_40_perform(this->signals[2], this->dspexpr_40_in2, this->signals[0], n);
                this->dspexpr_46_perform(this->dspexpr_46_in1, this->signals[2], this->signals[3], n);
                this->mstosamps_tilde_03_perform(this->mstosamps_tilde_03_ms, this->signals[2], n);
                this->mstosamps_tilde_04_perform(this->mstosamps_tilde_04_ms, this->signals[4], n);
                this->dspexpr_47_perform(this->dspexpr_47_in1, this->signals[5], n);
                this->dspexpr_49_perform(this->signals[5], this->dspexpr_49_in2, this->signals[6], n);
                this->dspexpr_48_perform(this->signals[6], this->dspexpr_48_in2, this->signals[5], n);
                this->dspexpr_45_perform(this->signals[3], this->signals[5], this->signals[6], n);
                this->dspexpr_44_perform(this->signals[6], this->signals[5], n);
                this->dspexpr_42_perform(this->signals[5], this->dspexpr_42_in2, this->signals[6], n);
                this->dspexpr_43_perform(this->signals[6], this->dspexpr_43_in2, this->signals[5], n);
                this->dspexpr_39_perform(this->signals[0], this->signals[5], this->signals[6], n);
                this->dspexpr_38_perform(this->signals[6], this->dspexpr_38_in2, this->signals[5], n);
                this->rampsmooth_tilde_01_perform(this->signals[5], this->signals[2], this->signals[4], this->signals[6], n);
                this->dspexpr_35_perform(this->signals[1], this->signals[6], out1, n);
                this->signalforwarder_24_perform(this->signals[6], out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 7; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->average_rms_tilde_01_dspsetup(forceDSPSetup);
                this->rampsmooth_tilde_01_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                this->updateTime(time);
            
                switch (index) {
                case 0:
                    this->numberobj_17_value_set(v);
                    break;
                case 1:
                    this->numberobj_18_value_set(v);
                    break;
                case 2:
                    this->numberobj_19_value_set(v);
                    break;
                case 3:
                    this->numberobj_20_value_set(v);
                    break;
                case 4:
                    this->numberobj_21_value_set(v);
                    break;
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                case 0:
                    return this->numberobj_17_value;
                case 1:
                    return this->numberobj_18_value;
                case 2:
                    return this->numberobj_19_value;
                case 3:
                    return this->numberobj_20_value;
                case 4:
                    return this->numberobj_21_value;
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 5;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                case 0:
                    return "numberobj_17_value";
                case 1:
                    return "numberobj_18_value";
                case 2:
                    return "numberobj_19_value";
                case 3:
                    return "numberobj_20_value";
                case 4:
                    return "numberobj_21_value";
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                case 0:
                    return "p_obj-45/compressor[1]/number_obj-62/value";
                case 1:
                    return "p_obj-45/compressor[1]/flonum[2]/value";
                case 2:
                    return "p_obj-45/compressor[1]/flonum[3]/value";
                case 3:
                    return "p_obj-45/compressor[1]/flonum/value";
                case 4:
                    return "p_obj-45/compressor[1]/flonum[1]/value";
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    case 0:
                        info->type = ParameterTypeNumber;
                        info->initialValue = 0;
                        info->min = 0;
                        info->max = 1;
                        info->exponent = 1;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = false;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                    case 1:
                        info->type = ParameterTypeNumber;
                        info->initialValue = 5;
                        info->min = 0;
                        info->max = 1;
                        info->exponent = 1;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = false;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                    case 2:
                        info->type = ParameterTypeNumber;
                        info->initialValue = 50;
                        info->min = 0;
                        info->max = 1;
                        info->exponent = 1;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = false;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                    case 3:
                        info->type = ParameterTypeNumber;
                        info->initialValue = -30;
                        info->min = -96;
                        info->max = 0;
                        info->exponent = 1;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = false;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                    case 4:
                        info->type = ParameterTypeNumber;
                        info->initialValue = 3;
                        info->min = 1;
                        info->max = 1;
                        info->exponent = 1;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = false;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                case 1:
                case 2:
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        ParameterValue normalizedValue = (value - 0) / (1 - 0);
                        return normalizedValue;
                    }
                case 4:
                    {
                        value = (value < 1 ? 1 : (value > 1 ? 1 : value));
                        ParameterValue normalizedValue = (value - 1) / (1 - 1);
                        return normalizedValue;
                    }
                case 3:
                    {
                        value = (value < -96 ? -96 : (value > 0 ? 0 : value));
                        ParameterValue normalizedValue = (value - -96) / (0 - -96);
                        return normalizedValue;
                    }
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                case 0:
                case 1:
                case 2:
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                        {
                            return 0 + value * (1 - 0);
                        }
                    }
                case 4:
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                        {
                            return 1 + value * (1 - 1);
                        }
                    }
                case 3:
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                        {
                            return -96 + value * (0 - -96);
                        }
                    }
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("format"):
                    if (TAG("p_obj-45/compressor[1]/number_obj-62") == objectId)
                        this->numberobj_17_format_set(payload);
            
                    if (TAG("p_obj-45/compressor[1]/flonum[2]") == objectId)
                        this->numberobj_18_format_set(payload);
            
                    if (TAG("p_obj-45/compressor[1]/flonum[3]") == objectId)
                        this->numberobj_19_format_set(payload);
            
                    if (TAG("p_obj-45/compressor[1]/flonum") == objectId)
                        this->numberobj_20_format_set(payload);
            
                    if (TAG("p_obj-45/compressor[1]/flonum[1]") == objectId)
                        this->numberobj_21_format_set(payload);
            
                    break;
                }
            }
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("setup"):
                    return "setup";
                case TAG("p_obj-45/compressor[1]/number_obj-62"):
                    return "p_obj-45/compressor[1]/number_obj-62";
                case TAG("p_obj-45/compressor[1]/flonum[2]"):
                    return "p_obj-45/compressor[1]/flonum[2]";
                case TAG("p_obj-45/compressor[1]/flonum[3]"):
                    return "p_obj-45/compressor[1]/flonum[3]";
                case TAG("p_obj-45/compressor[1]/flonum"):
                    return "p_obj-45/compressor[1]/flonum";
                case TAG("p_obj-45/compressor[1]/flonum[1]"):
                    return "p_obj-45/compressor[1]/flonum[1]";
                case TAG("format"):
                    return "format";
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 5:
                    return addressOf(this->average_rms_tilde_01_av_bufferobj);
                    break;
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 1;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 5) {
                    this->average_rms_tilde_01_av_buffer = new Float64Buffer(this->average_rms_tilde_01_av_bufferobj);
                }
            }
            
            void initialize() {
                this->average_rms_tilde_01_av_bufferobj = initDataRef("average_rms_tilde_01_av_bufferobj", true, nullptr);
                this->assign_defaults();
                this->setState();
                this->average_rms_tilde_01_av_bufferobj->setIndex(5);
                this->average_rms_tilde_01_av_buffer = new Float64Buffer(this->average_rms_tilde_01_av_bufferobj);
            }
            
            protected:
            
            void eventinlet_05_out1_bang_bang() {
                this->numberobj_17_value_bang();
            }
            
            void eventinlet_05_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_17_value_set(converted);
                }
            }
            
            void numberobj_17_format_set(number v) {
                if (v == 0) {
                    this->numberobj_17_currentFormat = 0;
                } else if (v == 1) {
                    this->numberobj_17_currentFormat = 1;
                } else if (v == 2) {
                    this->numberobj_17_currentFormat = 2;
                } else if (v == 3) {
                    this->numberobj_17_currentFormat = 3;
                } else if (v == 4) {
                    this->numberobj_17_currentFormat = 4;
                } else if (v == 5) {
                    this->numberobj_17_currentFormat = 5;
                } else if (v == 6) {
                    this->numberobj_17_currentFormat = 6;
                }
            }
            
            void eventinlet_06_out1_bang_bang() {
                this->numberobj_18_value_bang();
            }
            
            void eventinlet_06_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_18_value_set(converted);
                }
            }
            
            void numberobj_18_format_set(number v) {
                if (v == 0) {
                    this->numberobj_18_currentFormat = 0;
                } else if (v == 1) {
                    this->numberobj_18_currentFormat = 1;
                } else if (v == 2) {
                    this->numberobj_18_currentFormat = 2;
                } else if (v == 3) {
                    this->numberobj_18_currentFormat = 3;
                } else if (v == 4) {
                    this->numberobj_18_currentFormat = 4;
                } else if (v == 5) {
                    this->numberobj_18_currentFormat = 5;
                } else if (v == 6) {
                    this->numberobj_18_currentFormat = 6;
                }
            }
            
            void eventinlet_07_out1_bang_bang() {
                this->numberobj_19_value_bang();
            }
            
            void eventinlet_07_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_19_value_set(converted);
                }
            }
            
            void numberobj_19_format_set(number v) {
                if (v == 0) {
                    this->numberobj_19_currentFormat = 0;
                } else if (v == 1) {
                    this->numberobj_19_currentFormat = 1;
                } else if (v == 2) {
                    this->numberobj_19_currentFormat = 2;
                } else if (v == 3) {
                    this->numberobj_19_currentFormat = 3;
                } else if (v == 4) {
                    this->numberobj_19_currentFormat = 4;
                } else if (v == 5) {
                    this->numberobj_19_currentFormat = 5;
                } else if (v == 6) {
                    this->numberobj_19_currentFormat = 6;
                }
            }
            
            void numberobj_20_format_set(number v) {
                if (v == 0) {
                    this->numberobj_20_currentFormat = 0;
                } else if (v == 1) {
                    this->numberobj_20_currentFormat = 1;
                } else if (v == 2) {
                    this->numberobj_20_currentFormat = 2;
                } else if (v == 3) {
                    this->numberobj_20_currentFormat = 3;
                } else if (v == 4) {
                    this->numberobj_20_currentFormat = 4;
                } else if (v == 5) {
                    this->numberobj_20_currentFormat = 5;
                } else if (v == 6) {
                    this->numberobj_20_currentFormat = 6;
                }
            }
            
            void eventinlet_08_out1_bang_bang() {
                this->numberobj_20_value_bang();
            }
            
            void eventinlet_08_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_20_value_set(converted);
                }
            }
            
            void eventinlet_09_out1_bang_bang() {
                this->numberobj_21_value_bang();
            }
            
            void eventinlet_09_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_21_value_set(converted);
                }
            }
            
            void numberobj_21_format_set(number v) {
                if (v == 0) {
                    this->numberobj_21_currentFormat = 0;
                } else if (v == 1) {
                    this->numberobj_21_currentFormat = 1;
                } else if (v == 2) {
                    this->numberobj_21_currentFormat = 2;
                } else if (v == 3) {
                    this->numberobj_21_currentFormat = 3;
                } else if (v == 4) {
                    this->numberobj_21_currentFormat = 4;
                } else if (v == 5) {
                    this->numberobj_21_currentFormat = 5;
                } else if (v == 6) {
                    this->numberobj_21_currentFormat = 6;
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 1;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->numberobj_17_init();
                this->average_rms_tilde_01_av_init();
                this->numberobj_18_init();
                this->numberobj_19_init();
                this->numberobj_20_init();
                this->numberobj_21_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->average_rms_tilde_01_av_buffer = this->average_rms_tilde_01_av_buffer->allocateIfNeeded();
            
                if (this->average_rms_tilde_01_av_bufferobj->hasRequestedSize()) {
                    if (this->average_rms_tilde_01_av_bufferobj->wantsFill())
                        this->zeroDataRef(this->average_rms_tilde_01_av_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            }
            
            void mstosamps_tilde_04_ms_set(number v) {
                this->mstosamps_tilde_04_ms = v;
            }
            
            void numberobj_19_output_set(number v) {
                this->mstosamps_tilde_04_ms_set(v);
            }
            
            void numberobj_19_value_set(number v) {
                this->numberobj_19_value_setter(v);
                v = this->numberobj_19_value;
                this->sendParameter(2, false);
                this->numberobj_19_output_set(v);
            }
            
            void eventinlet_07_out1_number_set(number v) {
                this->numberobj_19_value_set(v);
            }
            
            void mstosamps_tilde_03_ms_set(number v) {
                this->mstosamps_tilde_03_ms = v;
            }
            
            void numberobj_18_output_set(number v) {
                this->mstosamps_tilde_03_ms_set(v);
            }
            
            void numberobj_18_value_set(number v) {
                this->numberobj_18_value_setter(v);
                v = this->numberobj_18_value;
                this->sendParameter(1, false);
                this->numberobj_18_output_set(v);
            }
            
            void eventinlet_06_out1_number_set(number v) {
                this->numberobj_18_value_set(v);
            }
            
            void dspexpr_47_in1_set(number v) {
                this->dspexpr_47_in1 = v;
            }
            
            void numberobj_21_output_set(number v) {
                this->dspexpr_47_in1_set(v);
            }
            
            void numberobj_21_value_set(number v) {
                this->numberobj_21_value_setter(v);
                v = this->numberobj_21_value;
                this->sendParameter(4, false);
                this->numberobj_21_output_set(v);
            }
            
            void eventinlet_09_out1_number_set(number v) {
                this->numberobj_21_value_set(v);
            }
            
            void dspexpr_46_in1_set(number v) {
                this->dspexpr_46_in1 = v;
            }
            
            void dspexpr_40_in2_set(number v) {
                this->dspexpr_40_in2 = v;
            }
            
            void numberobj_20_output_set(number v) {
                this->dspexpr_46_in1_set(v);
                this->dspexpr_40_in2_set(v);
            }
            
            void numberobj_20_value_set(number v) {
                this->numberobj_20_value_setter(v);
                v = this->numberobj_20_value;
                this->sendParameter(3, false);
                this->numberobj_20_output_set(v);
            }
            
            void eventinlet_08_out1_number_set(number v) {
                this->numberobj_20_value_set(v);
            }
            
            void dspexpr_37_in1_set(number v) {
                this->dspexpr_37_in1 = v;
            }
            
            void numberobj_17_output_set(number v) {
                this->dspexpr_37_in1_set(v);
            }
            
            void numberobj_17_value_set(number v) {
                this->numberobj_17_value_setter(v);
                v = this->numberobj_17_value;
                this->sendParameter(0, false);
                this->numberobj_17_output_set(v);
            }
            
            void eventinlet_05_out1_number_set(number v) {
                this->numberobj_17_value_set(v);
            }
            
            void numberobj_17_value_bang() {
                number v = this->numberobj_17_value;
                this->sendParameter(0, false);
                this->numberobj_17_output_set(v);
            }
            
            void numberobj_18_value_bang() {
                number v = this->numberobj_18_value;
                this->sendParameter(1, false);
                this->numberobj_18_output_set(v);
            }
            
            void numberobj_19_value_bang() {
                number v = this->numberobj_19_value;
                this->sendParameter(2, false);
                this->numberobj_19_output_set(v);
            }
            
            void numberobj_20_value_bang() {
                number v = this->numberobj_20_value;
                this->sendParameter(3, false);
                this->numberobj_20_output_set(v);
            }
            
            void numberobj_21_value_bang() {
                number v = this->numberobj_21_value;
                this->sendParameter(4, false);
                this->numberobj_21_output_set(v);
            }
            
            void dspexpr_37_perform(number in1, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = rnbo_pow(10, in1 * 0.05);//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_36_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void average_rms_tilde_01_perform(const Sample * x, number windowSize, number reset, Sample * out1, Index n) {
                RNBO_UNUSED(reset);
                RNBO_UNUSED(windowSize);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = this->safesqrt(this->average_rms_tilde_01_av_next(x[(Index)i] * x[(Index)i], 1000, 0));
                }
            }
            
            void dspexpr_41_perform(const Sample * in1, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = (in1[(Index)i] <= 0 ? -999 : 20 * ((in1[(Index)i] <= 0 ? 0 : rnbo_log10(in1[(Index)i]))));//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_40_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] > in2;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_46_perform(number in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1 - in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void mstosamps_tilde_03_perform(number ms, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = ms * this->sr * 0.001;
                }
            }
            
            void mstosamps_tilde_04_perform(number ms, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = ms * this->sr * 0.001;
                }
            }
            
            void dspexpr_47_perform(number in1, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = rnbo_abs(in1);//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_49_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = (in1[(Index)i] == 0. ? 0. : 1 / in1[(Index)i]);//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_48_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = 1 - in1[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_45_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_44_perform(const Sample * in1, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = rnbo_pow(10, in1[(Index)i] * 0.05);//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_42_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = 1 - in1[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_43_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_39_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_38_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + 1;//#map:_###_obj_###_:1
                }
            }
            
            void rampsmooth_tilde_01_perform(
                const Sample * x,
                const Sample * up,
                const Sample * down,
                Sample * out1,
                Index n
            ) {
                auto __rampsmooth_tilde_01_increment = this->rampsmooth_tilde_01_increment;
                auto __rampsmooth_tilde_01_index = this->rampsmooth_tilde_01_index;
                auto __rampsmooth_tilde_01_prev = this->rampsmooth_tilde_01_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_01_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_01_prev) {
                            number _up = up[(Index)i];
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_01_index = _up;
                            __rampsmooth_tilde_01_increment = (x[(Index)i] - __rampsmooth_tilde_01_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_01_prev) {
                            number _down = down[(Index)i];
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_01_index = _down;
                            __rampsmooth_tilde_01_increment = (x[(Index)i] - __rampsmooth_tilde_01_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_01_index > 0) {
                        __rampsmooth_tilde_01_prev += __rampsmooth_tilde_01_increment;
                        __rampsmooth_tilde_01_index -= 1;
                    } else {
                        __rampsmooth_tilde_01_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_01_prev;
                }
            
                this->rampsmooth_tilde_01_prev = __rampsmooth_tilde_01_prev;
                this->rampsmooth_tilde_01_index = __rampsmooth_tilde_01_index;
                this->rampsmooth_tilde_01_increment = __rampsmooth_tilde_01_increment;
            }
            
            void dspexpr_35_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void signalforwarder_24_perform(const Sample * input, Sample * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_17_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_17_currentFormat != 6) {
                    localvalue = rnbo_trunc(localvalue);
                }
            
                this->numberobj_17_value = localvalue;
            }
            
            void numberobj_18_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_18_currentFormat != 6) {
                    localvalue = rnbo_trunc(localvalue);
                }
            
                this->numberobj_18_value = localvalue;
            }
            
            void numberobj_19_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_19_currentFormat != 6) {
                    localvalue = rnbo_trunc(localvalue);
                }
            
                this->numberobj_19_value = localvalue;
            }
            
            void numberobj_20_value_setter(number v) {
                number localvalue = v;
            
                {
                    if (localvalue < -96)
                        localvalue = -96;
                }
            
                {
                    if (localvalue > 0)
                        localvalue = 0;
                }
            
                if (this->numberobj_20_currentFormat != 6) {
                    localvalue = rnbo_trunc(localvalue);
                }
            
                this->numberobj_20_value = localvalue;
            }
            
            void numberobj_21_value_setter(number v) {
                number localvalue = v;
            
                {
                    if (localvalue < 1)
                        localvalue = 1;
                }
            
                if (this->numberobj_21_currentFormat != 6) {
                    localvalue = rnbo_trunc(localvalue);
                }
            
                this->numberobj_21_value = localvalue;
            }
            
            void numberobj_17_init() {
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("p_obj-45/compressor[1]/number_obj-62"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_17_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_17_value;
            }
            
            void numberobj_17_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_17_value_set(preset["value"]);
            }
            
            number rampsmooth_tilde_01_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_01_d_prev);
                this->rampsmooth_tilde_01_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_01_d_dspsetup() {
                this->rampsmooth_tilde_01_d_reset();
            }
            
            void rampsmooth_tilde_01_d_reset() {
                this->rampsmooth_tilde_01_d_prev = 0;
            }
            
            void rampsmooth_tilde_01_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_01_setupDone = true;
                this->rampsmooth_tilde_01_d_dspsetup();
            }
            
            number average_rms_tilde_01_av_next(number x, int windowSize, bool reset) {
                if (windowSize > 0)
                    this->average_rms_tilde_01_av_setwindowsize(windowSize);
            
                if (reset != 0) {
                    if (this->average_rms_tilde_01_av_resetFlag != 1) {
                        this->average_rms_tilde_01_av_wantsReset = 1;
                        this->average_rms_tilde_01_av_resetFlag = 1;
                    }
                } else {
                    this->average_rms_tilde_01_av_resetFlag = 0;
                }
            
                if (this->average_rms_tilde_01_av_wantsReset == 1) {
                    this->average_rms_tilde_01_av_doReset();
                }
            
                this->average_rms_tilde_01_av_accum += x;
                this->average_rms_tilde_01_av_buffer[(Index)this->average_rms_tilde_01_av_bufferPos] = x;
                number bufferSize = this->average_rms_tilde_01_av_buffer->getSize();
            
                if (this->average_rms_tilde_01_av_effectiveWindowSize < this->average_rms_tilde_01_av_currentWindowSize) {
                    this->average_rms_tilde_01_av_effectiveWindowSize++;
                } else {
                    number bufferReadPos = this->average_rms_tilde_01_av_bufferPos - this->average_rms_tilde_01_av_effectiveWindowSize;
            
                    while (bufferReadPos < 0)
                        bufferReadPos += bufferSize;
            
                    this->average_rms_tilde_01_av_accum -= this->average_rms_tilde_01_av_buffer[(Index)bufferReadPos];
                }
            
                this->average_rms_tilde_01_av_bufferPos++;
            
                if (this->average_rms_tilde_01_av_bufferPos >= bufferSize) {
                    this->average_rms_tilde_01_av_bufferPos -= bufferSize;
                }
            
                return this->average_rms_tilde_01_av_accum / this->average_rms_tilde_01_av_effectiveWindowSize;
            }
            
            void average_rms_tilde_01_av_setwindowsize(int wsize) {
                wsize = rnbo_trunc(wsize);
            
                if (wsize != this->average_rms_tilde_01_av_currentWindowSize && wsize > 0 && wsize <= this->sr) {
                    this->average_rms_tilde_01_av_currentWindowSize = wsize;
                    this->average_rms_tilde_01_av_wantsReset = 1;
                }
            }
            
            void average_rms_tilde_01_av_reset() {
                this->average_rms_tilde_01_av_wantsReset = 1;
            }
            
            void average_rms_tilde_01_av_dspsetup() {
                this->average_rms_tilde_01_av_wantsReset = 1;
            
                if (this->sr > this->average_rms_tilde_01_av_buffer->getSize()) {
                    this->average_rms_tilde_01_av_buffer->setSize(this->sr + 1);
                    updateDataRef(this, this->average_rms_tilde_01_av_buffer);
                }
            }
            
            void average_rms_tilde_01_av_doReset() {
                this->average_rms_tilde_01_av_accum = 0;
                this->average_rms_tilde_01_av_effectiveWindowSize = 0;
                this->average_rms_tilde_01_av_bufferPos = 0;
                this->average_rms_tilde_01_av_wantsReset = 0;
            }
            
            void average_rms_tilde_01_av_init() {
                this->average_rms_tilde_01_av_currentWindowSize = this->sr;
                this->average_rms_tilde_01_av_buffer->requestSize(this->sr + 1, 1);
                this->average_rms_tilde_01_av_doReset();
            }
            
            void average_rms_tilde_01_dspsetup(bool force) {
                if ((bool)(this->average_rms_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->average_rms_tilde_01_setupDone = true;
                this->average_rms_tilde_01_av_dspsetup();
            }
            
            void numberobj_18_init() {
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("p_obj-45/compressor[1]/flonum[2]"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_18_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_18_value;
            }
            
            void numberobj_18_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_18_value_set(preset["value"]);
            }
            
            void numberobj_19_init() {
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("p_obj-45/compressor[1]/flonum[3]"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_19_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_19_value;
            }
            
            void numberobj_19_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_19_value_set(preset["value"]);
            }
            
            void numberobj_20_init() {
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-45/compressor[1]/flonum"), 1, this->_currentTime);
            }
            
            void numberobj_20_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_20_value;
            }
            
            void numberobj_20_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_20_value_set(preset["value"]);
            }
            
            void numberobj_21_init() {
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("p_obj-45/compressor[1]/flonum[1]"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_21_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_21_value;
            }
            
            void numberobj_21_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_21_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                dspexpr_35_in1 = 0;
                dspexpr_35_in2 = 1;
                dspexpr_36_in1 = 0;
                dspexpr_36_in2 = 1;
                numberobj_17_value = 0;
                numberobj_17_value_setter(numberobj_17_value);
                dspexpr_37_in1 = 0;
                rampsmooth_tilde_01_x = 0;
                rampsmooth_tilde_01_up = 0;
                rampsmooth_tilde_01_down = 0;
                average_rms_tilde_01_x = 0;
                average_rms_tilde_01_windowSize = 1000;
                average_rms_tilde_01_reset = 0;
                dspexpr_38_in1 = 0;
                dspexpr_38_in2 = 1;
                dspexpr_39_in1 = 0;
                dspexpr_39_in2 = 0;
                dspexpr_40_in1 = 0;
                dspexpr_40_in2 = 0;
                dspexpr_41_in1 = 0;
                mstosamps_tilde_03_ms = 0;
                numberobj_18_value = 5;
                numberobj_18_value_setter(numberobj_18_value);
                mstosamps_tilde_04_ms = 0;
                numberobj_19_value = 50;
                numberobj_19_value_setter(numberobj_19_value);
                dspexpr_42_in1 = 0;
                dspexpr_42_in2 = 1;
                dspexpr_43_in1 = 0;
                dspexpr_43_in2 = -1;
                dspexpr_44_in1 = 0;
                numberobj_20_value = -30;
                numberobj_20_value_setter(numberobj_20_value);
                dspexpr_45_in1 = 0;
                dspexpr_45_in2 = 0;
                dspexpr_46_in1 = 0;
                dspexpr_46_in2 = 0;
                numberobj_21_value = 3;
                numberobj_21_value_setter(numberobj_21_value);
                dspexpr_47_in1 = 0;
                dspexpr_48_in1 = 0;
                dspexpr_48_in2 = 1;
                dspexpr_49_in1 = 0;
                dspexpr_49_in2 = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_17_currentFormat = 6;
                numberobj_17_lastValue = 0;
                rampsmooth_tilde_01_prev = 0;
                rampsmooth_tilde_01_index = 0;
                rampsmooth_tilde_01_increment = 0;
                rampsmooth_tilde_01_d_prev = 0;
                rampsmooth_tilde_01_setupDone = false;
                average_rms_tilde_01_av_currentWindowSize = 44100;
                average_rms_tilde_01_av_accum = 0;
                average_rms_tilde_01_av_effectiveWindowSize = 0;
                average_rms_tilde_01_av_bufferPos = 0;
                average_rms_tilde_01_av_wantsReset = false;
                average_rms_tilde_01_av_resetFlag = false;
                average_rms_tilde_01_setupDone = false;
                numberobj_18_currentFormat = 6;
                numberobj_18_lastValue = 0;
                numberobj_19_currentFormat = 6;
                numberobj_19_lastValue = 0;
                numberobj_20_currentFormat = 6;
                numberobj_20_lastValue = 0;
                numberobj_21_currentFormat = 6;
                numberobj_21_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number dspexpr_35_in1;
                number dspexpr_35_in2;
                number dspexpr_36_in1;
                number dspexpr_36_in2;
                number numberobj_17_value;
                number dspexpr_37_in1;
                number rampsmooth_tilde_01_x;
                number rampsmooth_tilde_01_up;
                number rampsmooth_tilde_01_down;
                number average_rms_tilde_01_x;
                number average_rms_tilde_01_windowSize;
                number average_rms_tilde_01_reset;
                number dspexpr_38_in1;
                number dspexpr_38_in2;
                number dspexpr_39_in1;
                number dspexpr_39_in2;
                number dspexpr_40_in1;
                number dspexpr_40_in2;
                number dspexpr_41_in1;
                number mstosamps_tilde_03_ms;
                number numberobj_18_value;
                number mstosamps_tilde_04_ms;
                number numberobj_19_value;
                number dspexpr_42_in1;
                number dspexpr_42_in2;
                number dspexpr_43_in1;
                number dspexpr_43_in2;
                number dspexpr_44_in1;
                number numberobj_20_value;
                number dspexpr_45_in1;
                number dspexpr_45_in2;
                number dspexpr_46_in1;
                number dspexpr_46_in2;
                number numberobj_21_value;
                number dspexpr_47_in1;
                number dspexpr_48_in1;
                number dspexpr_48_in2;
                number dspexpr_49_in1;
                number dspexpr_49_in2;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[7];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_17_currentFormat;
                number numberobj_17_lastValue;
                number rampsmooth_tilde_01_prev;
                number rampsmooth_tilde_01_index;
                number rampsmooth_tilde_01_increment;
                number rampsmooth_tilde_01_d_prev;
                bool rampsmooth_tilde_01_setupDone;
                int average_rms_tilde_01_av_currentWindowSize;
                number average_rms_tilde_01_av_accum;
                int average_rms_tilde_01_av_effectiveWindowSize;
                int average_rms_tilde_01_av_bufferPos;
                bool average_rms_tilde_01_av_wantsReset;
                bool average_rms_tilde_01_av_resetFlag;
                Float64BufferRef average_rms_tilde_01_av_buffer;
                bool average_rms_tilde_01_setupDone;
                Int numberobj_18_currentFormat;
                number numberobj_18_lastValue;
                Int numberobj_19_currentFormat;
                number numberobj_19_lastValue;
                Int numberobj_20_currentFormat;
                number numberobj_20_lastValue;
                Int numberobj_21_currentFormat;
                number numberobj_21_lastValue;
                number stackprotect_count;
                DataRef average_rms_tilde_01_av_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1034 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1054;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1034()
            {
            }
            
            ~RNBOSubpatcher_1034()
            {
            }
            
            virtual RNBOSubpatcher_1054* getPatcher() const {
                return static_cast<RNBOSubpatcher_1054 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                if (!stringCompare(paramid, "number_obj-62/value")) {
                    return 0;
                }
            
                if (!stringCompare(paramid, "flonum[2]/value")) {
                    return 1;
                }
            
                if (!stringCompare(paramid, "flonum[3]/value")) {
                    return 2;
                }
            
                if (!stringCompare(paramid, "flonum/value")) {
                    return 3;
                }
            
                if (!stringCompare(paramid, "flonum[1]/value")) {
                    return 4;
                }
            
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                this->dspexpr_52_perform(this->dspexpr_52_in1, this->signals[0], n);
                this->dspexpr_51_perform(in1, this->signals[0], this->signals[1], n);
            
                this->average_rms_tilde_02_perform(
                    this->signals[1],
                    this->average_rms_tilde_02_windowSize,
                    this->average_rms_tilde_02_reset,
                    this->signals[0],
                    n
                );
            
                this->dspexpr_56_perform(this->signals[0], this->signals[2], n);
                this->dspexpr_55_perform(this->signals[2], this->dspexpr_55_in2, this->signals[0], n);
                this->dspexpr_61_perform(this->dspexpr_61_in1, this->signals[2], this->signals[3], n);
                this->mstosamps_tilde_05_perform(this->mstosamps_tilde_05_ms, this->signals[2], n);
                this->mstosamps_tilde_06_perform(this->mstosamps_tilde_06_ms, this->signals[4], n);
                this->dspexpr_62_perform(this->dspexpr_62_in1, this->signals[5], n);
                this->dspexpr_64_perform(this->signals[5], this->dspexpr_64_in2, this->signals[6], n);
                this->dspexpr_63_perform(this->signals[6], this->dspexpr_63_in2, this->signals[5], n);
                this->dspexpr_60_perform(this->signals[3], this->signals[5], this->signals[6], n);
                this->dspexpr_59_perform(this->signals[6], this->signals[5], n);
                this->dspexpr_57_perform(this->signals[5], this->dspexpr_57_in2, this->signals[6], n);
                this->dspexpr_58_perform(this->signals[6], this->dspexpr_58_in2, this->signals[5], n);
                this->dspexpr_54_perform(this->signals[0], this->signals[5], this->signals[6], n);
                this->dspexpr_53_perform(this->signals[6], this->dspexpr_53_in2, this->signals[5], n);
                this->rampsmooth_tilde_02_perform(this->signals[5], this->signals[2], this->signals[4], this->signals[6], n);
                this->dspexpr_50_perform(this->signals[1], this->signals[6], out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 7; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->average_rms_tilde_02_dspsetup(forceDSPSetup);
                this->rampsmooth_tilde_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                this->updateTime(time);
            
                switch (index) {
                case 0:
                    this->numberobj_22_value_set(v);
                    break;
                case 1:
                    this->numberobj_23_value_set(v);
                    break;
                case 2:
                    this->numberobj_24_value_set(v);
                    break;
                case 3:
                    this->numberobj_25_value_set(v);
                    break;
                case 4:
                    this->numberobj_26_value_set(v);
                    break;
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                case 0:
                    return this->numberobj_22_value;
                case 1:
                    return this->numberobj_23_value;
                case 2:
                    return this->numberobj_24_value;
                case 3:
                    return this->numberobj_25_value;
                case 4:
                    return this->numberobj_26_value;
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 5;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                case 0:
                    return "numberobj_22_value";
                case 1:
                    return "numberobj_23_value";
                case 2:
                    return "numberobj_24_value";
                case 3:
                    return "numberobj_25_value";
                case 4:
                    return "numberobj_26_value";
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                case 0:
                    return "p_obj-45/compressor/number_obj-62/value";
                case 1:
                    return "p_obj-45/compressor/flonum[2]/value";
                case 2:
                    return "p_obj-45/compressor/flonum[3]/value";
                case 3:
                    return "p_obj-45/compressor/flonum/value";
                case 4:
                    return "p_obj-45/compressor/flonum[1]/value";
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    case 0:
                        info->type = ParameterTypeNumber;
                        info->initialValue = 0;
                        info->min = 0;
                        info->max = 1;
                        info->exponent = 1;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = false;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                    case 1:
                        info->type = ParameterTypeNumber;
                        info->initialValue = 5;
                        info->min = 0;
                        info->max = 1;
                        info->exponent = 1;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = false;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                    case 2:
                        info->type = ParameterTypeNumber;
                        info->initialValue = 50;
                        info->min = 0;
                        info->max = 1;
                        info->exponent = 1;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = false;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                    case 3:
                        info->type = ParameterTypeNumber;
                        info->initialValue = -30;
                        info->min = -96;
                        info->max = 0;
                        info->exponent = 1;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = false;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                    case 4:
                        info->type = ParameterTypeNumber;
                        info->initialValue = 3;
                        info->min = 1;
                        info->max = 1;
                        info->exponent = 1;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = false;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                case 1:
                case 2:
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        ParameterValue normalizedValue = (value - 0) / (1 - 0);
                        return normalizedValue;
                    }
                case 4:
                    {
                        value = (value < 1 ? 1 : (value > 1 ? 1 : value));
                        ParameterValue normalizedValue = (value - 1) / (1 - 1);
                        return normalizedValue;
                    }
                case 3:
                    {
                        value = (value < -96 ? -96 : (value > 0 ? 0 : value));
                        ParameterValue normalizedValue = (value - -96) / (0 - -96);
                        return normalizedValue;
                    }
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                case 0:
                case 1:
                case 2:
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                        {
                            return 0 + value * (1 - 0);
                        }
                    }
                case 4:
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                        {
                            return 1 + value * (1 - 1);
                        }
                    }
                case 3:
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                        {
                            return -96 + value * (0 - -96);
                        }
                    }
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("format"):
                    if (TAG("p_obj-45/compressor/number_obj-62") == objectId)
                        this->numberobj_22_format_set(payload);
            
                    if (TAG("p_obj-45/compressor/flonum[2]") == objectId)
                        this->numberobj_23_format_set(payload);
            
                    if (TAG("p_obj-45/compressor/flonum[3]") == objectId)
                        this->numberobj_24_format_set(payload);
            
                    if (TAG("p_obj-45/compressor/flonum") == objectId)
                        this->numberobj_25_format_set(payload);
            
                    if (TAG("p_obj-45/compressor/flonum[1]") == objectId)
                        this->numberobj_26_format_set(payload);
            
                    break;
                }
            }
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("setup"):
                    return "setup";
                case TAG("p_obj-45/compressor/number_obj-62"):
                    return "p_obj-45/compressor/number_obj-62";
                case TAG("p_obj-45/compressor/flonum[2]"):
                    return "p_obj-45/compressor/flonum[2]";
                case TAG("p_obj-45/compressor/flonum[3]"):
                    return "p_obj-45/compressor/flonum[3]";
                case TAG("p_obj-45/compressor/flonum"):
                    return "p_obj-45/compressor/flonum";
                case TAG("p_obj-45/compressor/flonum[1]"):
                    return "p_obj-45/compressor/flonum[1]";
                case TAG("format"):
                    return "format";
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 5:
                    return addressOf(this->average_rms_tilde_02_av_bufferobj);
                    break;
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 1;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 5) {
                    this->average_rms_tilde_02_av_buffer = new Float64Buffer(this->average_rms_tilde_02_av_bufferobj);
                }
            }
            
            void initialize() {
                this->average_rms_tilde_02_av_bufferobj = initDataRef("average_rms_tilde_02_av_bufferobj", true, nullptr);
                this->assign_defaults();
                this->setState();
                this->average_rms_tilde_02_av_bufferobj->setIndex(5);
                this->average_rms_tilde_02_av_buffer = new Float64Buffer(this->average_rms_tilde_02_av_bufferobj);
            }
            
            protected:
            
            void eventinlet_10_out1_bang_bang() {
                this->numberobj_22_value_bang();
            }
            
            void eventinlet_10_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_22_value_set(converted);
                }
            }
            
            void numberobj_22_format_set(number v) {
                if (v == 0) {
                    this->numberobj_22_currentFormat = 0;
                } else if (v == 1) {
                    this->numberobj_22_currentFormat = 1;
                } else if (v == 2) {
                    this->numberobj_22_currentFormat = 2;
                } else if (v == 3) {
                    this->numberobj_22_currentFormat = 3;
                } else if (v == 4) {
                    this->numberobj_22_currentFormat = 4;
                } else if (v == 5) {
                    this->numberobj_22_currentFormat = 5;
                } else if (v == 6) {
                    this->numberobj_22_currentFormat = 6;
                }
            }
            
            void eventinlet_11_out1_bang_bang() {
                this->numberobj_23_value_bang();
            }
            
            void eventinlet_11_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_23_value_set(converted);
                }
            }
            
            void numberobj_23_format_set(number v) {
                if (v == 0) {
                    this->numberobj_23_currentFormat = 0;
                } else if (v == 1) {
                    this->numberobj_23_currentFormat = 1;
                } else if (v == 2) {
                    this->numberobj_23_currentFormat = 2;
                } else if (v == 3) {
                    this->numberobj_23_currentFormat = 3;
                } else if (v == 4) {
                    this->numberobj_23_currentFormat = 4;
                } else if (v == 5) {
                    this->numberobj_23_currentFormat = 5;
                } else if (v == 6) {
                    this->numberobj_23_currentFormat = 6;
                }
            }
            
            void eventinlet_12_out1_bang_bang() {
                this->numberobj_24_value_bang();
            }
            
            void eventinlet_12_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_24_value_set(converted);
                }
            }
            
            void numberobj_24_format_set(number v) {
                if (v == 0) {
                    this->numberobj_24_currentFormat = 0;
                } else if (v == 1) {
                    this->numberobj_24_currentFormat = 1;
                } else if (v == 2) {
                    this->numberobj_24_currentFormat = 2;
                } else if (v == 3) {
                    this->numberobj_24_currentFormat = 3;
                } else if (v == 4) {
                    this->numberobj_24_currentFormat = 4;
                } else if (v == 5) {
                    this->numberobj_24_currentFormat = 5;
                } else if (v == 6) {
                    this->numberobj_24_currentFormat = 6;
                }
            }
            
            void numberobj_25_format_set(number v) {
                if (v == 0) {
                    this->numberobj_25_currentFormat = 0;
                } else if (v == 1) {
                    this->numberobj_25_currentFormat = 1;
                } else if (v == 2) {
                    this->numberobj_25_currentFormat = 2;
                } else if (v == 3) {
                    this->numberobj_25_currentFormat = 3;
                } else if (v == 4) {
                    this->numberobj_25_currentFormat = 4;
                } else if (v == 5) {
                    this->numberobj_25_currentFormat = 5;
                } else if (v == 6) {
                    this->numberobj_25_currentFormat = 6;
                }
            }
            
            void eventinlet_13_out1_bang_bang() {
                this->numberobj_25_value_bang();
            }
            
            void eventinlet_13_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_25_value_set(converted);
                }
            }
            
            void eventinlet_14_out1_bang_bang() {
                this->numberobj_26_value_bang();
            }
            
            void eventinlet_14_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_26_value_set(converted);
                }
            }
            
            void numberobj_26_format_set(number v) {
                if (v == 0) {
                    this->numberobj_26_currentFormat = 0;
                } else if (v == 1) {
                    this->numberobj_26_currentFormat = 1;
                } else if (v == 2) {
                    this->numberobj_26_currentFormat = 2;
                } else if (v == 3) {
                    this->numberobj_26_currentFormat = 3;
                } else if (v == 4) {
                    this->numberobj_26_currentFormat = 4;
                } else if (v == 5) {
                    this->numberobj_26_currentFormat = 5;
                } else if (v == 6) {
                    this->numberobj_26_currentFormat = 6;
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 1;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->numberobj_22_init();
                this->average_rms_tilde_02_av_init();
                this->numberobj_23_init();
                this->numberobj_24_init();
                this->numberobj_25_init();
                this->numberobj_26_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->average_rms_tilde_02_av_buffer = this->average_rms_tilde_02_av_buffer->allocateIfNeeded();
            
                if (this->average_rms_tilde_02_av_bufferobj->hasRequestedSize()) {
                    if (this->average_rms_tilde_02_av_bufferobj->wantsFill())
                        this->zeroDataRef(this->average_rms_tilde_02_av_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            }
            
            void mstosamps_tilde_06_ms_set(number v) {
                this->mstosamps_tilde_06_ms = v;
            }
            
            void numberobj_24_output_set(number v) {
                this->mstosamps_tilde_06_ms_set(v);
            }
            
            void numberobj_24_value_set(number v) {
                this->numberobj_24_value_setter(v);
                v = this->numberobj_24_value;
                this->sendParameter(2, false);
                this->numberobj_24_output_set(v);
            }
            
            void eventinlet_12_out1_number_set(number v) {
                this->numberobj_24_value_set(v);
            }
            
            void mstosamps_tilde_05_ms_set(number v) {
                this->mstosamps_tilde_05_ms = v;
            }
            
            void numberobj_23_output_set(number v) {
                this->mstosamps_tilde_05_ms_set(v);
            }
            
            void numberobj_23_value_set(number v) {
                this->numberobj_23_value_setter(v);
                v = this->numberobj_23_value;
                this->sendParameter(1, false);
                this->numberobj_23_output_set(v);
            }
            
            void eventinlet_11_out1_number_set(number v) {
                this->numberobj_23_value_set(v);
            }
            
            void dspexpr_62_in1_set(number v) {
                this->dspexpr_62_in1 = v;
            }
            
            void numberobj_26_output_set(number v) {
                this->dspexpr_62_in1_set(v);
            }
            
            void numberobj_26_value_set(number v) {
                this->numberobj_26_value_setter(v);
                v = this->numberobj_26_value;
                this->sendParameter(4, false);
                this->numberobj_26_output_set(v);
            }
            
            void eventinlet_14_out1_number_set(number v) {
                this->numberobj_26_value_set(v);
            }
            
            void dspexpr_61_in1_set(number v) {
                this->dspexpr_61_in1 = v;
            }
            
            void dspexpr_55_in2_set(number v) {
                this->dspexpr_55_in2 = v;
            }
            
            void numberobj_25_output_set(number v) {
                this->dspexpr_61_in1_set(v);
                this->dspexpr_55_in2_set(v);
            }
            
            void numberobj_25_value_set(number v) {
                this->numberobj_25_value_setter(v);
                v = this->numberobj_25_value;
                this->sendParameter(3, false);
                this->numberobj_25_output_set(v);
            }
            
            void eventinlet_13_out1_number_set(number v) {
                this->numberobj_25_value_set(v);
            }
            
            void dspexpr_52_in1_set(number v) {
                this->dspexpr_52_in1 = v;
            }
            
            void numberobj_22_output_set(number v) {
                this->dspexpr_52_in1_set(v);
            }
            
            void numberobj_22_value_set(number v) {
                this->numberobj_22_value_setter(v);
                v = this->numberobj_22_value;
                this->sendParameter(0, false);
                this->numberobj_22_output_set(v);
            }
            
            void eventinlet_10_out1_number_set(number v) {
                this->numberobj_22_value_set(v);
            }
            
            void numberobj_22_value_bang() {
                number v = this->numberobj_22_value;
                this->sendParameter(0, false);
                this->numberobj_22_output_set(v);
            }
            
            void numberobj_23_value_bang() {
                number v = this->numberobj_23_value;
                this->sendParameter(1, false);
                this->numberobj_23_output_set(v);
            }
            
            void numberobj_24_value_bang() {
                number v = this->numberobj_24_value;
                this->sendParameter(2, false);
                this->numberobj_24_output_set(v);
            }
            
            void numberobj_25_value_bang() {
                number v = this->numberobj_25_value;
                this->sendParameter(3, false);
                this->numberobj_25_output_set(v);
            }
            
            void numberobj_26_value_bang() {
                number v = this->numberobj_26_value;
                this->sendParameter(4, false);
                this->numberobj_26_output_set(v);
            }
            
            void dspexpr_52_perform(number in1, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = rnbo_pow(10, in1 * 0.05);//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_51_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void average_rms_tilde_02_perform(const Sample * x, number windowSize, number reset, Sample * out1, Index n) {
                RNBO_UNUSED(reset);
                RNBO_UNUSED(windowSize);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = this->safesqrt(this->average_rms_tilde_02_av_next(x[(Index)i] * x[(Index)i], 1000, 0));
                }
            }
            
            void dspexpr_56_perform(const Sample * in1, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = (in1[(Index)i] <= 0 ? -999 : 20 * ((in1[(Index)i] <= 0 ? 0 : rnbo_log10(in1[(Index)i]))));//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_55_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] > in2;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_61_perform(number in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1 - in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void mstosamps_tilde_05_perform(number ms, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = ms * this->sr * 0.001;
                }
            }
            
            void mstosamps_tilde_06_perform(number ms, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = ms * this->sr * 0.001;
                }
            }
            
            void dspexpr_62_perform(number in1, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = rnbo_abs(in1);//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_64_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = (in1[(Index)i] == 0. ? 0. : 1 / in1[(Index)i]);//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_63_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = 1 - in1[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_60_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_59_perform(const Sample * in1, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = rnbo_pow(10, in1[(Index)i] * 0.05);//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_57_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = 1 - in1[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_58_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_54_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_53_perform(const Sample * in1, number in2, Sample * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + 1;//#map:_###_obj_###_:1
                }
            }
            
            void rampsmooth_tilde_02_perform(
                const Sample * x,
                const Sample * up,
                const Sample * down,
                Sample * out1,
                Index n
            ) {
                auto __rampsmooth_tilde_02_increment = this->rampsmooth_tilde_02_increment;
                auto __rampsmooth_tilde_02_index = this->rampsmooth_tilde_02_index;
                auto __rampsmooth_tilde_02_prev = this->rampsmooth_tilde_02_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_02_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_02_prev) {
                            number _up = up[(Index)i];
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_02_index = _up;
                            __rampsmooth_tilde_02_increment = (x[(Index)i] - __rampsmooth_tilde_02_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_02_prev) {
                            number _down = down[(Index)i];
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_02_index = _down;
                            __rampsmooth_tilde_02_increment = (x[(Index)i] - __rampsmooth_tilde_02_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_02_index > 0) {
                        __rampsmooth_tilde_02_prev += __rampsmooth_tilde_02_increment;
                        __rampsmooth_tilde_02_index -= 1;
                    } else {
                        __rampsmooth_tilde_02_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_02_prev;
                }
            
                this->rampsmooth_tilde_02_prev = __rampsmooth_tilde_02_prev;
                this->rampsmooth_tilde_02_index = __rampsmooth_tilde_02_index;
                this->rampsmooth_tilde_02_increment = __rampsmooth_tilde_02_increment;
            }
            
            void dspexpr_50_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_22_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_22_currentFormat != 6) {
                    localvalue = rnbo_trunc(localvalue);
                }
            
                this->numberobj_22_value = localvalue;
            }
            
            void numberobj_23_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_23_currentFormat != 6) {
                    localvalue = rnbo_trunc(localvalue);
                }
            
                this->numberobj_23_value = localvalue;
            }
            
            void numberobj_24_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_24_currentFormat != 6) {
                    localvalue = rnbo_trunc(localvalue);
                }
            
                this->numberobj_24_value = localvalue;
            }
            
            void numberobj_25_value_setter(number v) {
                number localvalue = v;
            
                {
                    if (localvalue < -96)
                        localvalue = -96;
                }
            
                {
                    if (localvalue > 0)
                        localvalue = 0;
                }
            
                if (this->numberobj_25_currentFormat != 6) {
                    localvalue = rnbo_trunc(localvalue);
                }
            
                this->numberobj_25_value = localvalue;
            }
            
            void numberobj_26_value_setter(number v) {
                number localvalue = v;
            
                {
                    if (localvalue < 1)
                        localvalue = 1;
                }
            
                if (this->numberobj_26_currentFormat != 6) {
                    localvalue = rnbo_trunc(localvalue);
                }
            
                this->numberobj_26_value = localvalue;
            }
            
            void numberobj_22_init() {
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("p_obj-45/compressor/number_obj-62"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_22_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_22_value;
            }
            
            void numberobj_22_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_22_value_set(preset["value"]);
            }
            
            number rampsmooth_tilde_02_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_02_d_prev);
                this->rampsmooth_tilde_02_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_02_d_dspsetup() {
                this->rampsmooth_tilde_02_d_reset();
            }
            
            void rampsmooth_tilde_02_d_reset() {
                this->rampsmooth_tilde_02_d_prev = 0;
            }
            
            void rampsmooth_tilde_02_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_02_setupDone = true;
                this->rampsmooth_tilde_02_d_dspsetup();
            }
            
            number average_rms_tilde_02_av_next(number x, int windowSize, bool reset) {
                if (windowSize > 0)
                    this->average_rms_tilde_02_av_setwindowsize(windowSize);
            
                if (reset != 0) {
                    if (this->average_rms_tilde_02_av_resetFlag != 1) {
                        this->average_rms_tilde_02_av_wantsReset = 1;
                        this->average_rms_tilde_02_av_resetFlag = 1;
                    }
                } else {
                    this->average_rms_tilde_02_av_resetFlag = 0;
                }
            
                if (this->average_rms_tilde_02_av_wantsReset == 1) {
                    this->average_rms_tilde_02_av_doReset();
                }
            
                this->average_rms_tilde_02_av_accum += x;
                this->average_rms_tilde_02_av_buffer[(Index)this->average_rms_tilde_02_av_bufferPos] = x;
                number bufferSize = this->average_rms_tilde_02_av_buffer->getSize();
            
                if (this->average_rms_tilde_02_av_effectiveWindowSize < this->average_rms_tilde_02_av_currentWindowSize) {
                    this->average_rms_tilde_02_av_effectiveWindowSize++;
                } else {
                    number bufferReadPos = this->average_rms_tilde_02_av_bufferPos - this->average_rms_tilde_02_av_effectiveWindowSize;
            
                    while (bufferReadPos < 0)
                        bufferReadPos += bufferSize;
            
                    this->average_rms_tilde_02_av_accum -= this->average_rms_tilde_02_av_buffer[(Index)bufferReadPos];
                }
            
                this->average_rms_tilde_02_av_bufferPos++;
            
                if (this->average_rms_tilde_02_av_bufferPos >= bufferSize) {
                    this->average_rms_tilde_02_av_bufferPos -= bufferSize;
                }
            
                return this->average_rms_tilde_02_av_accum / this->average_rms_tilde_02_av_effectiveWindowSize;
            }
            
            void average_rms_tilde_02_av_setwindowsize(int wsize) {
                wsize = rnbo_trunc(wsize);
            
                if (wsize != this->average_rms_tilde_02_av_currentWindowSize && wsize > 0 && wsize <= this->sr) {
                    this->average_rms_tilde_02_av_currentWindowSize = wsize;
                    this->average_rms_tilde_02_av_wantsReset = 1;
                }
            }
            
            void average_rms_tilde_02_av_reset() {
                this->average_rms_tilde_02_av_wantsReset = 1;
            }
            
            void average_rms_tilde_02_av_dspsetup() {
                this->average_rms_tilde_02_av_wantsReset = 1;
            
                if (this->sr > this->average_rms_tilde_02_av_buffer->getSize()) {
                    this->average_rms_tilde_02_av_buffer->setSize(this->sr + 1);
                    updateDataRef(this, this->average_rms_tilde_02_av_buffer);
                }
            }
            
            void average_rms_tilde_02_av_doReset() {
                this->average_rms_tilde_02_av_accum = 0;
                this->average_rms_tilde_02_av_effectiveWindowSize = 0;
                this->average_rms_tilde_02_av_bufferPos = 0;
                this->average_rms_tilde_02_av_wantsReset = 0;
            }
            
            void average_rms_tilde_02_av_init() {
                this->average_rms_tilde_02_av_currentWindowSize = this->sr;
                this->average_rms_tilde_02_av_buffer->requestSize(this->sr + 1, 1);
                this->average_rms_tilde_02_av_doReset();
            }
            
            void average_rms_tilde_02_dspsetup(bool force) {
                if ((bool)(this->average_rms_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->average_rms_tilde_02_setupDone = true;
                this->average_rms_tilde_02_av_dspsetup();
            }
            
            void numberobj_23_init() {
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-45/compressor/flonum[2]"), 1, this->_currentTime);
            }
            
            void numberobj_23_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_23_value;
            }
            
            void numberobj_23_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_23_value_set(preset["value"]);
            }
            
            void numberobj_24_init() {
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-45/compressor/flonum[3]"), 1, this->_currentTime);
            }
            
            void numberobj_24_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_24_value;
            }
            
            void numberobj_24_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_24_value_set(preset["value"]);
            }
            
            void numberobj_25_init() {
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-45/compressor/flonum"), 1, this->_currentTime);
            }
            
            void numberobj_25_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_25_value;
            }
            
            void numberobj_25_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_25_value_set(preset["value"]);
            }
            
            void numberobj_26_init() {
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-45/compressor/flonum[1]"), 1, this->_currentTime);
            }
            
            void numberobj_26_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_26_value;
            }
            
            void numberobj_26_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_26_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                dspexpr_50_in1 = 0;
                dspexpr_50_in2 = 1;
                dspexpr_51_in1 = 0;
                dspexpr_51_in2 = 1;
                numberobj_22_value = 0;
                numberobj_22_value_setter(numberobj_22_value);
                dspexpr_52_in1 = 0;
                rampsmooth_tilde_02_x = 0;
                rampsmooth_tilde_02_up = 0;
                rampsmooth_tilde_02_down = 0;
                average_rms_tilde_02_x = 0;
                average_rms_tilde_02_windowSize = 1000;
                average_rms_tilde_02_reset = 0;
                dspexpr_53_in1 = 0;
                dspexpr_53_in2 = 1;
                dspexpr_54_in1 = 0;
                dspexpr_54_in2 = 0;
                dspexpr_55_in1 = 0;
                dspexpr_55_in2 = 0;
                dspexpr_56_in1 = 0;
                mstosamps_tilde_05_ms = 0;
                numberobj_23_value = 5;
                numberobj_23_value_setter(numberobj_23_value);
                mstosamps_tilde_06_ms = 0;
                numberobj_24_value = 50;
                numberobj_24_value_setter(numberobj_24_value);
                dspexpr_57_in1 = 0;
                dspexpr_57_in2 = 1;
                dspexpr_58_in1 = 0;
                dspexpr_58_in2 = -1;
                dspexpr_59_in1 = 0;
                numberobj_25_value = -30;
                numberobj_25_value_setter(numberobj_25_value);
                dspexpr_60_in1 = 0;
                dspexpr_60_in2 = 0;
                dspexpr_61_in1 = 0;
                dspexpr_61_in2 = 0;
                numberobj_26_value = 3;
                numberobj_26_value_setter(numberobj_26_value);
                dspexpr_62_in1 = 0;
                dspexpr_63_in1 = 0;
                dspexpr_63_in2 = 1;
                dspexpr_64_in1 = 0;
                dspexpr_64_in2 = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_22_currentFormat = 6;
                numberobj_22_lastValue = 0;
                rampsmooth_tilde_02_prev = 0;
                rampsmooth_tilde_02_index = 0;
                rampsmooth_tilde_02_increment = 0;
                rampsmooth_tilde_02_d_prev = 0;
                rampsmooth_tilde_02_setupDone = false;
                average_rms_tilde_02_av_currentWindowSize = 44100;
                average_rms_tilde_02_av_accum = 0;
                average_rms_tilde_02_av_effectiveWindowSize = 0;
                average_rms_tilde_02_av_bufferPos = 0;
                average_rms_tilde_02_av_wantsReset = false;
                average_rms_tilde_02_av_resetFlag = false;
                average_rms_tilde_02_setupDone = false;
                numberobj_23_currentFormat = 6;
                numberobj_23_lastValue = 0;
                numberobj_24_currentFormat = 6;
                numberobj_24_lastValue = 0;
                numberobj_25_currentFormat = 6;
                numberobj_25_lastValue = 0;
                numberobj_26_currentFormat = 6;
                numberobj_26_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number dspexpr_50_in1;
                number dspexpr_50_in2;
                number dspexpr_51_in1;
                number dspexpr_51_in2;
                number numberobj_22_value;
                number dspexpr_52_in1;
                number rampsmooth_tilde_02_x;
                number rampsmooth_tilde_02_up;
                number rampsmooth_tilde_02_down;
                number average_rms_tilde_02_x;
                number average_rms_tilde_02_windowSize;
                number average_rms_tilde_02_reset;
                number dspexpr_53_in1;
                number dspexpr_53_in2;
                number dspexpr_54_in1;
                number dspexpr_54_in2;
                number dspexpr_55_in1;
                number dspexpr_55_in2;
                number dspexpr_56_in1;
                number mstosamps_tilde_05_ms;
                number numberobj_23_value;
                number mstosamps_tilde_06_ms;
                number numberobj_24_value;
                number dspexpr_57_in1;
                number dspexpr_57_in2;
                number dspexpr_58_in1;
                number dspexpr_58_in2;
                number dspexpr_59_in1;
                number numberobj_25_value;
                number dspexpr_60_in1;
                number dspexpr_60_in2;
                number dspexpr_61_in1;
                number dspexpr_61_in2;
                number numberobj_26_value;
                number dspexpr_62_in1;
                number dspexpr_63_in1;
                number dspexpr_63_in2;
                number dspexpr_64_in1;
                number dspexpr_64_in2;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[7];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_22_currentFormat;
                number numberobj_22_lastValue;
                number rampsmooth_tilde_02_prev;
                number rampsmooth_tilde_02_index;
                number rampsmooth_tilde_02_increment;
                number rampsmooth_tilde_02_d_prev;
                bool rampsmooth_tilde_02_setupDone;
                int average_rms_tilde_02_av_currentWindowSize;
                number average_rms_tilde_02_av_accum;
                int average_rms_tilde_02_av_effectiveWindowSize;
                int average_rms_tilde_02_av_bufferPos;
                bool average_rms_tilde_02_av_wantsReset;
                bool average_rms_tilde_02_av_resetFlag;
                Float64BufferRef average_rms_tilde_02_av_buffer;
                bool average_rms_tilde_02_setupDone;
                Int numberobj_23_currentFormat;
                number numberobj_23_lastValue;
                Int numberobj_24_currentFormat;
                number numberobj_24_lastValue;
                Int numberobj_25_currentFormat;
                number numberobj_25_lastValue;
                Int numberobj_26_currentFormat;
                number numberobj_26_lastValue;
                number stackprotect_count;
                DataRef average_rms_tilde_02_av_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_1054()
    {
    }
    
    ~RNBOSubpatcher_1054()
    {
        delete this->p_09;
        delete this->p_10;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 1646922831, false);
    }
    
    ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
        if (!stringCompare(paramid, "release")) {
            return 0;
        }
    
        if (!stringCompare(paramid, "attack")) {
            return 1;
        }
    
        if (!stringCompare(paramid, "ratio")) {
            return 2;
        }
    
        if (!stringCompare(paramid, "threshold")) {
            return 3;
        }
    
        if (!stringCompare(paramid, "input_gain")) {
            return 4;
        }
    
        if (!stringCompare(paramid, "parallel_mix")) {
            return 5;
        }
    
        return INVALID_INDEX;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        SampleValue ** inputs,
        Index numInputs,
        SampleValue ** outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->p_09_perform(in1, this->signals[0], this->signals[1], n);
        this->dspexpr_65_perform(in1, this->signals[0], this->dspexpr_65_in3, out1, n);
        this->snapshot_01_perform(this->signals[1], n);
        this->p_10_perform(in2, this->signals[1], n);
        this->dspexpr_66_perform(in2, this->signals[1], this->dspexpr_66_in3, out2, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 2; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
        this->p_09->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_10->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            this->setProbingIndex(-1);
            break;
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_09 = new RNBOSubpatcher_1033();
        this->p_09->setEngineAndPatcher(this->getEngine(), this);
        this->p_09->initialize();
        this->p_09->setParameterOffset(this->getParameterOffset(this->p_09));
        this->p_10 = new RNBOSubpatcher_1034();
        this->p_10->setEngineAndPatcher(this->getEngine(), this);
        this->p_10->initialize();
        this->p_10->setParameterOffset(this->getParameterOffset(this->p_10));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_07_getPresetValue(getSubState(preset, "release"));
        this->param_08_getPresetValue(getSubState(preset, "attack"));
        this->param_09_getPresetValue(getSubState(preset, "ratio"));
        this->param_10_getPresetValue(getSubState(preset, "threshold"));
        this->param_11_getPresetValue(getSubState(preset, "input_gain"));
        this->param_12_getPresetValue(getSubState(preset, "parallel_mix"));
        this->p_09->getPreset(getSubState(getSubState(preset, "__sps"), "compressor[1]"));
        this->p_10->getPreset(getSubState(getSubState(preset, "__sps"), "compressor"));
    }
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_09->processTempoEvent(time, tempo);
        this->p_10->processTempoEvent(time, tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_09->processTransportEvent(time, state);
        this->p_10->processTransportEvent(time, state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_09->processBeatTimeEvent(time, beattime);
        this->p_10->processBeatTimeEvent(time, beattime);
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_09->processTimeSignatureEvent(time, numerator, denominator);
        this->p_10->processTimeSignatureEvent(time, numerator, denominator);
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            this->param_07_value_set(v);
            break;
        case 1:
            this->param_08_value_set(v);
            break;
        case 2:
            this->param_09_value_set(v);
            break;
        case 3:
            this->param_10_value_set(v);
            break;
        case 4:
            this->param_11_value_set(v);
            break;
        case 5:
            this->param_12_value_set(v);
            break;
        default:
            index -= 6;
    
            if (index < this->p_09->getNumParameters())
                this->p_09->setParameterValue(index, v, time);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                this->p_10->setParameterValue(index, v, time);
    
            break;
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            return this->param_07_value;
        case 1:
            return this->param_08_value;
        case 2:
            return this->param_09_value;
        case 3:
            return this->param_10_value;
        case 4:
            return this->param_11_value;
        case 5:
            return this->param_12_value;
        default:
            index -= 6;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterValue(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterValue(index);
    
            return 0;
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 6 + this->p_09->getNumParameters() + this->p_10->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "release";
        case 1:
            return "attack";
        case 2:
            return "ratio";
        case 3:
            return "threshold";
        case 4:
            return "input_gain";
        case 5:
            return "parallel_mix";
        default:
            index -= 6;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterName(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterName(index);
    
            return "bogus";
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "p_obj-45/release";
        case 1:
            return "p_obj-45/attack";
        case 2:
            return "p_obj-45/ratio";
        case 3:
            return "p_obj-45/threshold";
        case 4:
            return "p_obj-45/input_gain";
        case 5:
            return "p_obj-45/parallel_mix";
        default:
            index -= 6;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterId(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterId(index);
    
            return "bogus";
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 1000;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 1:
                info->type = ParameterTypeNumber;
                info->initialValue = 5;
                info->min = 0;
                info->max = 1000;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 2:
                info->type = ParameterTypeNumber;
                info->initialValue = 3;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 3:
                info->type = ParameterTypeNumber;
                info->initialValue = -30;
                info->min = -100;
                info->max = 10;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 4:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 5:
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            default:
                index -= 6;
    
                if (index < this->p_09->getNumParameters())
                    this->p_09->getParameterInfo(index, info);
    
                index -= this->p_09->getNumParameters();
    
                if (index < this->p_10->getNumParameters())
                    this->p_10->getParameterInfo(index, info);
    
                break;
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_09)
            return 6;
    
        if (subpatcher == this->p_10)
            return 6 + this->p_09->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 5:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0) / (1 - 0);
                return normalizedValue;
            }
        case 2:
        case 4:
            {
                value = (value < 0 ? 0 : (value > 100 ? 100 : value));
                ParameterValue normalizedValue = (value - 0) / (100 - 0);
                return normalizedValue;
            }
        case 0:
        case 1:
            {
                value = (value < 0 ? 0 : (value > 1000 ? 1000 : value));
                ParameterValue normalizedValue = (value - 0) / (1000 - 0);
                return normalizedValue;
            }
        case 3:
            {
                value = (value < -100 ? -100 : (value > 10 ? 10 : value));
                ParameterValue normalizedValue = (value - -100) / (10 - -100);
                return normalizedValue;
            }
        default:
            index -= 6;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->convertToNormalizedParameterValue(index, value);
    
            return value;
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 5:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
                {
                    return 0 + value * (1 - 0);
                }
            }
        case 2:
        case 4:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
                {
                    return 0 + value * (100 - 0);
                }
            }
        case 0:
        case 1:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
                {
                    return 0 + value * (1000 - 0);
                }
            }
        case 3:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
                {
                    return -100 + value * (10 - -100);
                }
            }
        default:
            index -= 6;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->convertFromNormalizedParameterValue(index, value);
    
            return value;
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            return this->param_07_value_constrain(value);
        case 1:
            return this->param_08_value_constrain(value);
        case 2:
            return this->param_09_value_constrain(value);
        case 3:
            return this->param_10_value_constrain(value);
        case 4:
            return this->param_11_value_constrain(value);
        case 5:
            return this->param_12_value_constrain(value);
        default:
            index -= 6;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->constrainParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->constrainParameterValue(index, value);
    
            return value;
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 1646922831:
            this->snapshot_01_out_set(value);
            break;
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_09->processNumMessage(tag, objectId, time, payload);
        this->p_10->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_09->processListMessage(tag, objectId, time, payload);
        this->p_10->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_09->processBangMessage(tag, objectId, time);
        this->p_10->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("compression"):
            return "compression";
        case TAG(""):
            return "";
        }
    
        auto subpatchResult_0 = this->p_09->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_10->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            return nullptr;
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->p_09->processDataViewUpdate(index, time);
        this->p_10->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void param_07_value_set(number v) {
        v = this->param_07_value_constrain(v);
        this->param_07_value = v;
        this->sendParameter(0, false);
    
        if (this->param_07_value != this->param_07_lastValue) {
            this->getEngine()->presetTouched();
            this->param_07_lastValue = this->param_07_value;
        }
    
        this->p_10_in6_number_set(v);
        this->p_09_in6_number_set(v);
    }
    
    void param_08_value_set(number v) {
        v = this->param_08_value_constrain(v);
        this->param_08_value = v;
        this->sendParameter(1, false);
    
        if (this->param_08_value != this->param_08_lastValue) {
            this->getEngine()->presetTouched();
            this->param_08_lastValue = this->param_08_value;
        }
    
        this->p_10_in5_number_set(v);
        this->p_09_in5_number_set(v);
    }
    
    void param_09_value_set(number v) {
        v = this->param_09_value_constrain(v);
        this->param_09_value = v;
        this->sendParameter(2, false);
    
        if (this->param_09_value != this->param_09_lastValue) {
            this->getEngine()->presetTouched();
            this->param_09_lastValue = this->param_09_value;
        }
    
        this->p_10_in4_number_set(v);
        this->p_09_in4_number_set(v);
    }
    
    void param_10_value_set(number v) {
        v = this->param_10_value_constrain(v);
        this->param_10_value = v;
        this->sendParameter(3, false);
    
        if (this->param_10_value != this->param_10_lastValue) {
            this->getEngine()->presetTouched();
            this->param_10_lastValue = this->param_10_value;
        }
    
        this->p_10_in3_number_set(v);
        this->p_09_in3_number_set(v);
    }
    
    void param_11_value_set(number v) {
        v = this->param_11_value_constrain(v);
        this->param_11_value = v;
        this->sendParameter(4, false);
    
        if (this->param_11_value != this->param_11_lastValue) {
            this->getEngine()->presetTouched();
            this->param_11_lastValue = this->param_11_value;
        }
    
        this->p_10_in2_number_set(v);
        this->p_09_in2_number_set(v);
    }
    
    void param_12_value_set(number v) {
        v = this->param_12_value_constrain(v);
        this->param_12_value = v;
        this->sendParameter(5, false);
    
        if (this->param_12_value != this->param_12_lastValue) {
            this->getEngine()->presetTouched();
            this->param_12_lastValue = this->param_12_value;
        }
    
        this->dspexpr_66_in3_set(v);
        this->dspexpr_65_in3_set(v);
    }
    
    void snapshot_01_out_set(number v) {
        this->snapshot_01_out = v;
        this->outport_01_input_number_set(v);
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->p_09->initializeObjects();
        this->p_10->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_09->startup();
        this->p_10->startup();
    
        {
            this->scheduleParamInit(0, 0);
        }
    
        {
            this->scheduleParamInit(1, 0);
        }
    
        {
            this->scheduleParamInit(2, 0);
        }
    
        {
            this->scheduleParamInit(3, 0);
        }
    
        {
            this->scheduleParamInit(4, 0);
        }
    
        {
            this->scheduleParamInit(5, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_09->allocateDataRefs();
        this->p_10->allocateDataRefs();
    }
    
    static number param_07_value_constrain(number v) {
        v = (v > 1000 ? 1000 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_10_in6_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_12_out1_number_set(v);
    }
    
    void p_09_in6_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_07_out1_number_set(v);
    }
    
    static number param_08_value_constrain(number v) {
        v = (v > 1000 ? 1000 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_10_in5_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_11_out1_number_set(v);
    }
    
    void p_09_in5_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_06_out1_number_set(v);
    }
    
    static number param_09_value_constrain(number v) {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_10_in4_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_14_out1_number_set(v);
    }
    
    void p_09_in4_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_09_out1_number_set(v);
    }
    
    static number param_10_value_constrain(number v) {
        v = (v > 10 ? 10 : (v < -100 ? -100 : v));
        return v;
    }
    
    void p_10_in3_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_13_out1_number_set(v);
    }
    
    void p_09_in3_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_08_out1_number_set(v);
    }
    
    static number param_11_value_constrain(number v) {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_10_in2_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_10_out1_number_set(v);
    }
    
    void p_09_in2_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_05_out1_number_set(v);
    }
    
    static number param_12_value_constrain(number v) {
        v = (v > 1 ? 1 : (v < 0 ? 0 : v));
        return v;
    }
    
    void dspexpr_66_in3_set(number v) {
        this->dspexpr_66_in3 = v;
    }
    
    void dspexpr_65_in3_set(number v) {
        this->dspexpr_65_in3 = v;
    }
    
    void outport_01_input_number_set(number v) {
        this->getEngine()->sendNumMessage(TAG("compression"), TAG(""), v, this->_currentTime);
    }
    
    void p_09_perform(Sample * in1, Sample * out1, Sample * out2, Index n) {
        // subpatcher: compressor
        SampleArray<1> ins = {in1};
    
        SampleArray<2> outs = {out1, out2};
        this->p_09->process(ins, 1, outs, 2, n);
    }
    
    void dspexpr_65_perform(const Sample * in1, const Sample * in2, number in3, Sample * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] + in3 * (in2[(Index)i] - in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void snapshot_01_perform(const Sample * input_signal, Index n) {
        auto __snapshot_01_lastValue = this->snapshot_01_lastValue;
        auto __snapshot_01_calc = this->snapshot_01_calc;
        auto __snapshot_01_count = this->snapshot_01_count;
        auto __snapshot_01_nextTime = this->snapshot_01_nextTime;
        auto __snapshot_01_interval = this->snapshot_01_interval;
        number timeInSamples = this->msToSamps(__snapshot_01_interval, this->sr);
    
        if (__snapshot_01_interval > 0) {
            for (Index i = 0; i < n; i++) {
                if (__snapshot_01_nextTime <= __snapshot_01_count + (SampleIndex)(i)) {
                    {
                        __snapshot_01_calc = input_signal[(Index)i];
                    }
    
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1646922831,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        __snapshot_01_calc
                    );;
    
                    __snapshot_01_calc = 0;
                    __snapshot_01_nextTime += timeInSamples;
                }
            }
    
            __snapshot_01_count += this->vs;
        }
    
        __snapshot_01_lastValue = input_signal[(Index)(n - 1)];
        this->snapshot_01_nextTime = __snapshot_01_nextTime;
        this->snapshot_01_count = __snapshot_01_count;
        this->snapshot_01_calc = __snapshot_01_calc;
        this->snapshot_01_lastValue = __snapshot_01_lastValue;
    }
    
    void p_10_perform(Sample * in1, Sample * out1, Index n) {
        // subpatcher: compressor
        SampleArray<1> ins = {in1};
    
        SampleArray<1> outs = {out1};
        this->p_10->process(ins, 1, outs, 1, n);
    }
    
    void dspexpr_66_perform(const Sample * in1, const Sample * in2, number in3, Sample * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] + in3 * (in2[(Index)i] - in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void param_07_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_07_value;
    }
    
    void param_07_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_07_value_set(preset["value"]);
    }
    
    void param_08_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_08_value;
    }
    
    void param_08_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_08_value_set(preset["value"]);
    }
    
    void param_09_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_09_value;
    }
    
    void param_09_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_09_value_set(preset["value"]);
    }
    
    void param_10_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_10_value;
    }
    
    void param_10_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_10_value_set(preset["value"]);
    }
    
    void param_11_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_11_value;
    }
    
    void param_11_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_11_value_set(preset["value"]);
    }
    
    void param_12_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_12_value;
    }
    
    void param_12_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_12_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        dspexpr_65_in1 = 0;
        dspexpr_65_in2 = 0;
        dspexpr_65_in3 = 0;
        p_09_target = 0;
        dspexpr_66_in1 = 0;
        dspexpr_66_in2 = 0;
        dspexpr_66_in3 = 0;
        p_10_target = 0;
        snapshot_01_interval = 5;
        snapshot_01_out = 0;
        param_07_value = 50;
        param_08_value = 5;
        param_09_value = 3;
        param_10_value = -30;
        param_11_value = 0;
        param_12_value = 1;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        snapshot_01_calc = 0;
        snapshot_01_nextTime = 0;
        snapshot_01_count = 0;
        snapshot_01_lastValue = 0;
        param_07_lastValue = 0;
        param_08_lastValue = 0;
        param_09_lastValue = 0;
        param_10_lastValue = 0;
        param_11_lastValue = 0;
        param_12_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number dspexpr_65_in1;
        number dspexpr_65_in2;
        number dspexpr_65_in3;
        number p_09_target;
        number dspexpr_66_in1;
        number dspexpr_66_in2;
        number dspexpr_66_in3;
        number p_10_target;
        number snapshot_01_interval;
        number snapshot_01_out;
        number param_07_value;
        number param_08_value;
        number param_09_value;
        number param_10_value;
        number param_11_value;
        number param_12_value;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[2];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number snapshot_01_calc;
        number snapshot_01_nextTime;
        SampleIndex snapshot_01_count;
        number snapshot_01_lastValue;
        number param_07_lastValue;
        number param_08_lastValue;
        number param_09_lastValue;
        number param_10_lastValue;
        number param_11_lastValue;
        number param_12_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_1033* p_09;
        RNBOSubpatcher_1034* p_10;
    
};

class RNBOSubpatcher_1055 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_1055()
    {
    }
    
    ~RNBOSubpatcher_1055()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 1733719949, false);
        getEngine()->flushClockEvents(this, -1697752436, false);
        getEngine()->flushClockEvents(this, 29237386, false);
        getEngine()->flushClockEvents(this, 892732297, false);
        getEngine()->flushClockEvents(this, -834257525, false);
        getEngine()->flushClockEvents(this, -1468824490, false);
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    number samplerate() {
        return this->sr;
    }
    
    Index vectorsize() {
        return this->vs;
    }
    
    ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
        if (!stringCompare(paramid, "button_obj-20/bangval")) {
            return 0;
        }
    
        return INVALID_INDEX;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        SampleValue ** inputs,
        Index numInputs,
        SampleValue ** outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    
        if (this->getIsMuted())
            return;
    
        this->rect_tilde_01_perform(
            this->rect_tilde_01_frequency,
            this->rect_tilde_01_pulsewidth,
            this->rect_tilde_01_syncPhase,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->adsr_01_perform(
            this->adsr_01_attack,
            this->adsr_01_decay,
            this->adsr_01_sustain,
            this->adsr_01_release,
            this->zeroBuffer,
            this->signals[1],
            n
        );
    
        this->dspexpr_67_perform(this->signals[0], this->signals[1], this->signals[2], n);
        this->dspexpr_68_perform(this->signals[2], this->dspexpr_68_in2, this->signals[1], n);
        this->signaladder_11_perform(this->signals[1], out1, out1, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 3; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->adsr_01_triggerBuf = resizeSignal(this->adsr_01_triggerBuf, this->maxvs, maxBlockSize);
            this->adsr_01_triggerValueBuf = resizeSignal(this->adsr_01_triggerValueBuf, this->maxvs, maxBlockSize);
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->adsr_01_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            this->setProbingIndex(-1);
            break;
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    void setVoiceIndex(Index index)  {
        this->_voiceIndex = index;
    }
    
    void setNoteNumber(Int noteNumber)  {
        this->_noteNumber = noteNumber;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        RNBO_UNUSED(v);
        this->updateTime(time);
    
        switch (index) {
        case 0:
            this->button_01_bangval_bang();
            break;
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            return 0;
        }
    }
    
    ParameterValue getPolyParameterValue(PatcherInterface** voices, ParameterIndex index)  {
        switch (index) {
        default:
            return voices[0]->getParameterValue(index);
        }
    }
    
    void setPolyParameterValue(
        PatcherInterface** voices,
        ParameterIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        switch (index) {
        default:
            for (Index i = 0; i < 4; i++)
                voices[i]->setParameterValue(index, value, time);
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 1;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "button_01_bangval";
        default:
            return "bogus";
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "p_obj-38/button_obj-20/bangval";
        default:
            return "bogus";
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        if (this->_voiceIndex == 1)
            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void sendPolyParameter(ParameterIndex index, Index voiceIndex, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset + voiceIndex - 1, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            return value;
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            return value;
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            return value;
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 1733719949:
            this->loadmess_03_startupbang_bang();
            break;
        case -1697752436:
            this->loadmess_04_startupbang_bang();
            break;
        case 29237386:
            this->loadmess_05_startupbang_bang();
            break;
        case 892732297:
            this->loadmess_06_startupbang_bang();
            break;
        case -834257525:
            this->loadmess_07_startupbang_bang();
            break;
        case -1468824490:
            this->adsr_01_mute_bang();
            break;
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            if (TAG("p_obj-38/loadmess_obj-12") == objectId)
                this->loadmess_03_startupbang_bang();
    
            if (TAG("p_obj-38/loadmess_obj-13") == objectId)
                this->loadmess_04_startupbang_bang();
    
            if (TAG("p_obj-38/loadmess_obj-5") == objectId)
                this->loadmess_05_startupbang_bang();
    
            if (TAG("p_obj-38/loadmess_obj-2") == objectId)
                this->loadmess_06_startupbang_bang();
    
            if (TAG("p_obj-38/loadmess_obj-14") == objectId)
                this->loadmess_07_startupbang_bang();
    
            break;
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("startupbang"):
            return "startupbang";
        case TAG("p_obj-38/loadmess_obj-12"):
            return "p_obj-38/loadmess_obj-12";
        case TAG("p_obj-38/loadmess_obj-13"):
            return "p_obj-38/loadmess_obj-13";
        case TAG("p_obj-38/loadmess_obj-5"):
            return "p_obj-38/loadmess_obj-5";
        case TAG("p_obj-38/loadmess_obj-2"):
            return "p_obj-38/loadmess_obj-2";
        case TAG("p_obj-38/loadmess_obj-14"):
            return "p_obj-38/loadmess_obj-14";
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            return nullptr;
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 0) {
            this->mtof_01_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        }
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->mtof_01_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
    }
    
    protected:
    
    void eventinlet_15_out1_bang_bang() {
        this->mtof_01_midivalue_bang();
    }
    
    void loadmess_03_startupbang_bang() {
        this->loadmess_03_message_bang();
    }
    
    void eventinlet_16_out1_bang_bang() {
        this->expr_18_in1_bang();
    }
    
    void eventinlet_16_out1_number_set(number v) {
        this->expr_18_in1_set(v);
    }
    
    void eventinlet_16_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_18_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_18_in1_set(converted);
        }
    }
    
    void loadmess_04_startupbang_bang() {
        this->loadmess_04_message_bang();
    }
    
    void button_01_bangval_bang() {
        this->sendParameter(0, true);
        this->loadmess_04_input_bang();
    }
    
    void loadmess_05_startupbang_bang() {
        this->loadmess_05_message_bang();
    }
    
    void loadmess_06_startupbang_bang() {
        this->loadmess_06_message_bang();
    }
    
    void loadmess_07_startupbang_bang() {
        this->loadmess_07_message_bang();
    }
    
    void adsr_01_mute_bang() {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->mtof_01_innerScala_init();
        this->mtof_01_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->getEngine()->scheduleClockEvent(this, 1733719949, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, -1697752436, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, 29237386, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, -834257525, 0 + this->_currentTime);;
    }
    
    void allocateDataRefs() {
        this->mtof_01_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_01_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_01_innerMtoF_buffer = this->mtof_01_innerMtoF_buffer->allocateIfNeeded();
    }
    
    void adsr_01_trigger_number_set(number v) {
        this->adsr_01_trigger_number = v;
    
        if (v != 0)
            this->adsr_01_triggerBuf[(Index)this->sampleOffsetIntoNextAudioBuffer] = 1;
    
        for (number i = this->sampleOffsetIntoNextAudioBuffer; i < this->vectorsize(); i++) {
            this->adsr_01_triggerValueBuf[(Index)i] = v;
        }
    }
    
    void rect_tilde_01_frequency_set(number v) {
        this->rect_tilde_01_frequency = v;
    }
    
    void rect_tilde_01_pulsewidth_set(number v) {
        this->rect_tilde_01_pulsewidth = v;
    }
    
    void rect_tilde_01_syncPhase_set(number v) {
        this->rect_tilde_01_syncPhase = v;
    }
    
    void mtof_01_out_set(const list& v) {
        {
            if (v->length > 2)
                this->rect_tilde_01_syncPhase_set(v[2]);
    
            if (v->length > 1)
                this->rect_tilde_01_pulsewidth_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->rect_tilde_01_frequency_set(converted);
        }
    }
    
    void mtof_01_midivalue_set(const list& v) {
        this->mtof_01_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_01_midivalue->length; i++) {
            tmp->push(
                this->mtof_01_innerMtoF_next(this->mtof_01_midivalue[(Index)i], this->mtof_01_base)
            );
        }
    
        this->mtof_01_out_set(tmp);
    }
    
    void eventinlet_15_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->adsr_01_trigger_number_set(converted);
        }
    
        this->mtof_01_midivalue_set(v);
    }
    
    void eventinlet_15_out1_number_set(number v) {
        this->adsr_01_trigger_number_set(v);
    
        {
            list converted = {v};
            this->mtof_01_midivalue_set(converted);
        }
    }
    
    void mtof_01_midivalue_bang() {
        list tmp = list();
    
        for (int i = 0; i < this->mtof_01_midivalue->length; i++) {
            tmp->push(
                this->mtof_01_innerMtoF_next(this->mtof_01_midivalue[(Index)i], this->mtof_01_base)
            );
        }
    
        this->mtof_01_out_set(tmp);
    }
    
    void adsr_01_attack_set(number v) {
        this->adsr_01_attack = v;
    }
    
    void loadmess_03_message_bang() {
        list v = this->loadmess_03_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->adsr_01_attack_set(converted);
        }
    }
    
    void dspexpr_68_in2_set(number v) {
        this->dspexpr_68_in2 = v;
    }
    
    void expr_18_out1_set(number v) {
        this->expr_18_out1 = v;
        this->dspexpr_68_in2_set(this->expr_18_out1);
    }
    
    void expr_18_in1_bang() {
        this->expr_18_out1_set(
            (this->expr_18_in2 == 0 ? 0 : (this->expr_18_in2 == 0. ? 0. : this->expr_18_in1 / this->expr_18_in2))
        );//#map:p_obj-38//_obj-17:1
    }
    
    void expr_18_in1_set(number in1) {
        this->expr_18_in1 = in1;
    
        this->expr_18_out1_set(
            (this->expr_18_in2 == 0 ? 0 : (this->expr_18_in2 == 0. ? 0. : this->expr_18_in1 / this->expr_18_in2))
        );//#map:p_obj-38//_obj-17:1
    }
    
    void expr_18_in2_set(number v) {
        this->expr_18_in2 = v;
    }
    
    void adsr_01_decay_set(number v) {
        this->adsr_01_decay = v;
    }
    
    void loadmess_04_message_bang() {
        list v = this->loadmess_04_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->adsr_01_decay_set(converted);
        }
    }
    
    void loadmess_04_input_bang() {
        this->loadmess_04_message_bang();
    }
    
    void adsr_01_sustain_set(number v) {
        this->adsr_01_sustain = v;
    }
    
    void loadmess_05_message_bang() {
        list v = this->loadmess_05_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->adsr_01_sustain_set(converted);
        }
    }
    
    void loadmess_06_message_bang() {
        list v = this->loadmess_06_message;
    
        {
            if (v->length > 1)
                this->expr_18_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_18_in1_set(converted);
        }
    }
    
    void adsr_01_release_set(number v) {
        this->adsr_01_release = v;
    }
    
    void loadmess_07_message_bang() {
        list v = this->loadmess_07_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->adsr_01_release_set(converted);
        }
    }
    
    void midiouthelper_midiout_set(number ) {}
    
    void rect_tilde_01_perform(
        number frequency,
        number pulsewidth,
        number syncPhase,
        Sample * out1,
        Sample * out2,
        Index n
    ) {
        RNBO_UNUSED(syncPhase);
        RNBO_UNUSED(pulsewidth);
        auto __rect_tilde_01_xHistory = this->rect_tilde_01_xHistory;
        auto __rect_tilde_01_yHistory = this->rect_tilde_01_yHistory;
        auto __rect_tilde_01_didSync = this->rect_tilde_01_didSync;
        auto __rect_tilde_01_lastSyncDiff = this->rect_tilde_01_lastSyncDiff;
        auto __rect_tilde_01_lastSyncPhase = this->rect_tilde_01_lastSyncPhase;
        auto __rect_tilde_01_t = this->rect_tilde_01_t;
        Index i;
    
        for (i = 0; i < n; i++) {
            if (frequency <= 0) {
                out1[(Index)i] = 0;
                out2[(Index)i] = __rect_tilde_01_t;
                continue;
            }
    
            number dt = frequency / this->samplerate();
            number pw = 0.5;
            number syncDiff = 0 - __rect_tilde_01_lastSyncPhase;
            __rect_tilde_01_lastSyncPhase = 0;
            __rect_tilde_01_lastSyncDiff = syncDiff;
            number syncLookahead = 0 + syncDiff;
            number tCurr = __rect_tilde_01_t;
            number tPrev = tCurr - dt;
            number tNext = tCurr + dt;
    
            if (tPrev < 0) {
                while (tPrev < 0) {
                    tPrev += 1;
                }
            }
    
            if (tNext > 1) {
                while (tNext >= 1) {
                    tNext -= 1;
                }
            }
    
            number yNext = this->rect_tilde_01_rectangle(tNext, pw);
            number yCurr = this->rect_tilde_01_rectangle(tCurr, pw);
            number yPrev = this->rect_tilde_01_rectangle(tPrev, pw);
    
            if (yPrev < yCurr) {
                number d = tCurr / dt;
                yCurr += d - 0.5 * d * d - 0.5;
            } else if (yCurr < yNext) {
                number d = (1 - tCurr) / dt;
                yCurr += 0.5 * d * d + d + 0.5;
            } else if (yPrev > yCurr) {
                number d = (tCurr - pw) / dt;
                yCurr -= d - 0.5 * d * d - 0.5;
            } else if (yCurr > yNext) {
                number d = (pw - tCurr) / dt;
                yCurr -= 0.5 * d * d + d + 0.5;
            } else if ((bool)(__rect_tilde_01_didSync)) {
                yCurr = 0.25;
                __rect_tilde_01_didSync = false;
            } else if (syncLookahead > 1) {
                if (yCurr < 0) {
                    yCurr = -0.125;
                }
    
                __rect_tilde_01_t = 0;
                __rect_tilde_01_didSync = true;
            }
    
            __rect_tilde_01_t += dt;
    
            if (dt > 0) {
                while (__rect_tilde_01_t >= 1) {
                    __rect_tilde_01_t -= 1;
                }
            } else {
                while (__rect_tilde_01_t <= 0) {
                    __rect_tilde_01_t += 1;
                }
            }
    
            number output = yCurr - __rect_tilde_01_yHistory + __rect_tilde_01_xHistory * 0.9997;
            __rect_tilde_01_xHistory = output;
            __rect_tilde_01_yHistory = yCurr;
            out1[(Index)i] = 0.5 * output;
            out2[(Index)i] = __rect_tilde_01_t;
        }
    
        this->rect_tilde_01_t = __rect_tilde_01_t;
        this->rect_tilde_01_lastSyncPhase = __rect_tilde_01_lastSyncPhase;
        this->rect_tilde_01_lastSyncDiff = __rect_tilde_01_lastSyncDiff;
        this->rect_tilde_01_didSync = __rect_tilde_01_didSync;
        this->rect_tilde_01_yHistory = __rect_tilde_01_yHistory;
        this->rect_tilde_01_xHistory = __rect_tilde_01_xHistory;
    }
    
    void adsr_01_perform(
        number attack,
        number decay,
        number sustain,
        number release,
        const Sample * trigger_signal,
        Sample * out,
        Index n
    ) {
        RNBO_UNUSED(trigger_signal);
        auto __adsr_01_trigger_number = this->adsr_01_trigger_number;
        auto __adsr_01_time = this->adsr_01_time;
        auto __adsr_01_amplitude = this->adsr_01_amplitude;
        auto __adsr_01_outval = this->adsr_01_outval;
        auto __adsr_01_startingpoint = this->adsr_01_startingpoint;
        auto __adsr_01_phase = this->adsr_01_phase;
        auto __adsr_01_legato = this->adsr_01_legato;
        auto __adsr_01_triggerBuf = this->adsr_01_triggerBuf;
        auto __adsr_01_lastTriggerVal = this->adsr_01_lastTriggerVal;
        auto __adsr_01_triggerValueBuf = this->adsr_01_triggerValueBuf;
        auto __adsr_01_mspersamp = this->adsr_01_mspersamp;
        bool bangMute = false;
    
        for (Index i = 0; i < n; i++) {
            number clampedattack = (attack > __adsr_01_mspersamp ? attack : __adsr_01_mspersamp);
            number clampeddecay = (decay > __adsr_01_mspersamp ? decay : __adsr_01_mspersamp);
            number clampedrelease = (release > __adsr_01_mspersamp ? release : __adsr_01_mspersamp);
            number currentTriggerVal = __adsr_01_triggerValueBuf[(Index)i];
    
            if ((__adsr_01_lastTriggerVal == 0.0 && currentTriggerVal != 0.0) || __adsr_01_triggerBuf[(Index)i] == 1) {
                if ((bool)(__adsr_01_legato)) {
                    if (__adsr_01_phase != 0) {
                        __adsr_01_startingpoint = __adsr_01_outval;
                    } else {
                        __adsr_01_startingpoint = 0;
                    }
                } else {
                    __adsr_01_startingpoint = 0;
                }
    
                __adsr_01_amplitude = currentTriggerVal;
                __adsr_01_phase = 1;
                __adsr_01_time = 0.0;
                bangMute = false;
            } else if (__adsr_01_lastTriggerVal != 0.0 && currentTriggerVal == 0.0) {
                if (__adsr_01_phase != 4 && __adsr_01_phase != 0) {
                    __adsr_01_phase = 4;
                    __adsr_01_amplitude = __adsr_01_outval;
                    __adsr_01_time = 0.0;
                }
            }
    
            __adsr_01_time += __adsr_01_mspersamp;
    
            if (__adsr_01_phase == 0) {
                __adsr_01_outval = 0;
            } else if (__adsr_01_phase == 1) {
                if (__adsr_01_time > clampedattack) {
                    __adsr_01_time -= clampedattack;
                    __adsr_01_phase = 2;
                    __adsr_01_outval = __adsr_01_amplitude;
                } else {
                    __adsr_01_outval = (__adsr_01_amplitude - __adsr_01_startingpoint) * __adsr_01_time / clampedattack + __adsr_01_startingpoint;
                }
            } else if (__adsr_01_phase == 2) {
                if (__adsr_01_time > clampeddecay) {
                    __adsr_01_time -= clampeddecay;
                    __adsr_01_phase = 3;
                    __adsr_01_outval = __adsr_01_amplitude * sustain;
                } else {
                    __adsr_01_outval = __adsr_01_amplitude * sustain + (__adsr_01_amplitude - __adsr_01_amplitude * sustain) * (1. - __adsr_01_time / clampeddecay);
                }
            } else if (__adsr_01_phase == 3) {
                __adsr_01_outval = __adsr_01_amplitude * sustain;
            } else if (__adsr_01_phase == 4) {
                if (__adsr_01_time > clampedrelease) {
                    __adsr_01_time = 0;
                    __adsr_01_phase = 0;
                    __adsr_01_outval = 0;
                    __adsr_01_amplitude = 0;
                    bangMute = true;
                } else {
                    __adsr_01_outval = __adsr_01_amplitude * (1.0 - __adsr_01_time / clampedrelease);
                }
            }
    
            out[(Index)i] = __adsr_01_outval;
            __adsr_01_triggerBuf[(Index)i] = 0;
            __adsr_01_triggerValueBuf[(Index)i] = __adsr_01_trigger_number;
            __adsr_01_lastTriggerVal = currentTriggerVal;
        }
    
        if ((bool)(bangMute)) {
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1468824490,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                0
            );;
        }
    
        this->adsr_01_lastTriggerVal = __adsr_01_lastTriggerVal;
        this->adsr_01_phase = __adsr_01_phase;
        this->adsr_01_startingpoint = __adsr_01_startingpoint;
        this->adsr_01_outval = __adsr_01_outval;
        this->adsr_01_amplitude = __adsr_01_amplitude;
        this->adsr_01_time = __adsr_01_time;
    }
    
    void dspexpr_67_perform(const Sample * in1, const Sample * in2, Sample * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_68_perform(const Sample * in1, number in2, Sample * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void signaladder_11_perform(const Sample * in1, const Sample * in2, Sample * out, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    number mtof_01_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_01_innerMtoF_lastInValue && tuning == this->mtof_01_innerMtoF_lastTuning)
            return this->mtof_01_innerMtoF_lastOutValue;
    
        this->mtof_01_innerMtoF_lastInValue = midivalue;
        this->mtof_01_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_01_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_01_innerMtoF_lastOutValue;
    }
    
    void mtof_01_innerMtoF_reset() {
        this->mtof_01_innerMtoF_lastInValue = 0;
        this->mtof_01_innerMtoF_lastOutValue = 0;
        this->mtof_01_innerMtoF_lastTuning = 0;
    }
    
    void mtof_01_innerScala_mid(int v) {
        this->mtof_01_innerScala_kbmMid = v;
        this->mtof_01_innerScala_updateRefFreq();
    }
    
    void mtof_01_innerScala_ref(int v) {
        this->mtof_01_innerScala_kbmRefNum = v;
        this->mtof_01_innerScala_updateRefFreq();
    }
    
    void mtof_01_innerScala_base(number v) {
        this->mtof_01_innerScala_kbmRefFreq = v;
        this->mtof_01_innerScala_updateRefFreq();
    }
    
    void mtof_01_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_01_innerScala_updateScale(sclValid);
    }
    
    void mtof_01_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_01_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_01_innerScala_updateMap(map);
        }
    }
    
    number mtof_01_innerScala_mtof(number note) {
        if ((bool)(this->mtof_01_innerScala_lastValid) && this->mtof_01_innerScala_lastNote == note) {
            return this->mtof_01_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_01_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_01_innerScala_applySCL(degoct[0], fract(note), this->mtof_01_innerScala_refFreq);
        }
    
        this->mtof_01_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_01_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_01_innerScala_lastValid) && this->mtof_01_innerScala_lastFreq == hz) {
            return this->mtof_01_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_01_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_01_innerScala_kbmSize == 0) {
            out = this->mtof_01_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(degree, this->mtof_01_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_01_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_01_innerScala_kbmValid[(Index)(i + this->mtof_01_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_01_innerScala_kbmSize + entry + this->mtof_01_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_01_innerScala_updateLast(out, hz);
        return this->mtof_01_innerScala_lastNote;
    }
    
    int mtof_01_innerScala_updateScale(list scl) {
        if (scl->length > 1 && scl[0] * 2 + 1 == scl->length) {
            this->mtof_01_innerScala_lastValid = false;
            this->mtof_01_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < scl->length; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_01_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_01_innerScala_sclOctaveMul = last;
            this->mtof_01_innerScala_sclEntryCount = (int)(this->mtof_01_innerScala_sclExpMul->length);
            this->mtof_01_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_01_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_01_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_01_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_01_innerScala_kbmSize = (int)(size);
            this->mtof_01_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_01_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_01_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_01_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_01_innerScala_kbmRefFreq = kbm[5];
            this->mtof_01_innerScala_kbmOctaveDegree = octave;
            this->mtof_01_innerScala_kbmValid = kbm;
            this->mtof_01_innerScala_kbmMapSize = (kbm->length - this->mtof_01_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_01_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_01_innerScala_KBM_MAP_OFFSET));
            this->mtof_01_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_01_innerScala_updateLast(number note, number freq) {
        this->mtof_01_innerScala_lastValid = true;
        this->mtof_01_innerScala_lastNote = note;
        this->mtof_01_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_01_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_01_innerScala_refFreq) / this->mtof_01_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_01_innerScala_sclEntryCount; i++) {
            number c = this->mtof_01_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_01_innerScala_refFreq);
            n = this->mtof_01_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_01_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_01_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_01_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_01_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_01_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_01_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_01_innerScala_applyKBM(number note) {
        if ((this->mtof_01_innerScala_kbmMin == this->mtof_01_innerScala_kbmMax && this->mtof_01_innerScala_kbmMax == 0) || (note >= this->mtof_01_innerScala_kbmMin && note <= this->mtof_01_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_01_innerScala_kbmMid));
    
            if (this->mtof_01_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(degree, this->mtof_01_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_01_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_01_innerScala_kbmValid[(Index)(this->mtof_01_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_01_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_01_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(degree, this->mtof_01_innerScala_sclEntryCount);
        return this->mtof_01_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_01_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_01_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_01_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_01_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_01_innerScala_sclOctaveMul);
    }
    
    void mtof_01_innerScala_updateRefFreq() {
        this->mtof_01_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_01_innerScala_kbmRefNum - this->mtof_01_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_01_innerScala_refFreq = this->mtof_01_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_01_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_01_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_01_innerScala_kbmSize) {
                if (index < this->mtof_01_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_01_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_01_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_01_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_01_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_01_innerScala_refFreq = this->mtof_01_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_01_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_01_innerScala_reset() {
        this->mtof_01_innerScala_internal = true;
        this->mtof_01_innerScala_lastValid = false;
        this->mtof_01_innerScala_lastNote = 0;
        this->mtof_01_innerScala_lastFreq = 0;
        this->mtof_01_innerScala_sclEntryCount = 0;
        this->mtof_01_innerScala_sclOctaveMul = 1;
        this->mtof_01_innerScala_sclExpMul = {};
        this->mtof_01_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_01_innerScala_kbmMid = 60;
        this->mtof_01_innerScala_kbmRefNum = 69;
        this->mtof_01_innerScala_kbmRefFreq = 440;
        this->mtof_01_innerScala_kbmSize = 0;
        this->mtof_01_innerScala_kbmMin = 0;
        this->mtof_01_innerScala_kbmMax = 0;
        this->mtof_01_innerScala_kbmOctaveDegree = 12;
        this->mtof_01_innerScala_kbmMapSize = 0;
        this->mtof_01_innerScala_refFreq = 261.63;
    }
    
    void mtof_01_init() {
        this->mtof_01_innerScala_update(this->mtof_01_scale, this->mtof_01_map);
    }
    
    number rect_tilde_01_rectangle(number phase, number pulsewidth) {
        if (phase < pulsewidth) {
            return 1;
        } else {
            return -1;
        }
    }
    
    void adsr_01_dspsetup(bool force) {
        if ((bool)(this->adsr_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->adsr_01_mspersamp = (number)1000 / this->sr;
        this->adsr_01_setupDone = true;
    }
    
    void midiouthelper_sendMidi(number v) {
        this->midiouthelper_midiout_set(v);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        dspexpr_67_in1 = 0;
        dspexpr_67_in2 = 0;
        dspexpr_68_in1 = 0;
        dspexpr_68_in2 = 0;
        mtof_01_base = 440;
        rect_tilde_01_frequency = 0.4;
        rect_tilde_01_pulsewidth = 0.5;
        rect_tilde_01_syncPhase = 0;
        adsr_01_trigger_number = 0;
        adsr_01_attack = 0;
        adsr_01_decay = 0;
        adsr_01_sustain = 0;
        adsr_01_release = 0;
        adsr_01_legato = 0;
        loadmess_03_message = { 2 };
        loadmess_04_message = { 250 };
        loadmess_05_message = { 0 };
        expr_18_in1 = 0;
        expr_18_in2 = 127;
        expr_18_out1 = 0;
        loadmess_06_message = { 3 };
        loadmess_07_message = { 0 };
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        mtof_01_innerMtoF_lastInValue = 0;
        mtof_01_innerMtoF_lastOutValue = 0;
        mtof_01_innerMtoF_lastTuning = 0;
        mtof_01_innerScala_internal = true;
        mtof_01_innerScala_lastValid = false;
        mtof_01_innerScala_lastNote = 0;
        mtof_01_innerScala_lastFreq = 0;
        mtof_01_innerScala_sclEntryCount = 0;
        mtof_01_innerScala_sclOctaveMul = 1;
        mtof_01_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_01_innerScala_kbmMid = 60;
        mtof_01_innerScala_kbmRefNum = 69;
        mtof_01_innerScala_kbmRefFreq = 440;
        mtof_01_innerScala_kbmSize = 0;
        mtof_01_innerScala_kbmMin = 0;
        mtof_01_innerScala_kbmMax = 0;
        mtof_01_innerScala_kbmOctaveDegree = 12;
        mtof_01_innerScala_kbmMapSize = 0;
        mtof_01_innerScala_refFreq = 261.63;
        rect_tilde_01_xHistory = 0;
        rect_tilde_01_yHistory = 0;
        rect_tilde_01_t = 0;
        rect_tilde_01_lastSyncPhase = 0;
        rect_tilde_01_lastSyncDiff = 0;
        rect_tilde_01_didSync = false;
        adsr_01_phase = 3;
        adsr_01_mspersamp = 0;
        adsr_01_time = 0;
        adsr_01_lastTriggerVal = 0;
        adsr_01_amplitude = 0;
        adsr_01_outval = 0;
        adsr_01_startingpoint = 0;
        adsr_01_triggerBuf = nullptr;
        adsr_01_triggerValueBuf = nullptr;
        adsr_01_setupDone = false;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 0;
        parameterOffset = 0;
    }
    
    // member variables
    
        number dspexpr_67_in1;
        number dspexpr_67_in2;
        number dspexpr_68_in1;
        number dspexpr_68_in2;
        list mtof_01_midivalue;
        list mtof_01_scale;
        list mtof_01_map;
        number mtof_01_base;
        number rect_tilde_01_frequency;
        number rect_tilde_01_pulsewidth;
        number rect_tilde_01_syncPhase;
        number adsr_01_trigger_number;
        number adsr_01_attack;
        number adsr_01_decay;
        number adsr_01_sustain;
        number adsr_01_release;
        number adsr_01_legato;
        list loadmess_03_message;
        list loadmess_04_message;
        list loadmess_05_message;
        number expr_18_in1;
        number expr_18_in2;
        number expr_18_out1;
        list loadmess_06_message;
        list loadmess_07_message;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[3];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number mtof_01_innerMtoF_lastInValue;
        number mtof_01_innerMtoF_lastOutValue;
        number mtof_01_innerMtoF_lastTuning;
        Float64BufferRef mtof_01_innerMtoF_buffer;
        bool mtof_01_innerScala_internal;
        const Index mtof_01_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_01_innerScala_lastValid;
        number mtof_01_innerScala_lastNote;
        number mtof_01_innerScala_lastFreq;
        int mtof_01_innerScala_sclEntryCount;
        number mtof_01_innerScala_sclOctaveMul;
        list mtof_01_innerScala_sclExpMul;
        list mtof_01_innerScala_kbmValid;
        int mtof_01_innerScala_kbmMid;
        int mtof_01_innerScala_kbmRefNum;
        number mtof_01_innerScala_kbmRefFreq;
        int mtof_01_innerScala_kbmSize;
        int mtof_01_innerScala_kbmMin;
        int mtof_01_innerScala_kbmMax;
        int mtof_01_innerScala_kbmOctaveDegree;
        Index mtof_01_innerScala_kbmMapSize;
        number mtof_01_innerScala_refFreq;
        number rect_tilde_01_xHistory;
        number rect_tilde_01_yHistory;
        number rect_tilde_01_t;
        number rect_tilde_01_lastSyncPhase;
        number rect_tilde_01_lastSyncDiff;
        bool rect_tilde_01_didSync;
        Int adsr_01_phase;
        number adsr_01_mspersamp;
        number adsr_01_time;
        number adsr_01_lastTriggerVal;
        number adsr_01_amplitude;
        number adsr_01_outval;
        number adsr_01_startingpoint;
        signal adsr_01_triggerBuf;
        signal adsr_01_triggerValueBuf;
        bool adsr_01_setupDone;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_1056 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_1056()
    {
    }
    
    ~RNBOSubpatcher_1056()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, 892732297, false);
    }
    
    ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
        if (!stringCompare(paramid, "message_obj-38/bangval")) {
            return 0;
        }
    
        if (!stringCompare(paramid, "message_obj-40/bangval")) {
            return 1;
        }
    
        if (!stringCompare(paramid, "number_obj-23/value")) {
            return 2;
        }
    
        if (!stringCompare(paramid, "message_obj-42/bangval")) {
            return 3;
        }
    
        if (!stringCompare(paramid, "message_obj-45/bangval")) {
            return 4;
        }
    
        if (!stringCompare(paramid, "number_obj-20/value")) {
            return 5;
        }
    
        return INVALID_INDEX;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        SampleValue ** inputs,
        Index numInputs,
        SampleValue ** outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            this->setProbingIndex(-1);
            break;
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            this->message_09_bangval_bang();
            break;
        case 1:
            this->message_10_bangval_bang();
            break;
        case 2:
            this->numberobj_27_value_set(v);
            break;
        case 3:
            this->message_11_bangval_bang();
            break;
        case 4:
            this->message_12_bangval_bang();
            break;
        case 5:
            this->numberobj_28_value_set(v);
            break;
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 2:
            return this->numberobj_27_value;
        case 5:
            return this->numberobj_28_value;
        default:
            return 0;
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 6;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "message_09_bangval";
        case 1:
            return "message_10_bangval";
        case 2:
            return "numberobj_27_value";
        case 3:
            return "message_11_bangval";
        case 4:
            return "message_12_bangval";
        case 5:
            return "numberobj_28_value";
        default:
            return "bogus";
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "p_obj-44/message_obj-38/bangval";
        case 1:
            return "p_obj-44/message_obj-40/bangval";
        case 2:
            return "p_obj-44/number_obj-23/value";
        case 3:
            return "p_obj-44/message_obj-42/bangval";
        case 4:
            return "p_obj-44/message_obj-45/bangval";
        case 5:
            return "p_obj-44/number_obj-20/value";
        default:
            return "bogus";
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 1:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 2:
                info->type = ParameterTypeNumber;
                info->initialValue = 45;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 3:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 4:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 5:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 2:
        case 5:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0) / (1 - 0);
                return normalizedValue;
            }
        default:
            return value;
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 2:
        case 5:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
                {
                    return 0 + value * (1 - 0);
                }
            }
        default:
            return value;
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            return value;
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -871642103:
            this->loadbang_03_startupbang_bang();
            break;
        case 892732297:
            this->loadmess_08_startupbang_bang();
            break;
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("format"):
            if (TAG("p_obj-44/number_obj-23") == objectId)
                this->numberobj_27_format_set(payload);
    
            if (TAG("p_obj-44/number_obj-20") == objectId)
                this->numberobj_28_format_set(payload);
    
            break;
        }
    }
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            if (TAG("p_obj-44/loadbang_obj-25") == objectId)
                this->loadbang_03_startupbang_bang();
    
            if (TAG("p_obj-44/loadmess_obj-18") == objectId)
                this->loadmess_08_startupbang_bang();
    
            break;
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("setup"):
            return "setup";
        case TAG("p_obj-44/number_obj-23"):
            return "p_obj-44/number_obj-23";
        case TAG("p_obj-44/number_obj-20"):
            return "p_obj-44/number_obj-20";
        case TAG("format"):
            return "format";
        case TAG("startupbang"):
            return "startupbang";
        case TAG("p_obj-44/loadbang_obj-25"):
            return "p_obj-44/loadbang_obj-25";
        case TAG("p_obj-44/loadmess_obj-18"):
            return "p_obj-44/loadmess_obj-18";
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            return nullptr;
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_17_out1_bang_bang() {
        this->trigger_08_input_bang_bang();
        this->expr_19_in1_bang();
    }
    
    void eventinlet_17_out1_list_set(const list& v) {
        this->trigger_08_input_list_set(v);
    
        {
            if (v->length > 1)
                this->expr_19_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_19_in1_set(converted);
        }
    }
    
    void numberobj_27_format_set(number v) {
        if (v == 0) {
            this->numberobj_27_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_27_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_27_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_27_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_27_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_27_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_27_currentFormat = 6;
        }
    }
    
    void loadbang_03_startupbang_bang() {
        this->loadbang_03_output_bang();
    }
    
    void numberobj_28_format_set(number v) {
        if (v == 0) {
            this->numberobj_28_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_28_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_28_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_28_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_28_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_28_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_28_currentFormat = 6;
        }
    }
    
    void eventinlet_18_out1_bang_bang() {
        this->counter_03_input_bang();
    }
    
    void eventinlet_18_out1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->counter_03_input_bang();
    }
    
    void loadmess_08_startupbang_bang() {
        this->loadmess_08_message_bang();
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->numberobj_27_init();
        this->numberobj_28_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
    }
    
    void allocateDataRefs() {}
    
    void gate_05_onoff_set(number v) {
        this->gate_05_onoff = v;
    }
    
    void expr_20_out1_set(number v) {
        this->expr_20_out1 = v;
        this->gate_05_onoff_set(this->expr_20_out1);
    }
    
    void expr_20_in1_set(number in1) {
        this->expr_20_in1 = in1;
        this->expr_20_out1_set(1 - this->expr_20_in1);//#map:p_obj-44/expr_obj-21:1
    }
    
    void receive_10_output_number_set(number v) {
        this->receive_10_output_number = v;
        this->expr_20_in1_set(v);
    }
    
    void numberobj_28_output_set(number ) {}
    
    void numberobj_28_value_set(number v) {
        this->numberobj_28_value_setter(v);
        v = this->numberobj_28_value;
        this->sendParameter(5, false);
        this->numberobj_28_output_set(v);
    }
    
    void numberobj_27_output_set(number ) {}
    
    void numberobj_27_value_set(number v) {
        this->numberobj_27_value_setter(v);
        v = this->numberobj_27_value;
        this->sendParameter(2, false);
        this->numberobj_27_output_set(v);
    }
    
    void eventoutlet_03_in1_list_set(const list& v) {
        this->getPatcher()->p_31_out1_list_set((list)v);
    }
    
    void listlookup_03_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_27_value_set(converted);
        }
    
        this->eventoutlet_03_in1_list_set(v);
    }
    
    void listlookup_03_input_set(const list& v) {
        this->listlookup_03_input = jsCreateListCopy(v);
        list tmp = list();
    
        for (Index i = 0; i < v->length; i++) {
            long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
    
            if (j >= 0 && (Index)(j) < this->listlookup_03_lookup->length)
                tmp->push(this->listlookup_03_lookup[(Index)j]);
        }
    
        if ((bool)(tmp->length))
            this->listlookup_03_out_set(tmp);
    }
    
    void counter_03_output_set(number v) {
        this->counter_03_output = v;
        this->numberobj_28_value_set(v);
    
        {
            list converted = {v};
            this->listlookup_03_input_set(converted);
        }
    }
    
    void counter_03_overflow_bang_bang() {}
    
    static number counter_03_overflow_number_constrain(number v) {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_03_overflow_number_set(number v) {
        v = this->counter_03_overflow_number_constrain(v);
        this->counter_03_overflow_number = v;
    }
    
    void counter_03_carry_set(number v) {
        this->counter_03_carry = v;
    }
    
    void counter_03_underflow_bang_bang() {}
    
    static number counter_03_underflow_number_constrain(number v) {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_03_underflow_number_set(number v) {
        v = this->counter_03_underflow_number_constrain(v);
        this->counter_03_underflow_number = v;
    }
    
    void counter_03_resetnow_set(number v) {
        this->counter_03_resetnow = v;
        this->counter_03_count = v;
        this->counter_03_input();
    }
    
    void receive_12_output_list_set(const list& v) {
        this->receive_12_output_list = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_03_resetnow_set(converted);
        }
    }
    
    void counter_03_input_bang() {
        this->counter_03_output_set(this->counter_03_count);
        this->counter_03_inc();
    
        if (this->counter_03_count > this->counter_03_maximum) {
            if (this->counter_03_direction == 2) {
                this->counter_03_phase = !(bool)(this->counter_03_phase);
                this->counter_03_count = this->counter_03_maximum;
                this->counter_03_inc();
            } else
                this->counter_03_count = this->counter_03_minimum;
    
            if ((bool)(!(bool)(this->counter_03_overflow_number))) {
                if (this->counter_03_carryflag == 1)
                    this->counter_03_overflow_bang_bang();
                else
                    this->counter_03_overflow_number_set(1);
            }
    
            this->counter_03_carry_set(this->counter_03_carry + 1);
        } else if ((bool)(this->counter_03_overflow_number) && this->counter_03_carryflag == 0)
            this->counter_03_overflow_number_set(0);
    
        if (this->counter_03_count < this->counter_03_minimum) {
            if (this->counter_03_direction == 2) {
                this->counter_03_phase = !(bool)(this->counter_03_phase);
                this->counter_03_count = this->counter_03_minimum;
                this->counter_03_inc();
            } else
                this->counter_03_count = this->counter_03_maximum;
    
            if ((bool)(!(bool)(this->counter_03_underflow_number))) {
                if (this->counter_03_carryflag == 1)
                    this->counter_03_underflow_bang_bang();
                else
                    this->counter_03_underflow_number_set(1);
            }
    
            this->counter_03_carry_set(this->counter_03_carry + 1);
        } else if ((bool)(this->counter_03_underflow_number) && this->counter_03_carryflag == 0)
            this->counter_03_underflow_number_set(0);
    }
    
    void eventinlet_18_out1_number_set(number v) {
        RNBO_UNUSED(v);
        this->counter_03_input_bang();
    }
    
    void expr_21_in2_set(number v) {
        this->expr_21_in2 = v;
    }
    
    void trigger_07_out2_set(number v) {
        this->expr_21_in2_set(v);
    }
    
    void expr_22_in2_set(number v) {
        this->expr_22_in2 = v;
    }
    
    void expr_21_out1_set(number v) {
        this->expr_21_out1 = v;
        this->expr_22_in2_set(this->expr_21_out1);
    }
    
    void expr_21_in1_bang() {
        this->expr_21_out1_set(this->expr_21_in1 + this->expr_21_in2);//#map:p_obj-44/+_obj-8:1
    }
    
    void trigger_07_out1_bang() {
        this->expr_21_in1_bang();
    }
    
    void trigger_07_input_number_set(number v) {
        this->trigger_07_out2_set(rnbo_trunc(v));
        this->trigger_07_out1_bang();
    }
    
    void receive_11_output_number_set(number v) {
        this->receive_11_output_number = v;
        this->trigger_07_input_number_set(v);
    }
    
    void expr_21_in1_set(number in1) {
        this->expr_21_in1 = in1;
        this->expr_21_out1_set(this->expr_21_in1 + this->expr_21_in2);//#map:p_obj-44/+_obj-8:1
    }
    
    void receive_09_output_number_set(number v) {
        this->receive_09_output_number = v;
        this->expr_21_in1_set(v);
    }
    
    void gate_06_onoff_set(number v) {
        this->gate_06_onoff = v;
    }
    
    void trigger_08_out2_set(number v) {
        this->gate_06_onoff_set(v);
    }
    
    void listgroup_03_size_set(number v) {
        this->listgroup_03_size = v;
    }
    
    void listlen_03_out1_set(number v) {
        this->listgroup_03_size_set(v);
    }
    
    void listlen_03_input_set(const list& input) {
        this->listlen_03_input = jsCreateListCopy(input);
    
        {
            this->listlen_03_out1_set(input->length);
            return;
        }
    }
    
    void trigger_09_out2_set(const list& v) {
        this->listlen_03_input_set(v);
    }
    
    void listlookup_03_lookup_set(const list& v) {
        this->listlookup_03_lookup = jsCreateListCopy(v);
    }
    
    void gate_05_out1_list_set(const list& v) {
        this->gate_05_out1_list = jsCreateListCopy(v);
        this->eventoutlet_03_in1_list_set(v);
    }
    
    void gate_05_input_list_set(const list& v) {
        if (this->gate_05_onoff == 1)
            this->gate_05_out1_list_set(v);
    }
    
    void print_05_input_list_set(const list& v) {
        {
            console->log("group", v);
        }
    }
    
    void listgroup_03_out_set(const list& v) {
        this->listlookup_03_lookup_set(v);
        this->gate_05_input_list_set(v);
        this->print_05_input_list_set(v);
    }
    
    void listgroup_03_input_number_set(number v) {
        this->listgroup_03_grouped = this->listgroup_03_grouped->concat(v);
        this->listgroup_03_checkOutput();
    }
    
    void expr_22_out1_set(number v) {
        this->expr_22_out1 = v;
        this->listgroup_03_input_number_set(this->expr_22_out1);
    }
    
    void expr_22_in1_set(number in1) {
        this->expr_22_in1 = in1;
        this->expr_22_out1_set(this->expr_22_in1 + this->expr_22_in2);//#map:p_obj-44/+_obj-28:1
    }
    
    void iter_03_out_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_22_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_22_in1_set(converted);
        }
    }
    
    void iter_03_input_set(const list& v) {
        this->iter_03_input = jsCreateListCopy(v);
        list tmp = list();
        Index i = 0;
        number l = (this->iter_03_size >= 1 ? this->iter_03_size : 1);
    
        while (i < v->length) {
            if (tmp->length == l) {
                this->iter_03_out_set(tmp);
                tmp->length = 0;
            }
    
            tmp->push(v[(Index)i]);
            i++;
        }
    
        if (tmp->length > 0)
            this->iter_03_out_set(tmp);
    }
    
    void trigger_09_out1_set(const list& v) {
        this->iter_03_input_set(v);
    }
    
    void trigger_09_input_list_set(const list& v) {
        this->trigger_09_out2_set(v);
        this->trigger_09_out1_set(v);
    }
    
    void message_09_out_set(const list& v) {
        this->trigger_09_input_list_set(v);
    }
    
    void message_09_bangval_bang() {
        this->sendParameter(0, true);
        this->message_09_out_set({0, 4, 5, 9});
    }
    
    void gate_06_out1_bang_bang() {
        this->message_09_bangval_bang();
    }
    
    void message_10_out_set(const list& v) {
        this->trigger_09_input_list_set(v);
    }
    
    void message_10_bangval_bang() {
        this->sendParameter(1, true);
        this->message_10_out_set({-3, 0, 4, 11});
    }
    
    void gate_06_out2_bang_bang() {
        this->message_10_bangval_bang();
    }
    
    void message_11_out_set(const list& v) {
        this->trigger_09_input_list_set(v);
    }
    
    void message_11_bangval_bang() {
        this->sendParameter(3, true);
        this->message_11_out_set({-1, 4, 7, 11});
    }
    
    void gate_06_out3_bang_bang() {
        this->message_11_bangval_bang();
    }
    
    void message_12_out_set(const list& v) {
        this->trigger_09_input_list_set(v);
    }
    
    void message_12_bangval_bang() {
        this->sendParameter(4, true);
        this->message_12_out_set({2, 4, 7, 9});
    }
    
    void gate_06_out4_bang_bang() {
        this->message_12_bangval_bang();
    }
    
    void gate_06_input_bang_bang() {
        if (this->gate_06_onoff == 1)
            this->gate_06_out1_bang_bang();
        else if (this->gate_06_onoff == 2)
            this->gate_06_out2_bang_bang();
        else if (this->gate_06_onoff == 3)
            this->gate_06_out3_bang_bang();
        else if (this->gate_06_onoff == 4)
            this->gate_06_out4_bang_bang();
    }
    
    void trigger_08_out1_bang() {
        this->gate_06_input_bang_bang();
    }
    
    void trigger_08_input_number_set(number v) {
        this->trigger_08_out2_set(rnbo_trunc(v));
        this->trigger_08_out1_bang();
    }
    
    void route_03_nomatch_bang_bang() {}
    
    void listlookup_03_reset_bang() {
        {
            list __value = list();
            this->listlookup_03_input = jsCreateListCopy(__value);
        };
    
        {
            list __value = list();
            this->listlookup_03_lookup = jsCreateListCopy(__value);
        };
    }
    
    void route_03_match1_bang_bang() {
        this->listlookup_03_reset_bang();
    }
    
    void route_03_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->listlookup_03_reset_bang();
    }
    
    void route_03_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->listlookup_03_reset_bang();
    }
    
    void route_03_nomatch_number_set(number ) {}
    
    void route_03_nomatch_list_set(const list& ) {}
    
    void route_03_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_03_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_03_selector1) {
                if (input->length == 0)
                    this->route_03_match1_bang_bang();
                else if (input->length == 1)
                    this->route_03_match1_number_set(input[0]);
                else
                    this->route_03_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_03_nomatch_number_set(v[0]);
                } else {
                    this->route_03_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_03_input_number_set(number v) {
        this->route_03_input_list_set({v});
    }
    
    void expr_19_out1_set(number v) {
        this->expr_19_out1 = v;
        this->route_03_input_number_set(this->expr_19_out1);
    }
    
    void expr_19_in1_set(number in1) {
        this->expr_19_in1 = in1;
        this->expr_19_out1_set(this->expr_19_in1 < this->expr_19_in2);//#map:p_obj-44/lessthan_obj-26:1
    }
    
    void eventinlet_17_out1_number_set(number v) {
        this->trigger_08_input_number_set(v);
        this->expr_19_in1_set(v);
    }
    
    void trigger_08_input_bang_bang() {
        this->trigger_08_out2_set(0);
        this->trigger_08_out1_bang();
    }
    
    void expr_19_in1_bang() {
        this->expr_19_out1_set(this->expr_19_in1 < this->expr_19_in2);//#map:p_obj-44/lessthan_obj-26:1
    }
    
    void trigger_08_input_list_set(const list& v) {
        this->trigger_08_out2_set((v->length > 0 ? rnbo_trunc(v[0]) : 0));
        this->trigger_08_out1_bang();
    }
    
    void expr_19_in2_set(number v) {
        this->expr_19_in2 = v;
    }
    
    void listgroup_03_input_bang_bang() {
        if (this->listgroup_03_grouped->length > 0) {
            this->listgroup_03_out_set(this->listgroup_03_grouped);
            this->listgroup_03_grouped->length = 0;
        }
    }
    
    void loadbang_03_output_bang() {
        this->listgroup_03_input_bang_bang();
    }
    
    void counter_03_resetnext_set(number v) {
        this->counter_03_resetnext = v;
        this->counter_03_count = v;
    }
    
    void loadmess_08_message_bang() {
        list v = this->loadmess_08_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_03_resetnext_set(converted);
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void iter_03_size_setter(number v) {
        this->iter_03_size = rnbo_floor(v);
    }
    
    void numberobj_27_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_27_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_27_value = localvalue;
    }
    
    void numberobj_28_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_28_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_28_value = localvalue;
    }
    
    void listgroup_03_checkOutput() {
        const Index isize = (const Index)(this->listgroup_03_size);
    
        while (this->listgroup_03_grouped->length >= isize) {
            list tmp = list();
    
            for (Index i = 0; i < isize; i++) {
                tmp->push(this->listgroup_03_grouped[(Index)i]);
            }
    
            this->listgroup_03_out_set(tmp);
            this->listgroup_03_grouped->splice(0, isize);
        }
    }
    
    void numberobj_27_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-44/number_obj-23"), 1, this->_currentTime);
    }
    
    void numberobj_27_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_27_value;
    }
    
    void numberobj_27_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_27_value_set(preset["value"]);
    }
    
    void numberobj_28_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-44/number_obj-20"), 1, this->_currentTime);
    }
    
    void numberobj_28_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_28_value;
    }
    
    void numberobj_28_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_28_value_set(preset["value"]);
    }
    
    void counter_03_inc() {
        this->counter_03_count = ((bool)(this->counter_03_phase) ? this->counter_03_count + 1 : this->counter_03_count - 1);
    }
    
    void counter_03_input() {
        this->counter_03_output_set(this->counter_03_count);
        this->counter_03_inc();
    
        if (this->counter_03_count > this->counter_03_maximum) {
            if (this->counter_03_direction == 2) {
                this->counter_03_phase = !(bool)(this->counter_03_phase);
                this->counter_03_count = this->counter_03_maximum;
                this->counter_03_inc();
            } else
                this->counter_03_count = this->counter_03_minimum;
    
            if ((bool)(!(bool)(this->counter_03_overflow_number))) {
                if (this->counter_03_carryflag == 1)
                    this->counter_03_overflow_bang_bang();
                else
                    this->counter_03_overflow_number_set(1);
            }
    
            this->counter_03_carry_set(this->counter_03_carry + 1);
        } else if ((bool)(this->counter_03_overflow_number) && this->counter_03_carryflag == 0)
            this->counter_03_overflow_number_set(0);
    
        if (this->counter_03_count < this->counter_03_minimum) {
            if (this->counter_03_direction == 2) {
                this->counter_03_phase = !(bool)(this->counter_03_phase);
                this->counter_03_count = this->counter_03_minimum;
                this->counter_03_inc();
            } else
                this->counter_03_count = this->counter_03_maximum;
    
            if ((bool)(!(bool)(this->counter_03_underflow_number))) {
                if (this->counter_03_carryflag == 1)
                    this->counter_03_underflow_bang_bang();
                else
                    this->counter_03_underflow_number_set(1);
            }
    
            this->counter_03_carry_set(this->counter_03_carry + 1);
        } else if ((bool)(this->counter_03_underflow_number) && this->counter_03_carryflag == 0)
            this->counter_03_underflow_number_set(0);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        route_03_selector1 = 1;
        expr_19_in1 = 0;
        expr_19_in2 = 1;
        expr_19_out1 = 0;
        receive_09_output_number = 0;
        expr_20_in1 = 0;
        expr_20_out1 = 0;
        receive_10_output_number = 0;
        gate_05_onoff = 0;
        gate_05_out1_number = 0;
        expr_21_in1 = 0;
        expr_21_in2 = 0;
        expr_21_out1 = 0;
        receive_11_output_number = 0;
        gate_06_onoff = 0;
        gate_06_out1_number = 0;
        gate_06_out2_number = 0;
        gate_06_out3_number = 0;
        gate_06_out4_number = 0;
        expr_22_in1 = 0;
        expr_22_in2 = 0;
        expr_22_out1 = 0;
        listgroup_03_size = 4;
        iter_03_input = { 0 };
        iter_03_size = 1;
        iter_03_size_setter(iter_03_size);
        numberobj_27_value = 45;
        numberobj_27_value_setter(numberobj_27_value);
        numberobj_28_value = 0;
        numberobj_28_value_setter(numberobj_28_value);
        counter_03_carryflag = 0;
        counter_03_direction = 0;
        counter_03_resetnext = 0;
        counter_03_resetnow = 0;
        counter_03_maximum = 3;
        counter_03_output = 0;
        counter_03_underflow_number = 0;
        counter_03_overflow_number = 0;
        counter_03_carry = 0;
        counter_03_minimum = 0;
        loadmess_08_message = { 0 };
        receive_12_output_number = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_27_currentFormat = 6;
        numberobj_27_lastValue = 0;
        numberobj_28_currentFormat = 6;
        numberobj_28_lastValue = 0;
        counter_03_count = 0;
        counter_03_phase = true;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number route_03_selector1;
        number expr_19_in1;
        number expr_19_in2;
        number expr_19_out1;
        number receive_09_output_number;
        list receive_09_output_list;
        number expr_20_in1;
        number expr_20_out1;
        number receive_10_output_number;
        list receive_10_output_list;
        number gate_05_onoff;
        number gate_05_out1_number;
        list gate_05_out1_list;
        number expr_21_in1;
        number expr_21_in2;
        number expr_21_out1;
        number receive_11_output_number;
        list receive_11_output_list;
        number gate_06_onoff;
        number gate_06_out1_number;
        list gate_06_out1_list;
        number gate_06_out2_number;
        list gate_06_out2_list;
        number gate_06_out3_number;
        list gate_06_out3_list;
        number gate_06_out4_number;
        list gate_06_out4_list;
        number expr_22_in1;
        number expr_22_in2;
        number expr_22_out1;
        list listlookup_03_input;
        list listlookup_03_lookup;
        number listgroup_03_size;
        list iter_03_input;
        number iter_03_size;
        number numberobj_27_value;
        list listlen_03_input;
        number numberobj_28_value;
        Int counter_03_carryflag;
        number counter_03_direction;
        number counter_03_resetnext;
        number counter_03_resetnow;
        number counter_03_maximum;
        number counter_03_output;
        number counter_03_underflow_number;
        number counter_03_overflow_number;
        number counter_03_carry;
        number counter_03_minimum;
        list loadmess_08_message;
        number receive_12_output_number;
        list receive_12_output_list;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        list listgroup_03_grouped;
        Int numberobj_27_currentFormat;
        number numberobj_27_lastValue;
        Int numberobj_28_currentFormat;
        number numberobj_28_lastValue;
        number counter_03_count;
        bool counter_03_phase;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_1057 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_1057()
    {
    }
    
    ~RNBOSubpatcher_1057()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, 892732297, false);
    }
    
    ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
        if (!stringCompare(paramid, "message_obj-38/bangval")) {
            return 0;
        }
    
        if (!stringCompare(paramid, "message_obj-40/bangval")) {
            return 1;
        }
    
        if (!stringCompare(paramid, "number_obj-23/value")) {
            return 2;
        }
    
        if (!stringCompare(paramid, "message_obj-42/bangval")) {
            return 3;
        }
    
        if (!stringCompare(paramid, "message_obj-45/bangval")) {
            return 4;
        }
    
        if (!stringCompare(paramid, "number_obj-20/value")) {
            return 5;
        }
    
        return INVALID_INDEX;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        SampleValue ** inputs,
        Index numInputs,
        SampleValue ** outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            this->setProbingIndex(-1);
            break;
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            this->message_13_bangval_bang();
            break;
        case 1:
            this->message_14_bangval_bang();
            break;
        case 2:
            this->numberobj_29_value_set(v);
            break;
        case 3:
            this->message_15_bangval_bang();
            break;
        case 4:
            this->message_16_bangval_bang();
            break;
        case 5:
            this->numberobj_30_value_set(v);
            break;
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 2:
            return this->numberobj_29_value;
        case 5:
            return this->numberobj_30_value;
        default:
            return 0;
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 6;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "message_13_bangval";
        case 1:
            return "message_14_bangval";
        case 2:
            return "numberobj_29_value";
        case 3:
            return "message_15_bangval";
        case 4:
            return "message_16_bangval";
        case 5:
            return "numberobj_30_value";
        default:
            return "bogus";
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "p_obj-52/message_obj-38/bangval";
        case 1:
            return "p_obj-52/message_obj-40/bangval";
        case 2:
            return "p_obj-52/number_obj-23/value";
        case 3:
            return "p_obj-52/message_obj-42/bangval";
        case 4:
            return "p_obj-52/message_obj-45/bangval";
        case 5:
            return "p_obj-52/number_obj-20/value";
        default:
            return "bogus";
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 1:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 2:
                info->type = ParameterTypeNumber;
                info->initialValue = 47;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 3:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 4:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 5:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 2:
        case 5:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0) / (1 - 0);
                return normalizedValue;
            }
        default:
            return value;
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 2:
        case 5:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
                {
                    return 0 + value * (1 - 0);
                }
            }
        default:
            return value;
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            return value;
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -871642103:
            this->loadbang_04_startupbang_bang();
            break;
        case 892732297:
            this->loadmess_09_startupbang_bang();
            break;
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("format"):
            if (TAG("p_obj-52/number_obj-23") == objectId)
                this->numberobj_29_format_set(payload);
    
            if (TAG("p_obj-52/number_obj-20") == objectId)
                this->numberobj_30_format_set(payload);
    
            break;
        }
    }
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            if (TAG("p_obj-52/loadbang_obj-25") == objectId)
                this->loadbang_04_startupbang_bang();
    
            if (TAG("p_obj-52/loadmess_obj-18") == objectId)
                this->loadmess_09_startupbang_bang();
    
            break;
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("setup"):
            return "setup";
        case TAG("p_obj-52/number_obj-23"):
            return "p_obj-52/number_obj-23";
        case TAG("p_obj-52/number_obj-20"):
            return "p_obj-52/number_obj-20";
        case TAG("format"):
            return "format";
        case TAG("startupbang"):
            return "startupbang";
        case TAG("p_obj-52/loadbang_obj-25"):
            return "p_obj-52/loadbang_obj-25";
        case TAG("p_obj-52/loadmess_obj-18"):
            return "p_obj-52/loadmess_obj-18";
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            return nullptr;
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_19_out1_bang_bang() {
        this->trigger_11_input_bang_bang();
        this->expr_23_in1_bang();
    }
    
    void eventinlet_19_out1_list_set(const list& v) {
        this->trigger_11_input_list_set(v);
    
        {
            if (v->length > 1)
                this->expr_23_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_23_in1_set(converted);
        }
    }
    
    void numberobj_29_format_set(number v) {
        if (v == 0) {
            this->numberobj_29_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_29_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_29_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_29_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_29_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_29_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_29_currentFormat = 6;
        }
    }
    
    void loadbang_04_startupbang_bang() {
        this->loadbang_04_output_bang();
    }
    
    void numberobj_30_format_set(number v) {
        if (v == 0) {
            this->numberobj_30_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_30_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_30_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_30_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_30_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_30_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_30_currentFormat = 6;
        }
    }
    
    void eventinlet_20_out1_bang_bang() {
        this->counter_04_input_bang();
    }
    
    void eventinlet_20_out1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->counter_04_input_bang();
    }
    
    void loadmess_09_startupbang_bang() {
        this->loadmess_09_message_bang();
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->numberobj_29_init();
        this->numberobj_30_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
    }
    
    void allocateDataRefs() {}
    
    void gate_07_onoff_set(number v) {
        this->gate_07_onoff = v;
    }
    
    void expr_24_out1_set(number v) {
        this->expr_24_out1 = v;
        this->gate_07_onoff_set(this->expr_24_out1);
    }
    
    void expr_24_in1_set(number in1) {
        this->expr_24_in1 = in1;
        this->expr_24_out1_set(1 - this->expr_24_in1);//#map:p_obj-52/expr_obj-21:1
    }
    
    void receive_14_output_number_set(number v) {
        this->receive_14_output_number = v;
        this->expr_24_in1_set(v);
    }
    
    void numberobj_30_output_set(number ) {}
    
    void numberobj_30_value_set(number v) {
        this->numberobj_30_value_setter(v);
        v = this->numberobj_30_value;
        this->sendParameter(5, false);
        this->numberobj_30_output_set(v);
    }
    
    void numberobj_29_output_set(number ) {}
    
    void numberobj_29_value_set(number v) {
        this->numberobj_29_value_setter(v);
        v = this->numberobj_29_value;
        this->sendParameter(2, false);
        this->numberobj_29_output_set(v);
    }
    
    void eventoutlet_04_in1_list_set(const list& v) {
        this->getPatcher()->p_32_out1_list_set((list)v);
    }
    
    void listlookup_04_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_29_value_set(converted);
        }
    
        this->eventoutlet_04_in1_list_set(v);
    }
    
    void listlookup_04_input_set(const list& v) {
        this->listlookup_04_input = jsCreateListCopy(v);
        list tmp = list();
    
        for (Index i = 0; i < v->length; i++) {
            long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
    
            if (j >= 0 && (Index)(j) < this->listlookup_04_lookup->length)
                tmp->push(this->listlookup_04_lookup[(Index)j]);
        }
    
        if ((bool)(tmp->length))
            this->listlookup_04_out_set(tmp);
    }
    
    void counter_04_output_set(number v) {
        this->counter_04_output = v;
        this->numberobj_30_value_set(v);
    
        {
            list converted = {v};
            this->listlookup_04_input_set(converted);
        }
    }
    
    void counter_04_overflow_bang_bang() {}
    
    static number counter_04_overflow_number_constrain(number v) {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_04_overflow_number_set(number v) {
        v = this->counter_04_overflow_number_constrain(v);
        this->counter_04_overflow_number = v;
    }
    
    void counter_04_carry_set(number v) {
        this->counter_04_carry = v;
    }
    
    void counter_04_underflow_bang_bang() {}
    
    static number counter_04_underflow_number_constrain(number v) {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_04_underflow_number_set(number v) {
        v = this->counter_04_underflow_number_constrain(v);
        this->counter_04_underflow_number = v;
    }
    
    void counter_04_resetnow_set(number v) {
        this->counter_04_resetnow = v;
        this->counter_04_count = v;
        this->counter_04_input();
    }
    
    void receive_16_output_list_set(const list& v) {
        this->receive_16_output_list = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_04_resetnow_set(converted);
        }
    }
    
    void counter_04_input_bang() {
        this->counter_04_output_set(this->counter_04_count);
        this->counter_04_inc();
    
        if (this->counter_04_count > this->counter_04_maximum) {
            if (this->counter_04_direction == 2) {
                this->counter_04_phase = !(bool)(this->counter_04_phase);
                this->counter_04_count = this->counter_04_maximum;
                this->counter_04_inc();
            } else
                this->counter_04_count = this->counter_04_minimum;
    
            if ((bool)(!(bool)(this->counter_04_overflow_number))) {
                if (this->counter_04_carryflag == 1)
                    this->counter_04_overflow_bang_bang();
                else
                    this->counter_04_overflow_number_set(1);
            }
    
            this->counter_04_carry_set(this->counter_04_carry + 1);
        } else if ((bool)(this->counter_04_overflow_number) && this->counter_04_carryflag == 0)
            this->counter_04_overflow_number_set(0);
    
        if (this->counter_04_count < this->counter_04_minimum) {
            if (this->counter_04_direction == 2) {
                this->counter_04_phase = !(bool)(this->counter_04_phase);
                this->counter_04_count = this->counter_04_minimum;
                this->counter_04_inc();
            } else
                this->counter_04_count = this->counter_04_maximum;
    
            if ((bool)(!(bool)(this->counter_04_underflow_number))) {
                if (this->counter_04_carryflag == 1)
                    this->counter_04_underflow_bang_bang();
                else
                    this->counter_04_underflow_number_set(1);
            }
    
            this->counter_04_carry_set(this->counter_04_carry + 1);
        } else if ((bool)(this->counter_04_underflow_number) && this->counter_04_carryflag == 0)
            this->counter_04_underflow_number_set(0);
    }
    
    void eventinlet_20_out1_number_set(number v) {
        RNBO_UNUSED(v);
        this->counter_04_input_bang();
    }
    
    void expr_25_in2_set(number v) {
        this->expr_25_in2 = v;
    }
    
    void trigger_10_out2_set(number v) {
        this->expr_25_in2_set(v);
    }
    
    void expr_26_in2_set(number v) {
        this->expr_26_in2 = v;
    }
    
    void expr_25_out1_set(number v) {
        this->expr_25_out1 = v;
        this->expr_26_in2_set(this->expr_25_out1);
    }
    
    void expr_25_in1_bang() {
        this->expr_25_out1_set(this->expr_25_in1 + this->expr_25_in2);//#map:p_obj-52/+_obj-8:1
    }
    
    void trigger_10_out1_bang() {
        this->expr_25_in1_bang();
    }
    
    void trigger_10_input_number_set(number v) {
        this->trigger_10_out2_set(rnbo_trunc(v));
        this->trigger_10_out1_bang();
    }
    
    void receive_15_output_number_set(number v) {
        this->receive_15_output_number = v;
        this->trigger_10_input_number_set(v);
    }
    
    void expr_25_in1_set(number in1) {
        this->expr_25_in1 = in1;
        this->expr_25_out1_set(this->expr_25_in1 + this->expr_25_in2);//#map:p_obj-52/+_obj-8:1
    }
    
    void receive_13_output_number_set(number v) {
        this->receive_13_output_number = v;
        this->expr_25_in1_set(v);
    }
    
    void gate_08_onoff_set(number v) {
        this->gate_08_onoff = v;
    }
    
    void trigger_11_out2_set(number v) {
        this->gate_08_onoff_set(v);
    }
    
    void listgroup_04_size_set(number v) {
        this->listgroup_04_size = v;
    }
    
    void listlen_04_out1_set(number v) {
        this->listgroup_04_size_set(v);
    }
    
    void listlen_04_input_set(const list& input) {
        this->listlen_04_input = jsCreateListCopy(input);
    
        {
            this->listlen_04_out1_set(input->length);
            return;
        }
    }
    
    void trigger_12_out2_set(const list& v) {
        this->listlen_04_input_set(v);
    }
    
    void listlookup_04_lookup_set(const list& v) {
        this->listlookup_04_lookup = jsCreateListCopy(v);
    }
    
    void gate_07_out1_list_set(const list& v) {
        this->gate_07_out1_list = jsCreateListCopy(v);
        this->eventoutlet_04_in1_list_set(v);
    }
    
    void gate_07_input_list_set(const list& v) {
        if (this->gate_07_onoff == 1)
            this->gate_07_out1_list_set(v);
    }
    
    void print_06_input_list_set(const list& v) {
        {
            console->log("group", v);
        }
    }
    
    void listgroup_04_out_set(const list& v) {
        this->listlookup_04_lookup_set(v);
        this->gate_07_input_list_set(v);
        this->print_06_input_list_set(v);
    }
    
    void listgroup_04_input_number_set(number v) {
        this->listgroup_04_grouped = this->listgroup_04_grouped->concat(v);
        this->listgroup_04_checkOutput();
    }
    
    void expr_26_out1_set(number v) {
        this->expr_26_out1 = v;
        this->listgroup_04_input_number_set(this->expr_26_out1);
    }
    
    void expr_26_in1_set(number in1) {
        this->expr_26_in1 = in1;
        this->expr_26_out1_set(this->expr_26_in1 + this->expr_26_in2);//#map:p_obj-52/+_obj-28:1
    }
    
    void iter_04_out_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_26_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_26_in1_set(converted);
        }
    }
    
    void iter_04_input_set(const list& v) {
        this->iter_04_input = jsCreateListCopy(v);
        list tmp = list();
        Index i = 0;
        number l = (this->iter_04_size >= 1 ? this->iter_04_size : 1);
    
        while (i < v->length) {
            if (tmp->length == l) {
                this->iter_04_out_set(tmp);
                tmp->length = 0;
            }
    
            tmp->push(v[(Index)i]);
            i++;
        }
    
        if (tmp->length > 0)
            this->iter_04_out_set(tmp);
    }
    
    void trigger_12_out1_set(const list& v) {
        this->iter_04_input_set(v);
    }
    
    void trigger_12_input_list_set(const list& v) {
        this->trigger_12_out2_set(v);
        this->trigger_12_out1_set(v);
    }
    
    void message_13_out_set(const list& v) {
        this->trigger_12_input_list_set(v);
    }
    
    void message_13_bangval_bang() {
        this->sendParameter(0, true);
        this->message_13_out_set({-1, 2, 5, 11});
    }
    
    void gate_08_out1_bang_bang() {
        this->message_13_bangval_bang();
    }
    
    void message_14_out_set(const list& v) {
        this->trigger_12_input_list_set(v);
    }
    
    void message_14_bangval_bang() {
        this->sendParameter(1, true);
        this->message_14_out_set({-5, -1, 2, 5});
    }
    
    void gate_08_out2_bang_bang() {
        this->message_14_bangval_bang();
    }
    
    void message_15_out_set(const list& v) {
        this->trigger_12_input_list_set(v);
    }
    
    void message_15_bangval_bang() {
        this->sendParameter(3, true);
        this->message_15_out_set({-1, 0, 7, 11});
    }
    
    void gate_08_out3_bang_bang() {
        this->message_15_bangval_bang();
    }
    
    void message_16_out_set(const list& v) {
        this->trigger_12_input_list_set(v);
    }
    
    void message_16_bangval_bang() {
        this->sendParameter(4, true);
        this->message_16_out_set({0, 5, 7, 11});
    }
    
    void gate_08_out4_bang_bang() {
        this->message_16_bangval_bang();
    }
    
    void gate_08_input_bang_bang() {
        if (this->gate_08_onoff == 1)
            this->gate_08_out1_bang_bang();
        else if (this->gate_08_onoff == 2)
            this->gate_08_out2_bang_bang();
        else if (this->gate_08_onoff == 3)
            this->gate_08_out3_bang_bang();
        else if (this->gate_08_onoff == 4)
            this->gate_08_out4_bang_bang();
    }
    
    void trigger_11_out1_bang() {
        this->gate_08_input_bang_bang();
    }
    
    void trigger_11_input_number_set(number v) {
        this->trigger_11_out2_set(rnbo_trunc(v));
        this->trigger_11_out1_bang();
    }
    
    void route_04_nomatch_bang_bang() {}
    
    void listlookup_04_reset_bang() {
        {
            list __value = list();
            this->listlookup_04_input = jsCreateListCopy(__value);
        };
    
        {
            list __value = list();
            this->listlookup_04_lookup = jsCreateListCopy(__value);
        };
    }
    
    void route_04_match1_bang_bang() {
        this->listlookup_04_reset_bang();
    }
    
    void route_04_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->listlookup_04_reset_bang();
    }
    
    void route_04_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->listlookup_04_reset_bang();
    }
    
    void route_04_nomatch_number_set(number ) {}
    
    void route_04_nomatch_list_set(const list& ) {}
    
    void route_04_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_04_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_04_selector1) {
                if (input->length == 0)
                    this->route_04_match1_bang_bang();
                else if (input->length == 1)
                    this->route_04_match1_number_set(input[0]);
                else
                    this->route_04_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_04_nomatch_number_set(v[0]);
                } else {
                    this->route_04_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_04_input_number_set(number v) {
        this->route_04_input_list_set({v});
    }
    
    void expr_23_out1_set(number v) {
        this->expr_23_out1 = v;
        this->route_04_input_number_set(this->expr_23_out1);
    }
    
    void expr_23_in1_set(number in1) {
        this->expr_23_in1 = in1;
        this->expr_23_out1_set(this->expr_23_in1 < this->expr_23_in2);//#map:p_obj-52/lessthan_obj-26:1
    }
    
    void eventinlet_19_out1_number_set(number v) {
        this->trigger_11_input_number_set(v);
        this->expr_23_in1_set(v);
    }
    
    void trigger_11_input_bang_bang() {
        this->trigger_11_out2_set(0);
        this->trigger_11_out1_bang();
    }
    
    void expr_23_in1_bang() {
        this->expr_23_out1_set(this->expr_23_in1 < this->expr_23_in2);//#map:p_obj-52/lessthan_obj-26:1
    }
    
    void trigger_11_input_list_set(const list& v) {
        this->trigger_11_out2_set((v->length > 0 ? rnbo_trunc(v[0]) : 0));
        this->trigger_11_out1_bang();
    }
    
    void expr_23_in2_set(number v) {
        this->expr_23_in2 = v;
    }
    
    void listgroup_04_input_bang_bang() {
        if (this->listgroup_04_grouped->length > 0) {
            this->listgroup_04_out_set(this->listgroup_04_grouped);
            this->listgroup_04_grouped->length = 0;
        }
    }
    
    void loadbang_04_output_bang() {
        this->listgroup_04_input_bang_bang();
    }
    
    void counter_04_resetnext_set(number v) {
        this->counter_04_resetnext = v;
        this->counter_04_count = v;
    }
    
    void loadmess_09_message_bang() {
        list v = this->loadmess_09_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_04_resetnext_set(converted);
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void iter_04_size_setter(number v) {
        this->iter_04_size = rnbo_floor(v);
    }
    
    void numberobj_29_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_29_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_29_value = localvalue;
    }
    
    void numberobj_30_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_30_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_30_value = localvalue;
    }
    
    void listgroup_04_checkOutput() {
        const Index isize = (const Index)(this->listgroup_04_size);
    
        while (this->listgroup_04_grouped->length >= isize) {
            list tmp = list();
    
            for (Index i = 0; i < isize; i++) {
                tmp->push(this->listgroup_04_grouped[(Index)i]);
            }
    
            this->listgroup_04_out_set(tmp);
            this->listgroup_04_grouped->splice(0, isize);
        }
    }
    
    void numberobj_29_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-52/number_obj-23"), 1, this->_currentTime);
    }
    
    void numberobj_29_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_29_value;
    }
    
    void numberobj_29_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_29_value_set(preset["value"]);
    }
    
    void numberobj_30_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-52/number_obj-20"), 1, this->_currentTime);
    }
    
    void numberobj_30_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_30_value;
    }
    
    void numberobj_30_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_30_value_set(preset["value"]);
    }
    
    void counter_04_inc() {
        this->counter_04_count = ((bool)(this->counter_04_phase) ? this->counter_04_count + 1 : this->counter_04_count - 1);
    }
    
    void counter_04_input() {
        this->counter_04_output_set(this->counter_04_count);
        this->counter_04_inc();
    
        if (this->counter_04_count > this->counter_04_maximum) {
            if (this->counter_04_direction == 2) {
                this->counter_04_phase = !(bool)(this->counter_04_phase);
                this->counter_04_count = this->counter_04_maximum;
                this->counter_04_inc();
            } else
                this->counter_04_count = this->counter_04_minimum;
    
            if ((bool)(!(bool)(this->counter_04_overflow_number))) {
                if (this->counter_04_carryflag == 1)
                    this->counter_04_overflow_bang_bang();
                else
                    this->counter_04_overflow_number_set(1);
            }
    
            this->counter_04_carry_set(this->counter_04_carry + 1);
        } else if ((bool)(this->counter_04_overflow_number) && this->counter_04_carryflag == 0)
            this->counter_04_overflow_number_set(0);
    
        if (this->counter_04_count < this->counter_04_minimum) {
            if (this->counter_04_direction == 2) {
                this->counter_04_phase = !(bool)(this->counter_04_phase);
                this->counter_04_count = this->counter_04_minimum;
                this->counter_04_inc();
            } else
                this->counter_04_count = this->counter_04_maximum;
    
            if ((bool)(!(bool)(this->counter_04_underflow_number))) {
                if (this->counter_04_carryflag == 1)
                    this->counter_04_underflow_bang_bang();
                else
                    this->counter_04_underflow_number_set(1);
            }
    
            this->counter_04_carry_set(this->counter_04_carry + 1);
        } else if ((bool)(this->counter_04_underflow_number) && this->counter_04_carryflag == 0)
            this->counter_04_underflow_number_set(0);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        route_04_selector1 = 1;
        expr_23_in1 = 0;
        expr_23_in2 = 1;
        expr_23_out1 = 0;
        receive_13_output_number = 0;
        expr_24_in1 = 0;
        expr_24_out1 = 0;
        receive_14_output_number = 0;
        gate_07_onoff = 0;
        gate_07_out1_number = 0;
        expr_25_in1 = 0;
        expr_25_in2 = 0;
        expr_25_out1 = 0;
        receive_15_output_number = 0;
        gate_08_onoff = 0;
        gate_08_out1_number = 0;
        gate_08_out2_number = 0;
        gate_08_out3_number = 0;
        gate_08_out4_number = 0;
        expr_26_in1 = 0;
        expr_26_in2 = 0;
        expr_26_out1 = 0;
        listgroup_04_size = 4;
        iter_04_input = { 0 };
        iter_04_size = 1;
        iter_04_size_setter(iter_04_size);
        numberobj_29_value = 47;
        numberobj_29_value_setter(numberobj_29_value);
        numberobj_30_value = 0;
        numberobj_30_value_setter(numberobj_30_value);
        counter_04_carryflag = 0;
        counter_04_direction = 0;
        counter_04_resetnext = 0;
        counter_04_resetnow = 0;
        counter_04_maximum = 3;
        counter_04_output = 0;
        counter_04_underflow_number = 0;
        counter_04_overflow_number = 0;
        counter_04_carry = 0;
        counter_04_minimum = 0;
        loadmess_09_message = { 0 };
        receive_16_output_number = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_29_currentFormat = 6;
        numberobj_29_lastValue = 0;
        numberobj_30_currentFormat = 6;
        numberobj_30_lastValue = 0;
        counter_04_count = 0;
        counter_04_phase = true;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number route_04_selector1;
        number expr_23_in1;
        number expr_23_in2;
        number expr_23_out1;
        number receive_13_output_number;
        list receive_13_output_list;
        number expr_24_in1;
        number expr_24_out1;
        number receive_14_output_number;
        list receive_14_output_list;
        number gate_07_onoff;
        number gate_07_out1_number;
        list gate_07_out1_list;
        number expr_25_in1;
        number expr_25_in2;
        number expr_25_out1;
        number receive_15_output_number;
        list receive_15_output_list;
        number gate_08_onoff;
        number gate_08_out1_number;
        list gate_08_out1_list;
        number gate_08_out2_number;
        list gate_08_out2_list;
        number gate_08_out3_number;
        list gate_08_out3_list;
        number gate_08_out4_number;
        list gate_08_out4_list;
        number expr_26_in1;
        number expr_26_in2;
        number expr_26_out1;
        list listlookup_04_input;
        list listlookup_04_lookup;
        number listgroup_04_size;
        list iter_04_input;
        number iter_04_size;
        number numberobj_29_value;
        list listlen_04_input;
        number numberobj_30_value;
        Int counter_04_carryflag;
        number counter_04_direction;
        number counter_04_resetnext;
        number counter_04_resetnow;
        number counter_04_maximum;
        number counter_04_output;
        number counter_04_underflow_number;
        number counter_04_overflow_number;
        number counter_04_carry;
        number counter_04_minimum;
        list loadmess_09_message;
        number receive_16_output_number;
        list receive_16_output_list;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        list listgroup_04_grouped;
        Int numberobj_29_currentFormat;
        number numberobj_29_lastValue;
        Int numberobj_30_currentFormat;
        number numberobj_30_lastValue;
        number counter_04_count;
        bool counter_04_phase;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_1058 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_1035 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1035()
            {
            }
            
            ~RNBOSubpatcher_1035()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_21_out1_bang_bang() {
                this->expr_40_in1_bang();
                this->expr_37_in1_bang();
            }
            
            void eventinlet_21_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_40_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_40_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_37_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_37_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_08_nomatch_bang_bang() {}
            
            void eventoutlet_08_in1_bang_bang() {
                ;
                this->getPatcher()->p_11_out4_bang_bang();
            }
            
            void route_08_match1_bang_bang() {
                this->eventoutlet_08_in1_bang_bang();
            }
            
            void eventoutlet_08_in1_number_set(number v) {
                this->getPatcher()->p_11_out4_number_set(v);
            }
            
            void route_08_match1_number_set(number v) {
                this->eventoutlet_08_in1_number_set(v);
            }
            
            void eventoutlet_08_in1_list_set(const list& v) {
                this->getPatcher()->p_11_out4_list_set((list)v);
            }
            
            void route_08_match1_list_set(const list& v) {
                this->eventoutlet_08_in1_list_set(v);
            }
            
            void route_08_nomatch_number_set(number ) {}
            
            void route_08_nomatch_list_set(const list& ) {}
            
            void route_08_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_08_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_08_selector1) {
                        if (input->length == 0)
                            this->route_08_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_08_match1_number_set(input[0]);
                        else
                            this->route_08_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_08_nomatch_number_set(v[0]);
                        } else {
                            this->route_08_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_08_input_number_set(number v) {
                this->route_08_input_list_set({v});
            }
            
            void expr_39_out1_set(number v) {
                this->expr_39_out1 = v;
                this->route_08_input_number_set(this->expr_39_out1);
            }
            
            void expr_39_in1_set(number in1) {
                this->expr_39_in1 = in1;
                this->expr_39_out1_set(this->expr_39_in1 > this->expr_39_in2);//#map:p_obj-193/p_obj-74/>_obj-13:1
            }
            
            void expr_40_out1_set(number v) {
                this->expr_40_out1 = v;
                this->expr_39_in1_set(this->expr_40_out1);
            }
            
            void expr_40_in1_set(number in1) {
                this->expr_40_in1 = in1;
                this->expr_40_out1_set(this->safemod(this->expr_40_in1, this->expr_40_in2));//#map:p_obj-193/p_obj-74/%_obj-6:1
            }
            
            void route_07_nomatch_bang_bang() {}
            
            void eventoutlet_07_in1_bang_bang() {
                ;
                this->getPatcher()->p_11_out3_bang_bang();
            }
            
            void route_07_match1_bang_bang() {
                this->eventoutlet_07_in1_bang_bang();
            }
            
            void eventoutlet_07_in1_number_set(number v) {
                this->getPatcher()->p_11_out3_number_set(v);
            }
            
            void route_07_match1_number_set(number v) {
                this->eventoutlet_07_in1_number_set(v);
            }
            
            void eventoutlet_07_in1_list_set(const list& v) {
                this->getPatcher()->p_11_out3_list_set((list)v);
            }
            
            void route_07_match1_list_set(const list& v) {
                this->eventoutlet_07_in1_list_set(v);
            }
            
            void route_07_nomatch_number_set(number ) {}
            
            void route_07_nomatch_list_set(const list& ) {}
            
            void route_07_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_07_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_07_selector1) {
                        if (input->length == 0)
                            this->route_07_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_07_match1_number_set(input[0]);
                        else
                            this->route_07_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_07_nomatch_number_set(v[0]);
                        } else {
                            this->route_07_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_07_input_number_set(number v) {
                this->route_07_input_list_set({v});
            }
            
            void expr_35_out1_set(number v) {
                this->expr_35_out1 = v;
                this->route_07_input_number_set(this->expr_35_out1);
            }
            
            void expr_35_in1_set(number in1) {
                this->expr_35_in1 = in1;
                this->expr_35_out1_set(this->expr_35_in1 > this->expr_35_in2);//#map:p_obj-193/p_obj-74/>_obj-14:1
            }
            
            void expr_38_out1_set(number v) {
                this->expr_38_out1 = v;
                this->expr_35_in1_set(this->expr_38_out1);
            }
            
            void expr_38_in1_set(number in1) {
                this->expr_38_in1 = in1;
                this->expr_38_out1_set(this->safemod(this->expr_38_in1, this->expr_38_in2));//#map:p_obj-193/p_obj-74/%_obj-7:1
            }
            
            void route_06_nomatch_bang_bang() {}
            
            void eventoutlet_06_in1_bang_bang() {
                ;
                this->getPatcher()->p_11_out2_bang_bang();
            }
            
            void route_06_match1_bang_bang() {
                this->eventoutlet_06_in1_bang_bang();
            }
            
            void eventoutlet_06_in1_number_set(number v) {
                this->getPatcher()->p_11_out2_number_set(v);
            }
            
            void route_06_match1_number_set(number v) {
                this->eventoutlet_06_in1_number_set(v);
            }
            
            void eventoutlet_06_in1_list_set(const list& v) {
                this->getPatcher()->p_11_out2_list_set((list)v);
            }
            
            void route_06_match1_list_set(const list& v) {
                this->eventoutlet_06_in1_list_set(v);
            }
            
            void route_06_nomatch_number_set(number ) {}
            
            void route_06_nomatch_list_set(const list& ) {}
            
            void route_06_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_06_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_06_selector1) {
                        if (input->length == 0)
                            this->route_06_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_06_match1_number_set(input[0]);
                        else
                            this->route_06_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_06_nomatch_number_set(v[0]);
                        } else {
                            this->route_06_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_06_input_number_set(number v) {
                this->route_06_input_list_set({v});
            }
            
            void expr_31_out1_set(number v) {
                this->expr_31_out1 = v;
                this->route_06_input_number_set(this->expr_31_out1);
            }
            
            void expr_31_in1_set(number in1) {
                this->expr_31_in1 = in1;
                this->expr_31_out1_set(this->expr_31_in1 > this->expr_31_in2);//#map:p_obj-193/p_obj-74/>_obj-15:1
            }
            
            void expr_34_out1_set(number v) {
                this->expr_34_out1 = v;
                this->expr_31_in1_set(this->expr_34_out1);
            }
            
            void expr_34_in1_set(number in1) {
                this->expr_34_in1 = in1;
                this->expr_34_out1_set(this->safemod(this->expr_34_in1, this->expr_34_in2));//#map:p_obj-193/p_obj-74/%_obj-8:1
            }
            
            void route_05_nomatch_bang_bang() {}
            
            void eventoutlet_05_in1_bang_bang() {
                ;
                this->getPatcher()->p_11_out1_bang_bang();
            }
            
            void route_05_match1_bang_bang() {
                this->eventoutlet_05_in1_bang_bang();
            }
            
            void eventoutlet_05_in1_number_set(number v) {
                this->getPatcher()->p_11_out1_number_set(v);
            }
            
            void route_05_match1_number_set(number v) {
                this->eventoutlet_05_in1_number_set(v);
            }
            
            void eventoutlet_05_in1_list_set(const list& v) {
                this->getPatcher()->p_11_out1_list_set((list)v);
            }
            
            void route_05_match1_list_set(const list& v) {
                this->eventoutlet_05_in1_list_set(v);
            }
            
            void route_05_nomatch_number_set(number ) {}
            
            void route_05_nomatch_list_set(const list& ) {}
            
            void route_05_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_05_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_05_selector1) {
                        if (input->length == 0)
                            this->route_05_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_05_match1_number_set(input[0]);
                        else
                            this->route_05_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_05_nomatch_number_set(v[0]);
                        } else {
                            this->route_05_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_05_input_number_set(number v) {
                this->route_05_input_list_set({v});
            }
            
            void expr_28_out1_set(number v) {
                this->expr_28_out1 = v;
                this->route_05_input_number_set(this->expr_28_out1);
            }
            
            void expr_28_in1_set(number in1) {
                this->expr_28_in1 = in1;
                this->expr_28_out1_set(this->expr_28_in1 > this->expr_28_in2);//#map:p_obj-193/p_obj-74/>_obj-16:1
            }
            
            void expr_30_out1_set(number v) {
                this->expr_30_out1 = v;
                this->expr_28_in1_set(this->expr_30_out1);
            }
            
            void expr_30_in1_set(number in1) {
                this->expr_30_in1 = in1;
                this->expr_30_out1_set(this->safemod(this->expr_30_in1, this->expr_30_in2));//#map:p_obj-193/p_obj-74/%_obj-9:1
            }
            
            void expr_27_out1_set(number v) {
                this->expr_27_out1 = v;
                this->expr_30_in1_set(this->expr_27_out1);
            }
            
            void expr_27_in1_set(number in1) {
                this->expr_27_in1 = in1;
                this->expr_27_out1_set(rnbo_floor(this->expr_27_in1));//#map:p_obj-193/p_obj-74/floor_obj-26:1
            }
            
            void expr_29_out1_set(number v) {
                this->expr_29_out1 = v;
                this->expr_27_in1_set(this->expr_29_out1);
            }
            
            void expr_29_in1_set(number in1) {
                this->expr_29_in1 = in1;
            
                this->expr_29_out1_set(
                    (this->expr_29_in2 == 0 ? 0 : (this->expr_29_in2 == 0. ? 0. : this->expr_29_in1 / this->expr_29_in2))
                );//#map:p_obj-193/p_obj-74//_obj-12:1
            }
            
            void expr_32_out1_set(number v) {
                this->expr_32_out1 = v;
                this->expr_34_in1_set(this->expr_32_out1);
                this->expr_29_in1_set(this->expr_32_out1);
            }
            
            void expr_32_in1_set(number in1) {
                this->expr_32_in1 = in1;
                this->expr_32_out1_set(rnbo_floor(this->expr_32_in1));//#map:p_obj-193/p_obj-74/floor_obj-24:1
            }
            
            void expr_33_out1_set(number v) {
                this->expr_33_out1 = v;
                this->expr_32_in1_set(this->expr_33_out1);
            }
            
            void expr_33_in1_set(number in1) {
                this->expr_33_in1 = in1;
            
                this->expr_33_out1_set(
                    (this->expr_33_in2 == 0 ? 0 : (this->expr_33_in2 == 0. ? 0. : this->expr_33_in1 / this->expr_33_in2))
                );//#map:p_obj-193/p_obj-74//_obj-11:1
            }
            
            void expr_36_out1_set(number v) {
                this->expr_36_out1 = v;
                this->expr_38_in1_set(this->expr_36_out1);
                this->expr_33_in1_set(this->expr_36_out1);
            }
            
            void expr_36_in1_set(number in1) {
                this->expr_36_in1 = in1;
                this->expr_36_out1_set(rnbo_floor(this->expr_36_in1));//#map:p_obj-193/p_obj-74/floor_obj-21:1
            }
            
            void expr_37_out1_set(number v) {
                this->expr_37_out1 = v;
                this->expr_36_in1_set(this->expr_37_out1);
            }
            
            void expr_37_in1_set(number in1) {
                this->expr_37_in1 = in1;
            
                this->expr_37_out1_set(
                    (this->expr_37_in2 == 0 ? 0 : (this->expr_37_in2 == 0. ? 0. : this->expr_37_in1 / this->expr_37_in2))
                );//#map:p_obj-193/p_obj-74//_obj-10:1
            }
            
            void eventinlet_21_out1_number_set(number v) {
                this->expr_40_in1_set(v);
                this->expr_37_in1_set(v);
            }
            
            void expr_40_in1_bang() {
                this->expr_40_out1_set(this->safemod(this->expr_40_in1, this->expr_40_in2));//#map:p_obj-193/p_obj-74/%_obj-6:1
            }
            
            void expr_37_in1_bang() {
                this->expr_37_out1_set(
                    (this->expr_37_in2 == 0 ? 0 : (this->expr_37_in2 == 0. ? 0. : this->expr_37_in1 / this->expr_37_in2))
                );//#map:p_obj-193/p_obj-74//_obj-10:1
            }
            
            void expr_40_in2_set(number v) {
                this->expr_40_in2 = v;
            }
            
            void expr_37_in2_set(number v) {
                this->expr_37_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_27_in1 = 0;
                expr_27_out1 = 0;
                route_05_selector1 = 1;
                expr_28_in1 = 0;
                expr_28_in2 = 0.3;
                expr_28_out1 = 0;
                expr_29_in1 = 0;
                expr_29_in2 = 2;
                expr_29_out1 = 0;
                expr_30_in1 = 0;
                expr_30_in2 = 2;
                expr_30_out1 = 0;
                expr_31_in1 = 0;
                expr_31_in2 = 0.3;
                expr_31_out1 = 0;
                expr_32_in1 = 0;
                expr_32_out1 = 0;
                route_06_selector1 = 1;
                expr_33_in1 = 0;
                expr_33_in2 = 2;
                expr_33_out1 = 0;
                expr_34_in1 = 0;
                expr_34_in2 = 2;
                expr_34_out1 = 0;
                expr_35_in1 = 0;
                expr_35_in2 = 0.3;
                expr_35_out1 = 0;
                expr_36_in1 = 0;
                expr_36_out1 = 0;
                expr_37_in1 = 0;
                expr_37_in2 = 2;
                expr_37_out1 = 0;
                expr_38_in1 = 0;
                expr_38_in2 = 2;
                expr_38_out1 = 0;
                route_07_selector1 = 1;
                route_08_selector1 = 1;
                expr_39_in1 = 0;
                expr_39_in2 = 0.3;
                expr_39_out1 = 0;
                expr_40_in1 = 0;
                expr_40_in2 = 2;
                expr_40_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_27_in1;
                number expr_27_out1;
                number route_05_selector1;
                number expr_28_in1;
                number expr_28_in2;
                number expr_28_out1;
                number expr_29_in1;
                number expr_29_in2;
                number expr_29_out1;
                number expr_30_in1;
                number expr_30_in2;
                number expr_30_out1;
                number expr_31_in1;
                number expr_31_in2;
                number expr_31_out1;
                number expr_32_in1;
                number expr_32_out1;
                number route_06_selector1;
                number expr_33_in1;
                number expr_33_in2;
                number expr_33_out1;
                number expr_34_in1;
                number expr_34_in2;
                number expr_34_out1;
                number expr_35_in1;
                number expr_35_in2;
                number expr_35_out1;
                number expr_36_in1;
                number expr_36_out1;
                number expr_37_in1;
                number expr_37_in2;
                number expr_37_out1;
                number expr_38_in1;
                number expr_38_in2;
                number expr_38_out1;
                number route_07_selector1;
                number route_08_selector1;
                number expr_39_in1;
                number expr_39_in2;
                number expr_39_out1;
                number expr_40_in1;
                number expr_40_in2;
                number expr_40_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1036 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1036()
            {
            }
            
            ~RNBOSubpatcher_1036()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_22_out1_bang_bang() {
                this->expr_54_in1_bang();
                this->expr_51_in1_bang();
            }
            
            void eventinlet_22_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_54_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_54_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_51_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_51_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_12_nomatch_bang_bang() {}
            
            void eventoutlet_12_in1_bang_bang() {
                ;
                this->getPatcher()->p_12_out4_bang_bang();
            }
            
            void route_12_match1_bang_bang() {
                this->eventoutlet_12_in1_bang_bang();
            }
            
            void eventoutlet_12_in1_number_set(number v) {
                this->getPatcher()->p_12_out4_number_set(v);
            }
            
            void route_12_match1_number_set(number v) {
                this->eventoutlet_12_in1_number_set(v);
            }
            
            void eventoutlet_12_in1_list_set(const list& v) {
                this->getPatcher()->p_12_out4_list_set((list)v);
            }
            
            void route_12_match1_list_set(const list& v) {
                this->eventoutlet_12_in1_list_set(v);
            }
            
            void route_12_nomatch_number_set(number ) {}
            
            void route_12_nomatch_list_set(const list& ) {}
            
            void route_12_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_12_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_12_selector1) {
                        if (input->length == 0)
                            this->route_12_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_12_match1_number_set(input[0]);
                        else
                            this->route_12_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_12_nomatch_number_set(v[0]);
                        } else {
                            this->route_12_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_12_input_number_set(number v) {
                this->route_12_input_list_set({v});
            }
            
            void expr_53_out1_set(number v) {
                this->expr_53_out1 = v;
                this->route_12_input_number_set(this->expr_53_out1);
            }
            
            void expr_53_in1_set(number in1) {
                this->expr_53_in1 = in1;
                this->expr_53_out1_set(this->expr_53_in1 > this->expr_53_in2);//#map:p_obj-193/p_obj-25/>_obj-13:1
            }
            
            void expr_54_out1_set(number v) {
                this->expr_54_out1 = v;
                this->expr_53_in1_set(this->expr_54_out1);
            }
            
            void expr_54_in1_set(number in1) {
                this->expr_54_in1 = in1;
                this->expr_54_out1_set(this->safemod(this->expr_54_in1, this->expr_54_in2));//#map:p_obj-193/p_obj-25/%_obj-6:1
            }
            
            void route_11_nomatch_bang_bang() {}
            
            void eventoutlet_11_in1_bang_bang() {
                ;
                this->getPatcher()->p_12_out3_bang_bang();
            }
            
            void route_11_match1_bang_bang() {
                this->eventoutlet_11_in1_bang_bang();
            }
            
            void eventoutlet_11_in1_number_set(number v) {
                this->getPatcher()->p_12_out3_number_set(v);
            }
            
            void route_11_match1_number_set(number v) {
                this->eventoutlet_11_in1_number_set(v);
            }
            
            void eventoutlet_11_in1_list_set(const list& v) {
                this->getPatcher()->p_12_out3_list_set((list)v);
            }
            
            void route_11_match1_list_set(const list& v) {
                this->eventoutlet_11_in1_list_set(v);
            }
            
            void route_11_nomatch_number_set(number ) {}
            
            void route_11_nomatch_list_set(const list& ) {}
            
            void route_11_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_11_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_11_selector1) {
                        if (input->length == 0)
                            this->route_11_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_11_match1_number_set(input[0]);
                        else
                            this->route_11_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_11_nomatch_number_set(v[0]);
                        } else {
                            this->route_11_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_11_input_number_set(number v) {
                this->route_11_input_list_set({v});
            }
            
            void expr_49_out1_set(number v) {
                this->expr_49_out1 = v;
                this->route_11_input_number_set(this->expr_49_out1);
            }
            
            void expr_49_in1_set(number in1) {
                this->expr_49_in1 = in1;
                this->expr_49_out1_set(this->expr_49_in1 > this->expr_49_in2);//#map:p_obj-193/p_obj-25/>_obj-14:1
            }
            
            void expr_52_out1_set(number v) {
                this->expr_52_out1 = v;
                this->expr_49_in1_set(this->expr_52_out1);
            }
            
            void expr_52_in1_set(number in1) {
                this->expr_52_in1 = in1;
                this->expr_52_out1_set(this->safemod(this->expr_52_in1, this->expr_52_in2));//#map:p_obj-193/p_obj-25/%_obj-7:1
            }
            
            void route_10_nomatch_bang_bang() {}
            
            void eventoutlet_10_in1_bang_bang() {
                ;
                this->getPatcher()->p_12_out2_bang_bang();
            }
            
            void route_10_match1_bang_bang() {
                this->eventoutlet_10_in1_bang_bang();
            }
            
            void eventoutlet_10_in1_number_set(number v) {
                this->getPatcher()->p_12_out2_number_set(v);
            }
            
            void route_10_match1_number_set(number v) {
                this->eventoutlet_10_in1_number_set(v);
            }
            
            void eventoutlet_10_in1_list_set(const list& v) {
                this->getPatcher()->p_12_out2_list_set((list)v);
            }
            
            void route_10_match1_list_set(const list& v) {
                this->eventoutlet_10_in1_list_set(v);
            }
            
            void route_10_nomatch_number_set(number ) {}
            
            void route_10_nomatch_list_set(const list& ) {}
            
            void route_10_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_10_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_10_selector1) {
                        if (input->length == 0)
                            this->route_10_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_10_match1_number_set(input[0]);
                        else
                            this->route_10_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_10_nomatch_number_set(v[0]);
                        } else {
                            this->route_10_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_10_input_number_set(number v) {
                this->route_10_input_list_set({v});
            }
            
            void expr_45_out1_set(number v) {
                this->expr_45_out1 = v;
                this->route_10_input_number_set(this->expr_45_out1);
            }
            
            void expr_45_in1_set(number in1) {
                this->expr_45_in1 = in1;
                this->expr_45_out1_set(this->expr_45_in1 > this->expr_45_in2);//#map:p_obj-193/p_obj-25/>_obj-15:1
            }
            
            void expr_48_out1_set(number v) {
                this->expr_48_out1 = v;
                this->expr_45_in1_set(this->expr_48_out1);
            }
            
            void expr_48_in1_set(number in1) {
                this->expr_48_in1 = in1;
                this->expr_48_out1_set(this->safemod(this->expr_48_in1, this->expr_48_in2));//#map:p_obj-193/p_obj-25/%_obj-8:1
            }
            
            void route_09_nomatch_bang_bang() {}
            
            void eventoutlet_09_in1_bang_bang() {
                ;
                this->getPatcher()->p_12_out1_bang_bang();
            }
            
            void route_09_match1_bang_bang() {
                this->eventoutlet_09_in1_bang_bang();
            }
            
            void eventoutlet_09_in1_number_set(number v) {
                this->getPatcher()->p_12_out1_number_set(v);
            }
            
            void route_09_match1_number_set(number v) {
                this->eventoutlet_09_in1_number_set(v);
            }
            
            void eventoutlet_09_in1_list_set(const list& v) {
                this->getPatcher()->p_12_out1_list_set((list)v);
            }
            
            void route_09_match1_list_set(const list& v) {
                this->eventoutlet_09_in1_list_set(v);
            }
            
            void route_09_nomatch_number_set(number ) {}
            
            void route_09_nomatch_list_set(const list& ) {}
            
            void route_09_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_09_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_09_selector1) {
                        if (input->length == 0)
                            this->route_09_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_09_match1_number_set(input[0]);
                        else
                            this->route_09_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_09_nomatch_number_set(v[0]);
                        } else {
                            this->route_09_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_09_input_number_set(number v) {
                this->route_09_input_list_set({v});
            }
            
            void expr_42_out1_set(number v) {
                this->expr_42_out1 = v;
                this->route_09_input_number_set(this->expr_42_out1);
            }
            
            void expr_42_in1_set(number in1) {
                this->expr_42_in1 = in1;
                this->expr_42_out1_set(this->expr_42_in1 > this->expr_42_in2);//#map:p_obj-193/p_obj-25/>_obj-16:1
            }
            
            void expr_44_out1_set(number v) {
                this->expr_44_out1 = v;
                this->expr_42_in1_set(this->expr_44_out1);
            }
            
            void expr_44_in1_set(number in1) {
                this->expr_44_in1 = in1;
                this->expr_44_out1_set(this->safemod(this->expr_44_in1, this->expr_44_in2));//#map:p_obj-193/p_obj-25/%_obj-9:1
            }
            
            void expr_41_out1_set(number v) {
                this->expr_41_out1 = v;
                this->expr_44_in1_set(this->expr_41_out1);
            }
            
            void expr_41_in1_set(number in1) {
                this->expr_41_in1 = in1;
                this->expr_41_out1_set(rnbo_floor(this->expr_41_in1));//#map:p_obj-193/p_obj-25/floor_obj-26:1
            }
            
            void expr_43_out1_set(number v) {
                this->expr_43_out1 = v;
                this->expr_41_in1_set(this->expr_43_out1);
            }
            
            void expr_43_in1_set(number in1) {
                this->expr_43_in1 = in1;
            
                this->expr_43_out1_set(
                    (this->expr_43_in2 == 0 ? 0 : (this->expr_43_in2 == 0. ? 0. : this->expr_43_in1 / this->expr_43_in2))
                );//#map:p_obj-193/p_obj-25//_obj-12:1
            }
            
            void expr_46_out1_set(number v) {
                this->expr_46_out1 = v;
                this->expr_48_in1_set(this->expr_46_out1);
                this->expr_43_in1_set(this->expr_46_out1);
            }
            
            void expr_46_in1_set(number in1) {
                this->expr_46_in1 = in1;
                this->expr_46_out1_set(rnbo_floor(this->expr_46_in1));//#map:p_obj-193/p_obj-25/floor_obj-24:1
            }
            
            void expr_47_out1_set(number v) {
                this->expr_47_out1 = v;
                this->expr_46_in1_set(this->expr_47_out1);
            }
            
            void expr_47_in1_set(number in1) {
                this->expr_47_in1 = in1;
            
                this->expr_47_out1_set(
                    (this->expr_47_in2 == 0 ? 0 : (this->expr_47_in2 == 0. ? 0. : this->expr_47_in1 / this->expr_47_in2))
                );//#map:p_obj-193/p_obj-25//_obj-11:1
            }
            
            void expr_50_out1_set(number v) {
                this->expr_50_out1 = v;
                this->expr_52_in1_set(this->expr_50_out1);
                this->expr_47_in1_set(this->expr_50_out1);
            }
            
            void expr_50_in1_set(number in1) {
                this->expr_50_in1 = in1;
                this->expr_50_out1_set(rnbo_floor(this->expr_50_in1));//#map:p_obj-193/p_obj-25/floor_obj-21:1
            }
            
            void expr_51_out1_set(number v) {
                this->expr_51_out1 = v;
                this->expr_50_in1_set(this->expr_51_out1);
            }
            
            void expr_51_in1_set(number in1) {
                this->expr_51_in1 = in1;
            
                this->expr_51_out1_set(
                    (this->expr_51_in2 == 0 ? 0 : (this->expr_51_in2 == 0. ? 0. : this->expr_51_in1 / this->expr_51_in2))
                );//#map:p_obj-193/p_obj-25//_obj-10:1
            }
            
            void eventinlet_22_out1_number_set(number v) {
                this->expr_54_in1_set(v);
                this->expr_51_in1_set(v);
            }
            
            void expr_54_in1_bang() {
                this->expr_54_out1_set(this->safemod(this->expr_54_in1, this->expr_54_in2));//#map:p_obj-193/p_obj-25/%_obj-6:1
            }
            
            void expr_51_in1_bang() {
                this->expr_51_out1_set(
                    (this->expr_51_in2 == 0 ? 0 : (this->expr_51_in2 == 0. ? 0. : this->expr_51_in1 / this->expr_51_in2))
                );//#map:p_obj-193/p_obj-25//_obj-10:1
            }
            
            void expr_54_in2_set(number v) {
                this->expr_54_in2 = v;
            }
            
            void expr_51_in2_set(number v) {
                this->expr_51_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_41_in1 = 0;
                expr_41_out1 = 0;
                route_09_selector1 = 1;
                expr_42_in1 = 0;
                expr_42_in2 = 0.3;
                expr_42_out1 = 0;
                expr_43_in1 = 0;
                expr_43_in2 = 2;
                expr_43_out1 = 0;
                expr_44_in1 = 0;
                expr_44_in2 = 2;
                expr_44_out1 = 0;
                expr_45_in1 = 0;
                expr_45_in2 = 0.3;
                expr_45_out1 = 0;
                expr_46_in1 = 0;
                expr_46_out1 = 0;
                route_10_selector1 = 1;
                expr_47_in1 = 0;
                expr_47_in2 = 2;
                expr_47_out1 = 0;
                expr_48_in1 = 0;
                expr_48_in2 = 2;
                expr_48_out1 = 0;
                expr_49_in1 = 0;
                expr_49_in2 = 0.3;
                expr_49_out1 = 0;
                expr_50_in1 = 0;
                expr_50_out1 = 0;
                expr_51_in1 = 0;
                expr_51_in2 = 2;
                expr_51_out1 = 0;
                expr_52_in1 = 0;
                expr_52_in2 = 2;
                expr_52_out1 = 0;
                route_11_selector1 = 1;
                route_12_selector1 = 1;
                expr_53_in1 = 0;
                expr_53_in2 = 0.3;
                expr_53_out1 = 0;
                expr_54_in1 = 0;
                expr_54_in2 = 2;
                expr_54_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_41_in1;
                number expr_41_out1;
                number route_09_selector1;
                number expr_42_in1;
                number expr_42_in2;
                number expr_42_out1;
                number expr_43_in1;
                number expr_43_in2;
                number expr_43_out1;
                number expr_44_in1;
                number expr_44_in2;
                number expr_44_out1;
                number expr_45_in1;
                number expr_45_in2;
                number expr_45_out1;
                number expr_46_in1;
                number expr_46_out1;
                number route_10_selector1;
                number expr_47_in1;
                number expr_47_in2;
                number expr_47_out1;
                number expr_48_in1;
                number expr_48_in2;
                number expr_48_out1;
                number expr_49_in1;
                number expr_49_in2;
                number expr_49_out1;
                number expr_50_in1;
                number expr_50_out1;
                number expr_51_in1;
                number expr_51_in2;
                number expr_51_out1;
                number expr_52_in1;
                number expr_52_in2;
                number expr_52_out1;
                number route_11_selector1;
                number route_12_selector1;
                number expr_53_in1;
                number expr_53_in2;
                number expr_53_out1;
                number expr_54_in1;
                number expr_54_in2;
                number expr_54_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1037 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1037()
            {
            }
            
            ~RNBOSubpatcher_1037()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_23_out1_bang_bang() {
                this->expr_68_in1_bang();
                this->expr_65_in1_bang();
            }
            
            void eventinlet_23_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_68_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_68_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_65_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_65_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_16_nomatch_bang_bang() {}
            
            void eventoutlet_16_in1_bang_bang() {
                ;
                this->getPatcher()->p_13_out4_bang_bang();
            }
            
            void route_16_match1_bang_bang() {
                this->eventoutlet_16_in1_bang_bang();
            }
            
            void eventoutlet_16_in1_number_set(number v) {
                this->getPatcher()->p_13_out4_number_set(v);
            }
            
            void route_16_match1_number_set(number v) {
                this->eventoutlet_16_in1_number_set(v);
            }
            
            void eventoutlet_16_in1_list_set(const list& v) {
                this->getPatcher()->p_13_out4_list_set((list)v);
            }
            
            void route_16_match1_list_set(const list& v) {
                this->eventoutlet_16_in1_list_set(v);
            }
            
            void route_16_nomatch_number_set(number ) {}
            
            void route_16_nomatch_list_set(const list& ) {}
            
            void route_16_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_16_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_16_selector1) {
                        if (input->length == 0)
                            this->route_16_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_16_match1_number_set(input[0]);
                        else
                            this->route_16_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_16_nomatch_number_set(v[0]);
                        } else {
                            this->route_16_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_16_input_number_set(number v) {
                this->route_16_input_list_set({v});
            }
            
            void expr_67_out1_set(number v) {
                this->expr_67_out1 = v;
                this->route_16_input_number_set(this->expr_67_out1);
            }
            
            void expr_67_in1_set(number in1) {
                this->expr_67_in1 = in1;
                this->expr_67_out1_set(this->expr_67_in1 > this->expr_67_in2);//#map:p_obj-193/p_obj-30/>_obj-13:1
            }
            
            void expr_68_out1_set(number v) {
                this->expr_68_out1 = v;
                this->expr_67_in1_set(this->expr_68_out1);
            }
            
            void expr_68_in1_set(number in1) {
                this->expr_68_in1 = in1;
                this->expr_68_out1_set(this->safemod(this->expr_68_in1, this->expr_68_in2));//#map:p_obj-193/p_obj-30/%_obj-6:1
            }
            
            void route_15_nomatch_bang_bang() {}
            
            void eventoutlet_15_in1_bang_bang() {
                ;
                this->getPatcher()->p_13_out3_bang_bang();
            }
            
            void route_15_match1_bang_bang() {
                this->eventoutlet_15_in1_bang_bang();
            }
            
            void eventoutlet_15_in1_number_set(number v) {
                this->getPatcher()->p_13_out3_number_set(v);
            }
            
            void route_15_match1_number_set(number v) {
                this->eventoutlet_15_in1_number_set(v);
            }
            
            void eventoutlet_15_in1_list_set(const list& v) {
                this->getPatcher()->p_13_out3_list_set((list)v);
            }
            
            void route_15_match1_list_set(const list& v) {
                this->eventoutlet_15_in1_list_set(v);
            }
            
            void route_15_nomatch_number_set(number ) {}
            
            void route_15_nomatch_list_set(const list& ) {}
            
            void route_15_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_15_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_15_selector1) {
                        if (input->length == 0)
                            this->route_15_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_15_match1_number_set(input[0]);
                        else
                            this->route_15_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_15_nomatch_number_set(v[0]);
                        } else {
                            this->route_15_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_15_input_number_set(number v) {
                this->route_15_input_list_set({v});
            }
            
            void expr_63_out1_set(number v) {
                this->expr_63_out1 = v;
                this->route_15_input_number_set(this->expr_63_out1);
            }
            
            void expr_63_in1_set(number in1) {
                this->expr_63_in1 = in1;
                this->expr_63_out1_set(this->expr_63_in1 > this->expr_63_in2);//#map:p_obj-193/p_obj-30/>_obj-14:1
            }
            
            void expr_66_out1_set(number v) {
                this->expr_66_out1 = v;
                this->expr_63_in1_set(this->expr_66_out1);
            }
            
            void expr_66_in1_set(number in1) {
                this->expr_66_in1 = in1;
                this->expr_66_out1_set(this->safemod(this->expr_66_in1, this->expr_66_in2));//#map:p_obj-193/p_obj-30/%_obj-7:1
            }
            
            void route_14_nomatch_bang_bang() {}
            
            void eventoutlet_14_in1_bang_bang() {
                ;
                this->getPatcher()->p_13_out2_bang_bang();
            }
            
            void route_14_match1_bang_bang() {
                this->eventoutlet_14_in1_bang_bang();
            }
            
            void eventoutlet_14_in1_number_set(number v) {
                this->getPatcher()->p_13_out2_number_set(v);
            }
            
            void route_14_match1_number_set(number v) {
                this->eventoutlet_14_in1_number_set(v);
            }
            
            void eventoutlet_14_in1_list_set(const list& v) {
                this->getPatcher()->p_13_out2_list_set((list)v);
            }
            
            void route_14_match1_list_set(const list& v) {
                this->eventoutlet_14_in1_list_set(v);
            }
            
            void route_14_nomatch_number_set(number ) {}
            
            void route_14_nomatch_list_set(const list& ) {}
            
            void route_14_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_14_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_14_selector1) {
                        if (input->length == 0)
                            this->route_14_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_14_match1_number_set(input[0]);
                        else
                            this->route_14_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_14_nomatch_number_set(v[0]);
                        } else {
                            this->route_14_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_14_input_number_set(number v) {
                this->route_14_input_list_set({v});
            }
            
            void expr_59_out1_set(number v) {
                this->expr_59_out1 = v;
                this->route_14_input_number_set(this->expr_59_out1);
            }
            
            void expr_59_in1_set(number in1) {
                this->expr_59_in1 = in1;
                this->expr_59_out1_set(this->expr_59_in1 > this->expr_59_in2);//#map:p_obj-193/p_obj-30/>_obj-15:1
            }
            
            void expr_62_out1_set(number v) {
                this->expr_62_out1 = v;
                this->expr_59_in1_set(this->expr_62_out1);
            }
            
            void expr_62_in1_set(number in1) {
                this->expr_62_in1 = in1;
                this->expr_62_out1_set(this->safemod(this->expr_62_in1, this->expr_62_in2));//#map:p_obj-193/p_obj-30/%_obj-8:1
            }
            
            void route_13_nomatch_bang_bang() {}
            
            void eventoutlet_13_in1_bang_bang() {
                ;
                this->getPatcher()->p_13_out1_bang_bang();
            }
            
            void route_13_match1_bang_bang() {
                this->eventoutlet_13_in1_bang_bang();
            }
            
            void eventoutlet_13_in1_number_set(number v) {
                this->getPatcher()->p_13_out1_number_set(v);
            }
            
            void route_13_match1_number_set(number v) {
                this->eventoutlet_13_in1_number_set(v);
            }
            
            void eventoutlet_13_in1_list_set(const list& v) {
                this->getPatcher()->p_13_out1_list_set((list)v);
            }
            
            void route_13_match1_list_set(const list& v) {
                this->eventoutlet_13_in1_list_set(v);
            }
            
            void route_13_nomatch_number_set(number ) {}
            
            void route_13_nomatch_list_set(const list& ) {}
            
            void route_13_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_13_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_13_selector1) {
                        if (input->length == 0)
                            this->route_13_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_13_match1_number_set(input[0]);
                        else
                            this->route_13_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_13_nomatch_number_set(v[0]);
                        } else {
                            this->route_13_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_13_input_number_set(number v) {
                this->route_13_input_list_set({v});
            }
            
            void expr_56_out1_set(number v) {
                this->expr_56_out1 = v;
                this->route_13_input_number_set(this->expr_56_out1);
            }
            
            void expr_56_in1_set(number in1) {
                this->expr_56_in1 = in1;
                this->expr_56_out1_set(this->expr_56_in1 > this->expr_56_in2);//#map:p_obj-193/p_obj-30/>_obj-16:1
            }
            
            void expr_58_out1_set(number v) {
                this->expr_58_out1 = v;
                this->expr_56_in1_set(this->expr_58_out1);
            }
            
            void expr_58_in1_set(number in1) {
                this->expr_58_in1 = in1;
                this->expr_58_out1_set(this->safemod(this->expr_58_in1, this->expr_58_in2));//#map:p_obj-193/p_obj-30/%_obj-9:1
            }
            
            void expr_55_out1_set(number v) {
                this->expr_55_out1 = v;
                this->expr_58_in1_set(this->expr_55_out1);
            }
            
            void expr_55_in1_set(number in1) {
                this->expr_55_in1 = in1;
                this->expr_55_out1_set(rnbo_floor(this->expr_55_in1));//#map:p_obj-193/p_obj-30/floor_obj-26:1
            }
            
            void expr_57_out1_set(number v) {
                this->expr_57_out1 = v;
                this->expr_55_in1_set(this->expr_57_out1);
            }
            
            void expr_57_in1_set(number in1) {
                this->expr_57_in1 = in1;
            
                this->expr_57_out1_set(
                    (this->expr_57_in2 == 0 ? 0 : (this->expr_57_in2 == 0. ? 0. : this->expr_57_in1 / this->expr_57_in2))
                );//#map:p_obj-193/p_obj-30//_obj-12:1
            }
            
            void expr_60_out1_set(number v) {
                this->expr_60_out1 = v;
                this->expr_62_in1_set(this->expr_60_out1);
                this->expr_57_in1_set(this->expr_60_out1);
            }
            
            void expr_60_in1_set(number in1) {
                this->expr_60_in1 = in1;
                this->expr_60_out1_set(rnbo_floor(this->expr_60_in1));//#map:p_obj-193/p_obj-30/floor_obj-24:1
            }
            
            void expr_61_out1_set(number v) {
                this->expr_61_out1 = v;
                this->expr_60_in1_set(this->expr_61_out1);
            }
            
            void expr_61_in1_set(number in1) {
                this->expr_61_in1 = in1;
            
                this->expr_61_out1_set(
                    (this->expr_61_in2 == 0 ? 0 : (this->expr_61_in2 == 0. ? 0. : this->expr_61_in1 / this->expr_61_in2))
                );//#map:p_obj-193/p_obj-30//_obj-11:1
            }
            
            void expr_64_out1_set(number v) {
                this->expr_64_out1 = v;
                this->expr_66_in1_set(this->expr_64_out1);
                this->expr_61_in1_set(this->expr_64_out1);
            }
            
            void expr_64_in1_set(number in1) {
                this->expr_64_in1 = in1;
                this->expr_64_out1_set(rnbo_floor(this->expr_64_in1));//#map:p_obj-193/p_obj-30/floor_obj-21:1
            }
            
            void expr_65_out1_set(number v) {
                this->expr_65_out1 = v;
                this->expr_64_in1_set(this->expr_65_out1);
            }
            
            void expr_65_in1_set(number in1) {
                this->expr_65_in1 = in1;
            
                this->expr_65_out1_set(
                    (this->expr_65_in2 == 0 ? 0 : (this->expr_65_in2 == 0. ? 0. : this->expr_65_in1 / this->expr_65_in2))
                );//#map:p_obj-193/p_obj-30//_obj-10:1
            }
            
            void eventinlet_23_out1_number_set(number v) {
                this->expr_68_in1_set(v);
                this->expr_65_in1_set(v);
            }
            
            void expr_68_in1_bang() {
                this->expr_68_out1_set(this->safemod(this->expr_68_in1, this->expr_68_in2));//#map:p_obj-193/p_obj-30/%_obj-6:1
            }
            
            void expr_65_in1_bang() {
                this->expr_65_out1_set(
                    (this->expr_65_in2 == 0 ? 0 : (this->expr_65_in2 == 0. ? 0. : this->expr_65_in1 / this->expr_65_in2))
                );//#map:p_obj-193/p_obj-30//_obj-10:1
            }
            
            void expr_68_in2_set(number v) {
                this->expr_68_in2 = v;
            }
            
            void expr_65_in2_set(number v) {
                this->expr_65_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_55_in1 = 0;
                expr_55_out1 = 0;
                route_13_selector1 = 1;
                expr_56_in1 = 0;
                expr_56_in2 = 0.3;
                expr_56_out1 = 0;
                expr_57_in1 = 0;
                expr_57_in2 = 2;
                expr_57_out1 = 0;
                expr_58_in1 = 0;
                expr_58_in2 = 2;
                expr_58_out1 = 0;
                expr_59_in1 = 0;
                expr_59_in2 = 0.3;
                expr_59_out1 = 0;
                expr_60_in1 = 0;
                expr_60_out1 = 0;
                route_14_selector1 = 1;
                expr_61_in1 = 0;
                expr_61_in2 = 2;
                expr_61_out1 = 0;
                expr_62_in1 = 0;
                expr_62_in2 = 2;
                expr_62_out1 = 0;
                expr_63_in1 = 0;
                expr_63_in2 = 0.3;
                expr_63_out1 = 0;
                expr_64_in1 = 0;
                expr_64_out1 = 0;
                expr_65_in1 = 0;
                expr_65_in2 = 2;
                expr_65_out1 = 0;
                expr_66_in1 = 0;
                expr_66_in2 = 2;
                expr_66_out1 = 0;
                route_15_selector1 = 1;
                route_16_selector1 = 1;
                expr_67_in1 = 0;
                expr_67_in2 = 0.3;
                expr_67_out1 = 0;
                expr_68_in1 = 0;
                expr_68_in2 = 2;
                expr_68_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_55_in1;
                number expr_55_out1;
                number route_13_selector1;
                number expr_56_in1;
                number expr_56_in2;
                number expr_56_out1;
                number expr_57_in1;
                number expr_57_in2;
                number expr_57_out1;
                number expr_58_in1;
                number expr_58_in2;
                number expr_58_out1;
                number expr_59_in1;
                number expr_59_in2;
                number expr_59_out1;
                number expr_60_in1;
                number expr_60_out1;
                number route_14_selector1;
                number expr_61_in1;
                number expr_61_in2;
                number expr_61_out1;
                number expr_62_in1;
                number expr_62_in2;
                number expr_62_out1;
                number expr_63_in1;
                number expr_63_in2;
                number expr_63_out1;
                number expr_64_in1;
                number expr_64_out1;
                number expr_65_in1;
                number expr_65_in2;
                number expr_65_out1;
                number expr_66_in1;
                number expr_66_in2;
                number expr_66_out1;
                number route_15_selector1;
                number route_16_selector1;
                number expr_67_in1;
                number expr_67_in2;
                number expr_67_out1;
                number expr_68_in1;
                number expr_68_in2;
                number expr_68_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1038 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1038()
            {
            }
            
            ~RNBOSubpatcher_1038()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_24_out1_bang_bang() {
                this->expr_82_in1_bang();
                this->expr_79_in1_bang();
            }
            
            void eventinlet_24_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_82_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_82_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_79_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_79_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_20_nomatch_bang_bang() {}
            
            void eventoutlet_20_in1_bang_bang() {
                ;
                this->getPatcher()->p_14_out4_bang_bang();
            }
            
            void route_20_match1_bang_bang() {
                this->eventoutlet_20_in1_bang_bang();
            }
            
            void eventoutlet_20_in1_number_set(number v) {
                this->getPatcher()->p_14_out4_number_set(v);
            }
            
            void route_20_match1_number_set(number v) {
                this->eventoutlet_20_in1_number_set(v);
            }
            
            void eventoutlet_20_in1_list_set(const list& v) {
                this->getPatcher()->p_14_out4_list_set((list)v);
            }
            
            void route_20_match1_list_set(const list& v) {
                this->eventoutlet_20_in1_list_set(v);
            }
            
            void route_20_nomatch_number_set(number ) {}
            
            void route_20_nomatch_list_set(const list& ) {}
            
            void route_20_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_20_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_20_selector1) {
                        if (input->length == 0)
                            this->route_20_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_20_match1_number_set(input[0]);
                        else
                            this->route_20_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_20_nomatch_number_set(v[0]);
                        } else {
                            this->route_20_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_20_input_number_set(number v) {
                this->route_20_input_list_set({v});
            }
            
            void expr_81_out1_set(number v) {
                this->expr_81_out1 = v;
                this->route_20_input_number_set(this->expr_81_out1);
            }
            
            void expr_81_in1_set(number in1) {
                this->expr_81_in1 = in1;
                this->expr_81_out1_set(this->expr_81_in1 > this->expr_81_in2);//#map:p_obj-193/p_obj-35/>_obj-13:1
            }
            
            void expr_82_out1_set(number v) {
                this->expr_82_out1 = v;
                this->expr_81_in1_set(this->expr_82_out1);
            }
            
            void expr_82_in1_set(number in1) {
                this->expr_82_in1 = in1;
                this->expr_82_out1_set(this->safemod(this->expr_82_in1, this->expr_82_in2));//#map:p_obj-193/p_obj-35/%_obj-6:1
            }
            
            void route_19_nomatch_bang_bang() {}
            
            void eventoutlet_19_in1_bang_bang() {
                ;
                this->getPatcher()->p_14_out3_bang_bang();
            }
            
            void route_19_match1_bang_bang() {
                this->eventoutlet_19_in1_bang_bang();
            }
            
            void eventoutlet_19_in1_number_set(number v) {
                this->getPatcher()->p_14_out3_number_set(v);
            }
            
            void route_19_match1_number_set(number v) {
                this->eventoutlet_19_in1_number_set(v);
            }
            
            void eventoutlet_19_in1_list_set(const list& v) {
                this->getPatcher()->p_14_out3_list_set((list)v);
            }
            
            void route_19_match1_list_set(const list& v) {
                this->eventoutlet_19_in1_list_set(v);
            }
            
            void route_19_nomatch_number_set(number ) {}
            
            void route_19_nomatch_list_set(const list& ) {}
            
            void route_19_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_19_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_19_selector1) {
                        if (input->length == 0)
                            this->route_19_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_19_match1_number_set(input[0]);
                        else
                            this->route_19_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_19_nomatch_number_set(v[0]);
                        } else {
                            this->route_19_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_19_input_number_set(number v) {
                this->route_19_input_list_set({v});
            }
            
            void expr_77_out1_set(number v) {
                this->expr_77_out1 = v;
                this->route_19_input_number_set(this->expr_77_out1);
            }
            
            void expr_77_in1_set(number in1) {
                this->expr_77_in1 = in1;
                this->expr_77_out1_set(this->expr_77_in1 > this->expr_77_in2);//#map:p_obj-193/p_obj-35/>_obj-14:1
            }
            
            void expr_80_out1_set(number v) {
                this->expr_80_out1 = v;
                this->expr_77_in1_set(this->expr_80_out1);
            }
            
            void expr_80_in1_set(number in1) {
                this->expr_80_in1 = in1;
                this->expr_80_out1_set(this->safemod(this->expr_80_in1, this->expr_80_in2));//#map:p_obj-193/p_obj-35/%_obj-7:1
            }
            
            void route_18_nomatch_bang_bang() {}
            
            void eventoutlet_18_in1_bang_bang() {
                ;
                this->getPatcher()->p_14_out2_bang_bang();
            }
            
            void route_18_match1_bang_bang() {
                this->eventoutlet_18_in1_bang_bang();
            }
            
            void eventoutlet_18_in1_number_set(number v) {
                this->getPatcher()->p_14_out2_number_set(v);
            }
            
            void route_18_match1_number_set(number v) {
                this->eventoutlet_18_in1_number_set(v);
            }
            
            void eventoutlet_18_in1_list_set(const list& v) {
                this->getPatcher()->p_14_out2_list_set((list)v);
            }
            
            void route_18_match1_list_set(const list& v) {
                this->eventoutlet_18_in1_list_set(v);
            }
            
            void route_18_nomatch_number_set(number ) {}
            
            void route_18_nomatch_list_set(const list& ) {}
            
            void route_18_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_18_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_18_selector1) {
                        if (input->length == 0)
                            this->route_18_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_18_match1_number_set(input[0]);
                        else
                            this->route_18_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_18_nomatch_number_set(v[0]);
                        } else {
                            this->route_18_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_18_input_number_set(number v) {
                this->route_18_input_list_set({v});
            }
            
            void expr_73_out1_set(number v) {
                this->expr_73_out1 = v;
                this->route_18_input_number_set(this->expr_73_out1);
            }
            
            void expr_73_in1_set(number in1) {
                this->expr_73_in1 = in1;
                this->expr_73_out1_set(this->expr_73_in1 > this->expr_73_in2);//#map:p_obj-193/p_obj-35/>_obj-15:1
            }
            
            void expr_76_out1_set(number v) {
                this->expr_76_out1 = v;
                this->expr_73_in1_set(this->expr_76_out1);
            }
            
            void expr_76_in1_set(number in1) {
                this->expr_76_in1 = in1;
                this->expr_76_out1_set(this->safemod(this->expr_76_in1, this->expr_76_in2));//#map:p_obj-193/p_obj-35/%_obj-8:1
            }
            
            void route_17_nomatch_bang_bang() {}
            
            void eventoutlet_17_in1_bang_bang() {
                ;
                this->getPatcher()->p_14_out1_bang_bang();
            }
            
            void route_17_match1_bang_bang() {
                this->eventoutlet_17_in1_bang_bang();
            }
            
            void eventoutlet_17_in1_number_set(number v) {
                this->getPatcher()->p_14_out1_number_set(v);
            }
            
            void route_17_match1_number_set(number v) {
                this->eventoutlet_17_in1_number_set(v);
            }
            
            void eventoutlet_17_in1_list_set(const list& v) {
                this->getPatcher()->p_14_out1_list_set((list)v);
            }
            
            void route_17_match1_list_set(const list& v) {
                this->eventoutlet_17_in1_list_set(v);
            }
            
            void route_17_nomatch_number_set(number ) {}
            
            void route_17_nomatch_list_set(const list& ) {}
            
            void route_17_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_17_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_17_selector1) {
                        if (input->length == 0)
                            this->route_17_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_17_match1_number_set(input[0]);
                        else
                            this->route_17_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_17_nomatch_number_set(v[0]);
                        } else {
                            this->route_17_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_17_input_number_set(number v) {
                this->route_17_input_list_set({v});
            }
            
            void expr_70_out1_set(number v) {
                this->expr_70_out1 = v;
                this->route_17_input_number_set(this->expr_70_out1);
            }
            
            void expr_70_in1_set(number in1) {
                this->expr_70_in1 = in1;
                this->expr_70_out1_set(this->expr_70_in1 > this->expr_70_in2);//#map:p_obj-193/p_obj-35/>_obj-16:1
            }
            
            void expr_72_out1_set(number v) {
                this->expr_72_out1 = v;
                this->expr_70_in1_set(this->expr_72_out1);
            }
            
            void expr_72_in1_set(number in1) {
                this->expr_72_in1 = in1;
                this->expr_72_out1_set(this->safemod(this->expr_72_in1, this->expr_72_in2));//#map:p_obj-193/p_obj-35/%_obj-9:1
            }
            
            void expr_69_out1_set(number v) {
                this->expr_69_out1 = v;
                this->expr_72_in1_set(this->expr_69_out1);
            }
            
            void expr_69_in1_set(number in1) {
                this->expr_69_in1 = in1;
                this->expr_69_out1_set(rnbo_floor(this->expr_69_in1));//#map:p_obj-193/p_obj-35/floor_obj-26:1
            }
            
            void expr_71_out1_set(number v) {
                this->expr_71_out1 = v;
                this->expr_69_in1_set(this->expr_71_out1);
            }
            
            void expr_71_in1_set(number in1) {
                this->expr_71_in1 = in1;
            
                this->expr_71_out1_set(
                    (this->expr_71_in2 == 0 ? 0 : (this->expr_71_in2 == 0. ? 0. : this->expr_71_in1 / this->expr_71_in2))
                );//#map:p_obj-193/p_obj-35//_obj-12:1
            }
            
            void expr_74_out1_set(number v) {
                this->expr_74_out1 = v;
                this->expr_76_in1_set(this->expr_74_out1);
                this->expr_71_in1_set(this->expr_74_out1);
            }
            
            void expr_74_in1_set(number in1) {
                this->expr_74_in1 = in1;
                this->expr_74_out1_set(rnbo_floor(this->expr_74_in1));//#map:p_obj-193/p_obj-35/floor_obj-24:1
            }
            
            void expr_75_out1_set(number v) {
                this->expr_75_out1 = v;
                this->expr_74_in1_set(this->expr_75_out1);
            }
            
            void expr_75_in1_set(number in1) {
                this->expr_75_in1 = in1;
            
                this->expr_75_out1_set(
                    (this->expr_75_in2 == 0 ? 0 : (this->expr_75_in2 == 0. ? 0. : this->expr_75_in1 / this->expr_75_in2))
                );//#map:p_obj-193/p_obj-35//_obj-11:1
            }
            
            void expr_78_out1_set(number v) {
                this->expr_78_out1 = v;
                this->expr_80_in1_set(this->expr_78_out1);
                this->expr_75_in1_set(this->expr_78_out1);
            }
            
            void expr_78_in1_set(number in1) {
                this->expr_78_in1 = in1;
                this->expr_78_out1_set(rnbo_floor(this->expr_78_in1));//#map:p_obj-193/p_obj-35/floor_obj-21:1
            }
            
            void expr_79_out1_set(number v) {
                this->expr_79_out1 = v;
                this->expr_78_in1_set(this->expr_79_out1);
            }
            
            void expr_79_in1_set(number in1) {
                this->expr_79_in1 = in1;
            
                this->expr_79_out1_set(
                    (this->expr_79_in2 == 0 ? 0 : (this->expr_79_in2 == 0. ? 0. : this->expr_79_in1 / this->expr_79_in2))
                );//#map:p_obj-193/p_obj-35//_obj-10:1
            }
            
            void eventinlet_24_out1_number_set(number v) {
                this->expr_82_in1_set(v);
                this->expr_79_in1_set(v);
            }
            
            void expr_82_in1_bang() {
                this->expr_82_out1_set(this->safemod(this->expr_82_in1, this->expr_82_in2));//#map:p_obj-193/p_obj-35/%_obj-6:1
            }
            
            void expr_79_in1_bang() {
                this->expr_79_out1_set(
                    (this->expr_79_in2 == 0 ? 0 : (this->expr_79_in2 == 0. ? 0. : this->expr_79_in1 / this->expr_79_in2))
                );//#map:p_obj-193/p_obj-35//_obj-10:1
            }
            
            void expr_82_in2_set(number v) {
                this->expr_82_in2 = v;
            }
            
            void expr_79_in2_set(number v) {
                this->expr_79_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_69_in1 = 0;
                expr_69_out1 = 0;
                route_17_selector1 = 1;
                expr_70_in1 = 0;
                expr_70_in2 = 0.3;
                expr_70_out1 = 0;
                expr_71_in1 = 0;
                expr_71_in2 = 2;
                expr_71_out1 = 0;
                expr_72_in1 = 0;
                expr_72_in2 = 2;
                expr_72_out1 = 0;
                expr_73_in1 = 0;
                expr_73_in2 = 0.3;
                expr_73_out1 = 0;
                expr_74_in1 = 0;
                expr_74_out1 = 0;
                route_18_selector1 = 1;
                expr_75_in1 = 0;
                expr_75_in2 = 2;
                expr_75_out1 = 0;
                expr_76_in1 = 0;
                expr_76_in2 = 2;
                expr_76_out1 = 0;
                expr_77_in1 = 0;
                expr_77_in2 = 0.3;
                expr_77_out1 = 0;
                expr_78_in1 = 0;
                expr_78_out1 = 0;
                expr_79_in1 = 0;
                expr_79_in2 = 2;
                expr_79_out1 = 0;
                expr_80_in1 = 0;
                expr_80_in2 = 2;
                expr_80_out1 = 0;
                route_19_selector1 = 1;
                route_20_selector1 = 1;
                expr_81_in1 = 0;
                expr_81_in2 = 0.3;
                expr_81_out1 = 0;
                expr_82_in1 = 0;
                expr_82_in2 = 2;
                expr_82_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_69_in1;
                number expr_69_out1;
                number route_17_selector1;
                number expr_70_in1;
                number expr_70_in2;
                number expr_70_out1;
                number expr_71_in1;
                number expr_71_in2;
                number expr_71_out1;
                number expr_72_in1;
                number expr_72_in2;
                number expr_72_out1;
                number expr_73_in1;
                number expr_73_in2;
                number expr_73_out1;
                number expr_74_in1;
                number expr_74_out1;
                number route_18_selector1;
                number expr_75_in1;
                number expr_75_in2;
                number expr_75_out1;
                number expr_76_in1;
                number expr_76_in2;
                number expr_76_out1;
                number expr_77_in1;
                number expr_77_in2;
                number expr_77_out1;
                number expr_78_in1;
                number expr_78_out1;
                number expr_79_in1;
                number expr_79_in2;
                number expr_79_out1;
                number expr_80_in1;
                number expr_80_in2;
                number expr_80_out1;
                number route_19_selector1;
                number route_20_selector1;
                number expr_81_in1;
                number expr_81_in2;
                number expr_81_out1;
                number expr_82_in1;
                number expr_82_in2;
                number expr_82_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1039 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1039()
            {
            }
            
            ~RNBOSubpatcher_1039()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_25_out1_bang_bang() {
                this->expr_96_in1_bang();
                this->expr_93_in1_bang();
            }
            
            void eventinlet_25_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_96_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_96_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_93_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_93_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_24_nomatch_bang_bang() {}
            
            void eventoutlet_24_in1_bang_bang() {
                ;
                this->getPatcher()->p_15_out4_bang_bang();
            }
            
            void route_24_match1_bang_bang() {
                this->eventoutlet_24_in1_bang_bang();
            }
            
            void eventoutlet_24_in1_number_set(number v) {
                this->getPatcher()->p_15_out4_number_set(v);
            }
            
            void route_24_match1_number_set(number v) {
                this->eventoutlet_24_in1_number_set(v);
            }
            
            void eventoutlet_24_in1_list_set(const list& v) {
                this->getPatcher()->p_15_out4_list_set((list)v);
            }
            
            void route_24_match1_list_set(const list& v) {
                this->eventoutlet_24_in1_list_set(v);
            }
            
            void route_24_nomatch_number_set(number ) {}
            
            void route_24_nomatch_list_set(const list& ) {}
            
            void route_24_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_24_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_24_selector1) {
                        if (input->length == 0)
                            this->route_24_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_24_match1_number_set(input[0]);
                        else
                            this->route_24_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_24_nomatch_number_set(v[0]);
                        } else {
                            this->route_24_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_24_input_number_set(number v) {
                this->route_24_input_list_set({v});
            }
            
            void expr_95_out1_set(number v) {
                this->expr_95_out1 = v;
                this->route_24_input_number_set(this->expr_95_out1);
            }
            
            void expr_95_in1_set(number in1) {
                this->expr_95_in1 = in1;
                this->expr_95_out1_set(this->expr_95_in1 > this->expr_95_in2);//#map:p_obj-193/p_obj-55/>_obj-13:1
            }
            
            void expr_96_out1_set(number v) {
                this->expr_96_out1 = v;
                this->expr_95_in1_set(this->expr_96_out1);
            }
            
            void expr_96_in1_set(number in1) {
                this->expr_96_in1 = in1;
                this->expr_96_out1_set(this->safemod(this->expr_96_in1, this->expr_96_in2));//#map:p_obj-193/p_obj-55/%_obj-6:1
            }
            
            void route_23_nomatch_bang_bang() {}
            
            void eventoutlet_23_in1_bang_bang() {
                ;
                this->getPatcher()->p_15_out3_bang_bang();
            }
            
            void route_23_match1_bang_bang() {
                this->eventoutlet_23_in1_bang_bang();
            }
            
            void eventoutlet_23_in1_number_set(number v) {
                this->getPatcher()->p_15_out3_number_set(v);
            }
            
            void route_23_match1_number_set(number v) {
                this->eventoutlet_23_in1_number_set(v);
            }
            
            void eventoutlet_23_in1_list_set(const list& v) {
                this->getPatcher()->p_15_out3_list_set((list)v);
            }
            
            void route_23_match1_list_set(const list& v) {
                this->eventoutlet_23_in1_list_set(v);
            }
            
            void route_23_nomatch_number_set(number ) {}
            
            void route_23_nomatch_list_set(const list& ) {}
            
            void route_23_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_23_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_23_selector1) {
                        if (input->length == 0)
                            this->route_23_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_23_match1_number_set(input[0]);
                        else
                            this->route_23_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_23_nomatch_number_set(v[0]);
                        } else {
                            this->route_23_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_23_input_number_set(number v) {
                this->route_23_input_list_set({v});
            }
            
            void expr_91_out1_set(number v) {
                this->expr_91_out1 = v;
                this->route_23_input_number_set(this->expr_91_out1);
            }
            
            void expr_91_in1_set(number in1) {
                this->expr_91_in1 = in1;
                this->expr_91_out1_set(this->expr_91_in1 > this->expr_91_in2);//#map:p_obj-193/p_obj-55/>_obj-14:1
            }
            
            void expr_94_out1_set(number v) {
                this->expr_94_out1 = v;
                this->expr_91_in1_set(this->expr_94_out1);
            }
            
            void expr_94_in1_set(number in1) {
                this->expr_94_in1 = in1;
                this->expr_94_out1_set(this->safemod(this->expr_94_in1, this->expr_94_in2));//#map:p_obj-193/p_obj-55/%_obj-7:1
            }
            
            void route_22_nomatch_bang_bang() {}
            
            void eventoutlet_22_in1_bang_bang() {
                ;
                this->getPatcher()->p_15_out2_bang_bang();
            }
            
            void route_22_match1_bang_bang() {
                this->eventoutlet_22_in1_bang_bang();
            }
            
            void eventoutlet_22_in1_number_set(number v) {
                this->getPatcher()->p_15_out2_number_set(v);
            }
            
            void route_22_match1_number_set(number v) {
                this->eventoutlet_22_in1_number_set(v);
            }
            
            void eventoutlet_22_in1_list_set(const list& v) {
                this->getPatcher()->p_15_out2_list_set((list)v);
            }
            
            void route_22_match1_list_set(const list& v) {
                this->eventoutlet_22_in1_list_set(v);
            }
            
            void route_22_nomatch_number_set(number ) {}
            
            void route_22_nomatch_list_set(const list& ) {}
            
            void route_22_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_22_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_22_selector1) {
                        if (input->length == 0)
                            this->route_22_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_22_match1_number_set(input[0]);
                        else
                            this->route_22_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_22_nomatch_number_set(v[0]);
                        } else {
                            this->route_22_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_22_input_number_set(number v) {
                this->route_22_input_list_set({v});
            }
            
            void expr_87_out1_set(number v) {
                this->expr_87_out1 = v;
                this->route_22_input_number_set(this->expr_87_out1);
            }
            
            void expr_87_in1_set(number in1) {
                this->expr_87_in1 = in1;
                this->expr_87_out1_set(this->expr_87_in1 > this->expr_87_in2);//#map:p_obj-193/p_obj-55/>_obj-15:1
            }
            
            void expr_90_out1_set(number v) {
                this->expr_90_out1 = v;
                this->expr_87_in1_set(this->expr_90_out1);
            }
            
            void expr_90_in1_set(number in1) {
                this->expr_90_in1 = in1;
                this->expr_90_out1_set(this->safemod(this->expr_90_in1, this->expr_90_in2));//#map:p_obj-193/p_obj-55/%_obj-8:1
            }
            
            void route_21_nomatch_bang_bang() {}
            
            void eventoutlet_21_in1_bang_bang() {
                ;
                this->getPatcher()->p_15_out1_bang_bang();
            }
            
            void route_21_match1_bang_bang() {
                this->eventoutlet_21_in1_bang_bang();
            }
            
            void eventoutlet_21_in1_number_set(number v) {
                this->getPatcher()->p_15_out1_number_set(v);
            }
            
            void route_21_match1_number_set(number v) {
                this->eventoutlet_21_in1_number_set(v);
            }
            
            void eventoutlet_21_in1_list_set(const list& v) {
                this->getPatcher()->p_15_out1_list_set((list)v);
            }
            
            void route_21_match1_list_set(const list& v) {
                this->eventoutlet_21_in1_list_set(v);
            }
            
            void route_21_nomatch_number_set(number ) {}
            
            void route_21_nomatch_list_set(const list& ) {}
            
            void route_21_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_21_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_21_selector1) {
                        if (input->length == 0)
                            this->route_21_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_21_match1_number_set(input[0]);
                        else
                            this->route_21_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_21_nomatch_number_set(v[0]);
                        } else {
                            this->route_21_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_21_input_number_set(number v) {
                this->route_21_input_list_set({v});
            }
            
            void expr_84_out1_set(number v) {
                this->expr_84_out1 = v;
                this->route_21_input_number_set(this->expr_84_out1);
            }
            
            void expr_84_in1_set(number in1) {
                this->expr_84_in1 = in1;
                this->expr_84_out1_set(this->expr_84_in1 > this->expr_84_in2);//#map:p_obj-193/p_obj-55/>_obj-16:1
            }
            
            void expr_86_out1_set(number v) {
                this->expr_86_out1 = v;
                this->expr_84_in1_set(this->expr_86_out1);
            }
            
            void expr_86_in1_set(number in1) {
                this->expr_86_in1 = in1;
                this->expr_86_out1_set(this->safemod(this->expr_86_in1, this->expr_86_in2));//#map:p_obj-193/p_obj-55/%_obj-9:1
            }
            
            void expr_83_out1_set(number v) {
                this->expr_83_out1 = v;
                this->expr_86_in1_set(this->expr_83_out1);
            }
            
            void expr_83_in1_set(number in1) {
                this->expr_83_in1 = in1;
                this->expr_83_out1_set(rnbo_floor(this->expr_83_in1));//#map:p_obj-193/p_obj-55/floor_obj-26:1
            }
            
            void expr_85_out1_set(number v) {
                this->expr_85_out1 = v;
                this->expr_83_in1_set(this->expr_85_out1);
            }
            
            void expr_85_in1_set(number in1) {
                this->expr_85_in1 = in1;
            
                this->expr_85_out1_set(
                    (this->expr_85_in2 == 0 ? 0 : (this->expr_85_in2 == 0. ? 0. : this->expr_85_in1 / this->expr_85_in2))
                );//#map:p_obj-193/p_obj-55//_obj-12:1
            }
            
            void expr_88_out1_set(number v) {
                this->expr_88_out1 = v;
                this->expr_90_in1_set(this->expr_88_out1);
                this->expr_85_in1_set(this->expr_88_out1);
            }
            
            void expr_88_in1_set(number in1) {
                this->expr_88_in1 = in1;
                this->expr_88_out1_set(rnbo_floor(this->expr_88_in1));//#map:p_obj-193/p_obj-55/floor_obj-24:1
            }
            
            void expr_89_out1_set(number v) {
                this->expr_89_out1 = v;
                this->expr_88_in1_set(this->expr_89_out1);
            }
            
            void expr_89_in1_set(number in1) {
                this->expr_89_in1 = in1;
            
                this->expr_89_out1_set(
                    (this->expr_89_in2 == 0 ? 0 : (this->expr_89_in2 == 0. ? 0. : this->expr_89_in1 / this->expr_89_in2))
                );//#map:p_obj-193/p_obj-55//_obj-11:1
            }
            
            void expr_92_out1_set(number v) {
                this->expr_92_out1 = v;
                this->expr_94_in1_set(this->expr_92_out1);
                this->expr_89_in1_set(this->expr_92_out1);
            }
            
            void expr_92_in1_set(number in1) {
                this->expr_92_in1 = in1;
                this->expr_92_out1_set(rnbo_floor(this->expr_92_in1));//#map:p_obj-193/p_obj-55/floor_obj-21:1
            }
            
            void expr_93_out1_set(number v) {
                this->expr_93_out1 = v;
                this->expr_92_in1_set(this->expr_93_out1);
            }
            
            void expr_93_in1_set(number in1) {
                this->expr_93_in1 = in1;
            
                this->expr_93_out1_set(
                    (this->expr_93_in2 == 0 ? 0 : (this->expr_93_in2 == 0. ? 0. : this->expr_93_in1 / this->expr_93_in2))
                );//#map:p_obj-193/p_obj-55//_obj-10:1
            }
            
            void eventinlet_25_out1_number_set(number v) {
                this->expr_96_in1_set(v);
                this->expr_93_in1_set(v);
            }
            
            void expr_96_in1_bang() {
                this->expr_96_out1_set(this->safemod(this->expr_96_in1, this->expr_96_in2));//#map:p_obj-193/p_obj-55/%_obj-6:1
            }
            
            void expr_93_in1_bang() {
                this->expr_93_out1_set(
                    (this->expr_93_in2 == 0 ? 0 : (this->expr_93_in2 == 0. ? 0. : this->expr_93_in1 / this->expr_93_in2))
                );//#map:p_obj-193/p_obj-55//_obj-10:1
            }
            
            void expr_96_in2_set(number v) {
                this->expr_96_in2 = v;
            }
            
            void expr_93_in2_set(number v) {
                this->expr_93_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_83_in1 = 0;
                expr_83_out1 = 0;
                route_21_selector1 = 1;
                expr_84_in1 = 0;
                expr_84_in2 = 0.3;
                expr_84_out1 = 0;
                expr_85_in1 = 0;
                expr_85_in2 = 2;
                expr_85_out1 = 0;
                expr_86_in1 = 0;
                expr_86_in2 = 2;
                expr_86_out1 = 0;
                expr_87_in1 = 0;
                expr_87_in2 = 0.3;
                expr_87_out1 = 0;
                expr_88_in1 = 0;
                expr_88_out1 = 0;
                route_22_selector1 = 1;
                expr_89_in1 = 0;
                expr_89_in2 = 2;
                expr_89_out1 = 0;
                expr_90_in1 = 0;
                expr_90_in2 = 2;
                expr_90_out1 = 0;
                expr_91_in1 = 0;
                expr_91_in2 = 0.3;
                expr_91_out1 = 0;
                expr_92_in1 = 0;
                expr_92_out1 = 0;
                expr_93_in1 = 0;
                expr_93_in2 = 2;
                expr_93_out1 = 0;
                expr_94_in1 = 0;
                expr_94_in2 = 2;
                expr_94_out1 = 0;
                route_23_selector1 = 1;
                route_24_selector1 = 1;
                expr_95_in1 = 0;
                expr_95_in2 = 0.3;
                expr_95_out1 = 0;
                expr_96_in1 = 0;
                expr_96_in2 = 2;
                expr_96_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_83_in1;
                number expr_83_out1;
                number route_21_selector1;
                number expr_84_in1;
                number expr_84_in2;
                number expr_84_out1;
                number expr_85_in1;
                number expr_85_in2;
                number expr_85_out1;
                number expr_86_in1;
                number expr_86_in2;
                number expr_86_out1;
                number expr_87_in1;
                number expr_87_in2;
                number expr_87_out1;
                number expr_88_in1;
                number expr_88_out1;
                number route_22_selector1;
                number expr_89_in1;
                number expr_89_in2;
                number expr_89_out1;
                number expr_90_in1;
                number expr_90_in2;
                number expr_90_out1;
                number expr_91_in1;
                number expr_91_in2;
                number expr_91_out1;
                number expr_92_in1;
                number expr_92_out1;
                number expr_93_in1;
                number expr_93_in2;
                number expr_93_out1;
                number expr_94_in1;
                number expr_94_in2;
                number expr_94_out1;
                number route_23_selector1;
                number route_24_selector1;
                number expr_95_in1;
                number expr_95_in2;
                number expr_95_out1;
                number expr_96_in1;
                number expr_96_in2;
                number expr_96_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1040 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1040()
            {
            }
            
            ~RNBOSubpatcher_1040()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_26_out1_bang_bang() {
                this->expr_110_in1_bang();
                this->expr_107_in1_bang();
            }
            
            void eventinlet_26_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_110_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_110_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_107_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_107_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_28_nomatch_bang_bang() {}
            
            void eventoutlet_28_in1_bang_bang() {
                ;
                this->getPatcher()->p_16_out4_bang_bang();
            }
            
            void route_28_match1_bang_bang() {
                this->eventoutlet_28_in1_bang_bang();
            }
            
            void eventoutlet_28_in1_number_set(number v) {
                this->getPatcher()->p_16_out4_number_set(v);
            }
            
            void route_28_match1_number_set(number v) {
                this->eventoutlet_28_in1_number_set(v);
            }
            
            void eventoutlet_28_in1_list_set(const list& v) {
                this->getPatcher()->p_16_out4_list_set((list)v);
            }
            
            void route_28_match1_list_set(const list& v) {
                this->eventoutlet_28_in1_list_set(v);
            }
            
            void route_28_nomatch_number_set(number ) {}
            
            void route_28_nomatch_list_set(const list& ) {}
            
            void route_28_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_28_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_28_selector1) {
                        if (input->length == 0)
                            this->route_28_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_28_match1_number_set(input[0]);
                        else
                            this->route_28_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_28_nomatch_number_set(v[0]);
                        } else {
                            this->route_28_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_28_input_number_set(number v) {
                this->route_28_input_list_set({v});
            }
            
            void expr_109_out1_set(number v) {
                this->expr_109_out1 = v;
                this->route_28_input_number_set(this->expr_109_out1);
            }
            
            void expr_109_in1_set(number in1) {
                this->expr_109_in1 = in1;
                this->expr_109_out1_set(this->expr_109_in1 > this->expr_109_in2);//#map:p_obj-193/p_obj-50/>_obj-13:1
            }
            
            void expr_110_out1_set(number v) {
                this->expr_110_out1 = v;
                this->expr_109_in1_set(this->expr_110_out1);
            }
            
            void expr_110_in1_set(number in1) {
                this->expr_110_in1 = in1;
                this->expr_110_out1_set(this->safemod(this->expr_110_in1, this->expr_110_in2));//#map:p_obj-193/p_obj-50/%_obj-6:1
            }
            
            void route_27_nomatch_bang_bang() {}
            
            void eventoutlet_27_in1_bang_bang() {
                ;
                this->getPatcher()->p_16_out3_bang_bang();
            }
            
            void route_27_match1_bang_bang() {
                this->eventoutlet_27_in1_bang_bang();
            }
            
            void eventoutlet_27_in1_number_set(number v) {
                this->getPatcher()->p_16_out3_number_set(v);
            }
            
            void route_27_match1_number_set(number v) {
                this->eventoutlet_27_in1_number_set(v);
            }
            
            void eventoutlet_27_in1_list_set(const list& v) {
                this->getPatcher()->p_16_out3_list_set((list)v);
            }
            
            void route_27_match1_list_set(const list& v) {
                this->eventoutlet_27_in1_list_set(v);
            }
            
            void route_27_nomatch_number_set(number ) {}
            
            void route_27_nomatch_list_set(const list& ) {}
            
            void route_27_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_27_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_27_selector1) {
                        if (input->length == 0)
                            this->route_27_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_27_match1_number_set(input[0]);
                        else
                            this->route_27_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_27_nomatch_number_set(v[0]);
                        } else {
                            this->route_27_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_27_input_number_set(number v) {
                this->route_27_input_list_set({v});
            }
            
            void expr_105_out1_set(number v) {
                this->expr_105_out1 = v;
                this->route_27_input_number_set(this->expr_105_out1);
            }
            
            void expr_105_in1_set(number in1) {
                this->expr_105_in1 = in1;
                this->expr_105_out1_set(this->expr_105_in1 > this->expr_105_in2);//#map:p_obj-193/p_obj-50/>_obj-14:1
            }
            
            void expr_108_out1_set(number v) {
                this->expr_108_out1 = v;
                this->expr_105_in1_set(this->expr_108_out1);
            }
            
            void expr_108_in1_set(number in1) {
                this->expr_108_in1 = in1;
                this->expr_108_out1_set(this->safemod(this->expr_108_in1, this->expr_108_in2));//#map:p_obj-193/p_obj-50/%_obj-7:1
            }
            
            void route_26_nomatch_bang_bang() {}
            
            void eventoutlet_26_in1_bang_bang() {
                ;
                this->getPatcher()->p_16_out2_bang_bang();
            }
            
            void route_26_match1_bang_bang() {
                this->eventoutlet_26_in1_bang_bang();
            }
            
            void eventoutlet_26_in1_number_set(number v) {
                this->getPatcher()->p_16_out2_number_set(v);
            }
            
            void route_26_match1_number_set(number v) {
                this->eventoutlet_26_in1_number_set(v);
            }
            
            void eventoutlet_26_in1_list_set(const list& v) {
                this->getPatcher()->p_16_out2_list_set((list)v);
            }
            
            void route_26_match1_list_set(const list& v) {
                this->eventoutlet_26_in1_list_set(v);
            }
            
            void route_26_nomatch_number_set(number ) {}
            
            void route_26_nomatch_list_set(const list& ) {}
            
            void route_26_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_26_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_26_selector1) {
                        if (input->length == 0)
                            this->route_26_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_26_match1_number_set(input[0]);
                        else
                            this->route_26_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_26_nomatch_number_set(v[0]);
                        } else {
                            this->route_26_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_26_input_number_set(number v) {
                this->route_26_input_list_set({v});
            }
            
            void expr_101_out1_set(number v) {
                this->expr_101_out1 = v;
                this->route_26_input_number_set(this->expr_101_out1);
            }
            
            void expr_101_in1_set(number in1) {
                this->expr_101_in1 = in1;
                this->expr_101_out1_set(this->expr_101_in1 > this->expr_101_in2);//#map:p_obj-193/p_obj-50/>_obj-15:1
            }
            
            void expr_104_out1_set(number v) {
                this->expr_104_out1 = v;
                this->expr_101_in1_set(this->expr_104_out1);
            }
            
            void expr_104_in1_set(number in1) {
                this->expr_104_in1 = in1;
                this->expr_104_out1_set(this->safemod(this->expr_104_in1, this->expr_104_in2));//#map:p_obj-193/p_obj-50/%_obj-8:1
            }
            
            void route_25_nomatch_bang_bang() {}
            
            void eventoutlet_25_in1_bang_bang() {
                ;
                this->getPatcher()->p_16_out1_bang_bang();
            }
            
            void route_25_match1_bang_bang() {
                this->eventoutlet_25_in1_bang_bang();
            }
            
            void eventoutlet_25_in1_number_set(number v) {
                this->getPatcher()->p_16_out1_number_set(v);
            }
            
            void route_25_match1_number_set(number v) {
                this->eventoutlet_25_in1_number_set(v);
            }
            
            void eventoutlet_25_in1_list_set(const list& v) {
                this->getPatcher()->p_16_out1_list_set((list)v);
            }
            
            void route_25_match1_list_set(const list& v) {
                this->eventoutlet_25_in1_list_set(v);
            }
            
            void route_25_nomatch_number_set(number ) {}
            
            void route_25_nomatch_list_set(const list& ) {}
            
            void route_25_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_25_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_25_selector1) {
                        if (input->length == 0)
                            this->route_25_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_25_match1_number_set(input[0]);
                        else
                            this->route_25_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_25_nomatch_number_set(v[0]);
                        } else {
                            this->route_25_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_25_input_number_set(number v) {
                this->route_25_input_list_set({v});
            }
            
            void expr_98_out1_set(number v) {
                this->expr_98_out1 = v;
                this->route_25_input_number_set(this->expr_98_out1);
            }
            
            void expr_98_in1_set(number in1) {
                this->expr_98_in1 = in1;
                this->expr_98_out1_set(this->expr_98_in1 > this->expr_98_in2);//#map:p_obj-193/p_obj-50/>_obj-16:1
            }
            
            void expr_100_out1_set(number v) {
                this->expr_100_out1 = v;
                this->expr_98_in1_set(this->expr_100_out1);
            }
            
            void expr_100_in1_set(number in1) {
                this->expr_100_in1 = in1;
                this->expr_100_out1_set(this->safemod(this->expr_100_in1, this->expr_100_in2));//#map:p_obj-193/p_obj-50/%_obj-9:1
            }
            
            void expr_97_out1_set(number v) {
                this->expr_97_out1 = v;
                this->expr_100_in1_set(this->expr_97_out1);
            }
            
            void expr_97_in1_set(number in1) {
                this->expr_97_in1 = in1;
                this->expr_97_out1_set(rnbo_floor(this->expr_97_in1));//#map:p_obj-193/p_obj-50/floor_obj-26:1
            }
            
            void expr_99_out1_set(number v) {
                this->expr_99_out1 = v;
                this->expr_97_in1_set(this->expr_99_out1);
            }
            
            void expr_99_in1_set(number in1) {
                this->expr_99_in1 = in1;
            
                this->expr_99_out1_set(
                    (this->expr_99_in2 == 0 ? 0 : (this->expr_99_in2 == 0. ? 0. : this->expr_99_in1 / this->expr_99_in2))
                );//#map:p_obj-193/p_obj-50//_obj-12:1
            }
            
            void expr_102_out1_set(number v) {
                this->expr_102_out1 = v;
                this->expr_104_in1_set(this->expr_102_out1);
                this->expr_99_in1_set(this->expr_102_out1);
            }
            
            void expr_102_in1_set(number in1) {
                this->expr_102_in1 = in1;
                this->expr_102_out1_set(rnbo_floor(this->expr_102_in1));//#map:p_obj-193/p_obj-50/floor_obj-24:1
            }
            
            void expr_103_out1_set(number v) {
                this->expr_103_out1 = v;
                this->expr_102_in1_set(this->expr_103_out1);
            }
            
            void expr_103_in1_set(number in1) {
                this->expr_103_in1 = in1;
            
                this->expr_103_out1_set(
                    (this->expr_103_in2 == 0 ? 0 : (this->expr_103_in2 == 0. ? 0. : this->expr_103_in1 / this->expr_103_in2))
                );//#map:p_obj-193/p_obj-50//_obj-11:1
            }
            
            void expr_106_out1_set(number v) {
                this->expr_106_out1 = v;
                this->expr_108_in1_set(this->expr_106_out1);
                this->expr_103_in1_set(this->expr_106_out1);
            }
            
            void expr_106_in1_set(number in1) {
                this->expr_106_in1 = in1;
                this->expr_106_out1_set(rnbo_floor(this->expr_106_in1));//#map:p_obj-193/p_obj-50/floor_obj-21:1
            }
            
            void expr_107_out1_set(number v) {
                this->expr_107_out1 = v;
                this->expr_106_in1_set(this->expr_107_out1);
            }
            
            void expr_107_in1_set(number in1) {
                this->expr_107_in1 = in1;
            
                this->expr_107_out1_set(
                    (this->expr_107_in2 == 0 ? 0 : (this->expr_107_in2 == 0. ? 0. : this->expr_107_in1 / this->expr_107_in2))
                );//#map:p_obj-193/p_obj-50//_obj-10:1
            }
            
            void eventinlet_26_out1_number_set(number v) {
                this->expr_110_in1_set(v);
                this->expr_107_in1_set(v);
            }
            
            void expr_110_in1_bang() {
                this->expr_110_out1_set(this->safemod(this->expr_110_in1, this->expr_110_in2));//#map:p_obj-193/p_obj-50/%_obj-6:1
            }
            
            void expr_107_in1_bang() {
                this->expr_107_out1_set(
                    (this->expr_107_in2 == 0 ? 0 : (this->expr_107_in2 == 0. ? 0. : this->expr_107_in1 / this->expr_107_in2))
                );//#map:p_obj-193/p_obj-50//_obj-10:1
            }
            
            void expr_110_in2_set(number v) {
                this->expr_110_in2 = v;
            }
            
            void expr_107_in2_set(number v) {
                this->expr_107_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_97_in1 = 0;
                expr_97_out1 = 0;
                route_25_selector1 = 1;
                expr_98_in1 = 0;
                expr_98_in2 = 0.3;
                expr_98_out1 = 0;
                expr_99_in1 = 0;
                expr_99_in2 = 2;
                expr_99_out1 = 0;
                expr_100_in1 = 0;
                expr_100_in2 = 2;
                expr_100_out1 = 0;
                expr_101_in1 = 0;
                expr_101_in2 = 0.3;
                expr_101_out1 = 0;
                expr_102_in1 = 0;
                expr_102_out1 = 0;
                route_26_selector1 = 1;
                expr_103_in1 = 0;
                expr_103_in2 = 2;
                expr_103_out1 = 0;
                expr_104_in1 = 0;
                expr_104_in2 = 2;
                expr_104_out1 = 0;
                expr_105_in1 = 0;
                expr_105_in2 = 0.3;
                expr_105_out1 = 0;
                expr_106_in1 = 0;
                expr_106_out1 = 0;
                expr_107_in1 = 0;
                expr_107_in2 = 2;
                expr_107_out1 = 0;
                expr_108_in1 = 0;
                expr_108_in2 = 2;
                expr_108_out1 = 0;
                route_27_selector1 = 1;
                route_28_selector1 = 1;
                expr_109_in1 = 0;
                expr_109_in2 = 0.3;
                expr_109_out1 = 0;
                expr_110_in1 = 0;
                expr_110_in2 = 2;
                expr_110_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_97_in1;
                number expr_97_out1;
                number route_25_selector1;
                number expr_98_in1;
                number expr_98_in2;
                number expr_98_out1;
                number expr_99_in1;
                number expr_99_in2;
                number expr_99_out1;
                number expr_100_in1;
                number expr_100_in2;
                number expr_100_out1;
                number expr_101_in1;
                number expr_101_in2;
                number expr_101_out1;
                number expr_102_in1;
                number expr_102_out1;
                number route_26_selector1;
                number expr_103_in1;
                number expr_103_in2;
                number expr_103_out1;
                number expr_104_in1;
                number expr_104_in2;
                number expr_104_out1;
                number expr_105_in1;
                number expr_105_in2;
                number expr_105_out1;
                number expr_106_in1;
                number expr_106_out1;
                number expr_107_in1;
                number expr_107_in2;
                number expr_107_out1;
                number expr_108_in1;
                number expr_108_in2;
                number expr_108_out1;
                number route_27_selector1;
                number route_28_selector1;
                number expr_109_in1;
                number expr_109_in2;
                number expr_109_out1;
                number expr_110_in1;
                number expr_110_in2;
                number expr_110_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1041 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1041()
            {
            }
            
            ~RNBOSubpatcher_1041()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_27_out1_bang_bang() {
                this->expr_124_in1_bang();
                this->expr_121_in1_bang();
            }
            
            void eventinlet_27_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_124_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_124_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_121_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_121_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_32_nomatch_bang_bang() {}
            
            void eventoutlet_32_in1_bang_bang() {
                ;
                this->getPatcher()->p_17_out4_bang_bang();
            }
            
            void route_32_match1_bang_bang() {
                this->eventoutlet_32_in1_bang_bang();
            }
            
            void eventoutlet_32_in1_number_set(number v) {
                this->getPatcher()->p_17_out4_number_set(v);
            }
            
            void route_32_match1_number_set(number v) {
                this->eventoutlet_32_in1_number_set(v);
            }
            
            void eventoutlet_32_in1_list_set(const list& v) {
                this->getPatcher()->p_17_out4_list_set((list)v);
            }
            
            void route_32_match1_list_set(const list& v) {
                this->eventoutlet_32_in1_list_set(v);
            }
            
            void route_32_nomatch_number_set(number ) {}
            
            void route_32_nomatch_list_set(const list& ) {}
            
            void route_32_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_32_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_32_selector1) {
                        if (input->length == 0)
                            this->route_32_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_32_match1_number_set(input[0]);
                        else
                            this->route_32_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_32_nomatch_number_set(v[0]);
                        } else {
                            this->route_32_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_32_input_number_set(number v) {
                this->route_32_input_list_set({v});
            }
            
            void expr_123_out1_set(number v) {
                this->expr_123_out1 = v;
                this->route_32_input_number_set(this->expr_123_out1);
            }
            
            void expr_123_in1_set(number in1) {
                this->expr_123_in1 = in1;
                this->expr_123_out1_set(this->expr_123_in1 > this->expr_123_in2);//#map:p_obj-193/p_obj-45/>_obj-13:1
            }
            
            void expr_124_out1_set(number v) {
                this->expr_124_out1 = v;
                this->expr_123_in1_set(this->expr_124_out1);
            }
            
            void expr_124_in1_set(number in1) {
                this->expr_124_in1 = in1;
                this->expr_124_out1_set(this->safemod(this->expr_124_in1, this->expr_124_in2));//#map:p_obj-193/p_obj-45/%_obj-6:1
            }
            
            void route_31_nomatch_bang_bang() {}
            
            void eventoutlet_31_in1_bang_bang() {
                ;
                this->getPatcher()->p_17_out3_bang_bang();
            }
            
            void route_31_match1_bang_bang() {
                this->eventoutlet_31_in1_bang_bang();
            }
            
            void eventoutlet_31_in1_number_set(number v) {
                this->getPatcher()->p_17_out3_number_set(v);
            }
            
            void route_31_match1_number_set(number v) {
                this->eventoutlet_31_in1_number_set(v);
            }
            
            void eventoutlet_31_in1_list_set(const list& v) {
                this->getPatcher()->p_17_out3_list_set((list)v);
            }
            
            void route_31_match1_list_set(const list& v) {
                this->eventoutlet_31_in1_list_set(v);
            }
            
            void route_31_nomatch_number_set(number ) {}
            
            void route_31_nomatch_list_set(const list& ) {}
            
            void route_31_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_31_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_31_selector1) {
                        if (input->length == 0)
                            this->route_31_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_31_match1_number_set(input[0]);
                        else
                            this->route_31_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_31_nomatch_number_set(v[0]);
                        } else {
                            this->route_31_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_31_input_number_set(number v) {
                this->route_31_input_list_set({v});
            }
            
            void expr_119_out1_set(number v) {
                this->expr_119_out1 = v;
                this->route_31_input_number_set(this->expr_119_out1);
            }
            
            void expr_119_in1_set(number in1) {
                this->expr_119_in1 = in1;
                this->expr_119_out1_set(this->expr_119_in1 > this->expr_119_in2);//#map:p_obj-193/p_obj-45/>_obj-14:1
            }
            
            void expr_122_out1_set(number v) {
                this->expr_122_out1 = v;
                this->expr_119_in1_set(this->expr_122_out1);
            }
            
            void expr_122_in1_set(number in1) {
                this->expr_122_in1 = in1;
                this->expr_122_out1_set(this->safemod(this->expr_122_in1, this->expr_122_in2));//#map:p_obj-193/p_obj-45/%_obj-7:1
            }
            
            void route_30_nomatch_bang_bang() {}
            
            void eventoutlet_30_in1_bang_bang() {
                ;
                this->getPatcher()->p_17_out2_bang_bang();
            }
            
            void route_30_match1_bang_bang() {
                this->eventoutlet_30_in1_bang_bang();
            }
            
            void eventoutlet_30_in1_number_set(number v) {
                this->getPatcher()->p_17_out2_number_set(v);
            }
            
            void route_30_match1_number_set(number v) {
                this->eventoutlet_30_in1_number_set(v);
            }
            
            void eventoutlet_30_in1_list_set(const list& v) {
                this->getPatcher()->p_17_out2_list_set((list)v);
            }
            
            void route_30_match1_list_set(const list& v) {
                this->eventoutlet_30_in1_list_set(v);
            }
            
            void route_30_nomatch_number_set(number ) {}
            
            void route_30_nomatch_list_set(const list& ) {}
            
            void route_30_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_30_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_30_selector1) {
                        if (input->length == 0)
                            this->route_30_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_30_match1_number_set(input[0]);
                        else
                            this->route_30_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_30_nomatch_number_set(v[0]);
                        } else {
                            this->route_30_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_30_input_number_set(number v) {
                this->route_30_input_list_set({v});
            }
            
            void expr_115_out1_set(number v) {
                this->expr_115_out1 = v;
                this->route_30_input_number_set(this->expr_115_out1);
            }
            
            void expr_115_in1_set(number in1) {
                this->expr_115_in1 = in1;
                this->expr_115_out1_set(this->expr_115_in1 > this->expr_115_in2);//#map:p_obj-193/p_obj-45/>_obj-15:1
            }
            
            void expr_118_out1_set(number v) {
                this->expr_118_out1 = v;
                this->expr_115_in1_set(this->expr_118_out1);
            }
            
            void expr_118_in1_set(number in1) {
                this->expr_118_in1 = in1;
                this->expr_118_out1_set(this->safemod(this->expr_118_in1, this->expr_118_in2));//#map:p_obj-193/p_obj-45/%_obj-8:1
            }
            
            void route_29_nomatch_bang_bang() {}
            
            void eventoutlet_29_in1_bang_bang() {
                ;
                this->getPatcher()->p_17_out1_bang_bang();
            }
            
            void route_29_match1_bang_bang() {
                this->eventoutlet_29_in1_bang_bang();
            }
            
            void eventoutlet_29_in1_number_set(number v) {
                this->getPatcher()->p_17_out1_number_set(v);
            }
            
            void route_29_match1_number_set(number v) {
                this->eventoutlet_29_in1_number_set(v);
            }
            
            void eventoutlet_29_in1_list_set(const list& v) {
                this->getPatcher()->p_17_out1_list_set((list)v);
            }
            
            void route_29_match1_list_set(const list& v) {
                this->eventoutlet_29_in1_list_set(v);
            }
            
            void route_29_nomatch_number_set(number ) {}
            
            void route_29_nomatch_list_set(const list& ) {}
            
            void route_29_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_29_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_29_selector1) {
                        if (input->length == 0)
                            this->route_29_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_29_match1_number_set(input[0]);
                        else
                            this->route_29_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_29_nomatch_number_set(v[0]);
                        } else {
                            this->route_29_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_29_input_number_set(number v) {
                this->route_29_input_list_set({v});
            }
            
            void expr_112_out1_set(number v) {
                this->expr_112_out1 = v;
                this->route_29_input_number_set(this->expr_112_out1);
            }
            
            void expr_112_in1_set(number in1) {
                this->expr_112_in1 = in1;
                this->expr_112_out1_set(this->expr_112_in1 > this->expr_112_in2);//#map:p_obj-193/p_obj-45/>_obj-16:1
            }
            
            void expr_114_out1_set(number v) {
                this->expr_114_out1 = v;
                this->expr_112_in1_set(this->expr_114_out1);
            }
            
            void expr_114_in1_set(number in1) {
                this->expr_114_in1 = in1;
                this->expr_114_out1_set(this->safemod(this->expr_114_in1, this->expr_114_in2));//#map:p_obj-193/p_obj-45/%_obj-9:1
            }
            
            void expr_111_out1_set(number v) {
                this->expr_111_out1 = v;
                this->expr_114_in1_set(this->expr_111_out1);
            }
            
            void expr_111_in1_set(number in1) {
                this->expr_111_in1 = in1;
                this->expr_111_out1_set(rnbo_floor(this->expr_111_in1));//#map:p_obj-193/p_obj-45/floor_obj-26:1
            }
            
            void expr_113_out1_set(number v) {
                this->expr_113_out1 = v;
                this->expr_111_in1_set(this->expr_113_out1);
            }
            
            void expr_113_in1_set(number in1) {
                this->expr_113_in1 = in1;
            
                this->expr_113_out1_set(
                    (this->expr_113_in2 == 0 ? 0 : (this->expr_113_in2 == 0. ? 0. : this->expr_113_in1 / this->expr_113_in2))
                );//#map:p_obj-193/p_obj-45//_obj-12:1
            }
            
            void expr_116_out1_set(number v) {
                this->expr_116_out1 = v;
                this->expr_118_in1_set(this->expr_116_out1);
                this->expr_113_in1_set(this->expr_116_out1);
            }
            
            void expr_116_in1_set(number in1) {
                this->expr_116_in1 = in1;
                this->expr_116_out1_set(rnbo_floor(this->expr_116_in1));//#map:p_obj-193/p_obj-45/floor_obj-24:1
            }
            
            void expr_117_out1_set(number v) {
                this->expr_117_out1 = v;
                this->expr_116_in1_set(this->expr_117_out1);
            }
            
            void expr_117_in1_set(number in1) {
                this->expr_117_in1 = in1;
            
                this->expr_117_out1_set(
                    (this->expr_117_in2 == 0 ? 0 : (this->expr_117_in2 == 0. ? 0. : this->expr_117_in1 / this->expr_117_in2))
                );//#map:p_obj-193/p_obj-45//_obj-11:1
            }
            
            void expr_120_out1_set(number v) {
                this->expr_120_out1 = v;
                this->expr_122_in1_set(this->expr_120_out1);
                this->expr_117_in1_set(this->expr_120_out1);
            }
            
            void expr_120_in1_set(number in1) {
                this->expr_120_in1 = in1;
                this->expr_120_out1_set(rnbo_floor(this->expr_120_in1));//#map:p_obj-193/p_obj-45/floor_obj-21:1
            }
            
            void expr_121_out1_set(number v) {
                this->expr_121_out1 = v;
                this->expr_120_in1_set(this->expr_121_out1);
            }
            
            void expr_121_in1_set(number in1) {
                this->expr_121_in1 = in1;
            
                this->expr_121_out1_set(
                    (this->expr_121_in2 == 0 ? 0 : (this->expr_121_in2 == 0. ? 0. : this->expr_121_in1 / this->expr_121_in2))
                );//#map:p_obj-193/p_obj-45//_obj-10:1
            }
            
            void eventinlet_27_out1_number_set(number v) {
                this->expr_124_in1_set(v);
                this->expr_121_in1_set(v);
            }
            
            void expr_124_in1_bang() {
                this->expr_124_out1_set(this->safemod(this->expr_124_in1, this->expr_124_in2));//#map:p_obj-193/p_obj-45/%_obj-6:1
            }
            
            void expr_121_in1_bang() {
                this->expr_121_out1_set(
                    (this->expr_121_in2 == 0 ? 0 : (this->expr_121_in2 == 0. ? 0. : this->expr_121_in1 / this->expr_121_in2))
                );//#map:p_obj-193/p_obj-45//_obj-10:1
            }
            
            void expr_124_in2_set(number v) {
                this->expr_124_in2 = v;
            }
            
            void expr_121_in2_set(number v) {
                this->expr_121_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_111_in1 = 0;
                expr_111_out1 = 0;
                route_29_selector1 = 1;
                expr_112_in1 = 0;
                expr_112_in2 = 0.3;
                expr_112_out1 = 0;
                expr_113_in1 = 0;
                expr_113_in2 = 2;
                expr_113_out1 = 0;
                expr_114_in1 = 0;
                expr_114_in2 = 2;
                expr_114_out1 = 0;
                expr_115_in1 = 0;
                expr_115_in2 = 0.3;
                expr_115_out1 = 0;
                expr_116_in1 = 0;
                expr_116_out1 = 0;
                route_30_selector1 = 1;
                expr_117_in1 = 0;
                expr_117_in2 = 2;
                expr_117_out1 = 0;
                expr_118_in1 = 0;
                expr_118_in2 = 2;
                expr_118_out1 = 0;
                expr_119_in1 = 0;
                expr_119_in2 = 0.3;
                expr_119_out1 = 0;
                expr_120_in1 = 0;
                expr_120_out1 = 0;
                expr_121_in1 = 0;
                expr_121_in2 = 2;
                expr_121_out1 = 0;
                expr_122_in1 = 0;
                expr_122_in2 = 2;
                expr_122_out1 = 0;
                route_31_selector1 = 1;
                route_32_selector1 = 1;
                expr_123_in1 = 0;
                expr_123_in2 = 0.3;
                expr_123_out1 = 0;
                expr_124_in1 = 0;
                expr_124_in2 = 2;
                expr_124_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_111_in1;
                number expr_111_out1;
                number route_29_selector1;
                number expr_112_in1;
                number expr_112_in2;
                number expr_112_out1;
                number expr_113_in1;
                number expr_113_in2;
                number expr_113_out1;
                number expr_114_in1;
                number expr_114_in2;
                number expr_114_out1;
                number expr_115_in1;
                number expr_115_in2;
                number expr_115_out1;
                number expr_116_in1;
                number expr_116_out1;
                number route_30_selector1;
                number expr_117_in1;
                number expr_117_in2;
                number expr_117_out1;
                number expr_118_in1;
                number expr_118_in2;
                number expr_118_out1;
                number expr_119_in1;
                number expr_119_in2;
                number expr_119_out1;
                number expr_120_in1;
                number expr_120_out1;
                number expr_121_in1;
                number expr_121_in2;
                number expr_121_out1;
                number expr_122_in1;
                number expr_122_in2;
                number expr_122_out1;
                number route_31_selector1;
                number route_32_selector1;
                number expr_123_in1;
                number expr_123_in2;
                number expr_123_out1;
                number expr_124_in1;
                number expr_124_in2;
                number expr_124_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1042 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1042()
            {
            }
            
            ~RNBOSubpatcher_1042()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_28_out1_bang_bang() {
                this->expr_138_in1_bang();
                this->expr_135_in1_bang();
            }
            
            void eventinlet_28_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_138_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_138_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_135_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_135_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_36_nomatch_bang_bang() {}
            
            void eventoutlet_36_in1_bang_bang() {
                ;
                this->getPatcher()->p_18_out4_bang_bang();
            }
            
            void route_36_match1_bang_bang() {
                this->eventoutlet_36_in1_bang_bang();
            }
            
            void eventoutlet_36_in1_number_set(number v) {
                this->getPatcher()->p_18_out4_number_set(v);
            }
            
            void route_36_match1_number_set(number v) {
                this->eventoutlet_36_in1_number_set(v);
            }
            
            void eventoutlet_36_in1_list_set(const list& v) {
                this->getPatcher()->p_18_out4_list_set((list)v);
            }
            
            void route_36_match1_list_set(const list& v) {
                this->eventoutlet_36_in1_list_set(v);
            }
            
            void route_36_nomatch_number_set(number ) {}
            
            void route_36_nomatch_list_set(const list& ) {}
            
            void route_36_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_36_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_36_selector1) {
                        if (input->length == 0)
                            this->route_36_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_36_match1_number_set(input[0]);
                        else
                            this->route_36_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_36_nomatch_number_set(v[0]);
                        } else {
                            this->route_36_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_36_input_number_set(number v) {
                this->route_36_input_list_set({v});
            }
            
            void expr_137_out1_set(number v) {
                this->expr_137_out1 = v;
                this->route_36_input_number_set(this->expr_137_out1);
            }
            
            void expr_137_in1_set(number in1) {
                this->expr_137_in1 = in1;
                this->expr_137_out1_set(this->expr_137_in1 > this->expr_137_in2);//#map:p_obj-193/p_obj-40/>_obj-13:1
            }
            
            void expr_138_out1_set(number v) {
                this->expr_138_out1 = v;
                this->expr_137_in1_set(this->expr_138_out1);
            }
            
            void expr_138_in1_set(number in1) {
                this->expr_138_in1 = in1;
                this->expr_138_out1_set(this->safemod(this->expr_138_in1, this->expr_138_in2));//#map:p_obj-193/p_obj-40/%_obj-6:1
            }
            
            void route_35_nomatch_bang_bang() {}
            
            void eventoutlet_35_in1_bang_bang() {
                ;
                this->getPatcher()->p_18_out3_bang_bang();
            }
            
            void route_35_match1_bang_bang() {
                this->eventoutlet_35_in1_bang_bang();
            }
            
            void eventoutlet_35_in1_number_set(number v) {
                this->getPatcher()->p_18_out3_number_set(v);
            }
            
            void route_35_match1_number_set(number v) {
                this->eventoutlet_35_in1_number_set(v);
            }
            
            void eventoutlet_35_in1_list_set(const list& v) {
                this->getPatcher()->p_18_out3_list_set((list)v);
            }
            
            void route_35_match1_list_set(const list& v) {
                this->eventoutlet_35_in1_list_set(v);
            }
            
            void route_35_nomatch_number_set(number ) {}
            
            void route_35_nomatch_list_set(const list& ) {}
            
            void route_35_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_35_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_35_selector1) {
                        if (input->length == 0)
                            this->route_35_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_35_match1_number_set(input[0]);
                        else
                            this->route_35_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_35_nomatch_number_set(v[0]);
                        } else {
                            this->route_35_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_35_input_number_set(number v) {
                this->route_35_input_list_set({v});
            }
            
            void expr_133_out1_set(number v) {
                this->expr_133_out1 = v;
                this->route_35_input_number_set(this->expr_133_out1);
            }
            
            void expr_133_in1_set(number in1) {
                this->expr_133_in1 = in1;
                this->expr_133_out1_set(this->expr_133_in1 > this->expr_133_in2);//#map:p_obj-193/p_obj-40/>_obj-14:1
            }
            
            void expr_136_out1_set(number v) {
                this->expr_136_out1 = v;
                this->expr_133_in1_set(this->expr_136_out1);
            }
            
            void expr_136_in1_set(number in1) {
                this->expr_136_in1 = in1;
                this->expr_136_out1_set(this->safemod(this->expr_136_in1, this->expr_136_in2));//#map:p_obj-193/p_obj-40/%_obj-7:1
            }
            
            void route_34_nomatch_bang_bang() {}
            
            void eventoutlet_34_in1_bang_bang() {
                ;
                this->getPatcher()->p_18_out2_bang_bang();
            }
            
            void route_34_match1_bang_bang() {
                this->eventoutlet_34_in1_bang_bang();
            }
            
            void eventoutlet_34_in1_number_set(number v) {
                this->getPatcher()->p_18_out2_number_set(v);
            }
            
            void route_34_match1_number_set(number v) {
                this->eventoutlet_34_in1_number_set(v);
            }
            
            void eventoutlet_34_in1_list_set(const list& v) {
                this->getPatcher()->p_18_out2_list_set((list)v);
            }
            
            void route_34_match1_list_set(const list& v) {
                this->eventoutlet_34_in1_list_set(v);
            }
            
            void route_34_nomatch_number_set(number ) {}
            
            void route_34_nomatch_list_set(const list& ) {}
            
            void route_34_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_34_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_34_selector1) {
                        if (input->length == 0)
                            this->route_34_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_34_match1_number_set(input[0]);
                        else
                            this->route_34_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_34_nomatch_number_set(v[0]);
                        } else {
                            this->route_34_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_34_input_number_set(number v) {
                this->route_34_input_list_set({v});
            }
            
            void expr_129_out1_set(number v) {
                this->expr_129_out1 = v;
                this->route_34_input_number_set(this->expr_129_out1);
            }
            
            void expr_129_in1_set(number in1) {
                this->expr_129_in1 = in1;
                this->expr_129_out1_set(this->expr_129_in1 > this->expr_129_in2);//#map:p_obj-193/p_obj-40/>_obj-15:1
            }
            
            void expr_132_out1_set(number v) {
                this->expr_132_out1 = v;
                this->expr_129_in1_set(this->expr_132_out1);
            }
            
            void expr_132_in1_set(number in1) {
                this->expr_132_in1 = in1;
                this->expr_132_out1_set(this->safemod(this->expr_132_in1, this->expr_132_in2));//#map:p_obj-193/p_obj-40/%_obj-8:1
            }
            
            void route_33_nomatch_bang_bang() {}
            
            void eventoutlet_33_in1_bang_bang() {
                ;
                this->getPatcher()->p_18_out1_bang_bang();
            }
            
            void route_33_match1_bang_bang() {
                this->eventoutlet_33_in1_bang_bang();
            }
            
            void eventoutlet_33_in1_number_set(number v) {
                this->getPatcher()->p_18_out1_number_set(v);
            }
            
            void route_33_match1_number_set(number v) {
                this->eventoutlet_33_in1_number_set(v);
            }
            
            void eventoutlet_33_in1_list_set(const list& v) {
                this->getPatcher()->p_18_out1_list_set((list)v);
            }
            
            void route_33_match1_list_set(const list& v) {
                this->eventoutlet_33_in1_list_set(v);
            }
            
            void route_33_nomatch_number_set(number ) {}
            
            void route_33_nomatch_list_set(const list& ) {}
            
            void route_33_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_33_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_33_selector1) {
                        if (input->length == 0)
                            this->route_33_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_33_match1_number_set(input[0]);
                        else
                            this->route_33_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_33_nomatch_number_set(v[0]);
                        } else {
                            this->route_33_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_33_input_number_set(number v) {
                this->route_33_input_list_set({v});
            }
            
            void expr_126_out1_set(number v) {
                this->expr_126_out1 = v;
                this->route_33_input_number_set(this->expr_126_out1);
            }
            
            void expr_126_in1_set(number in1) {
                this->expr_126_in1 = in1;
                this->expr_126_out1_set(this->expr_126_in1 > this->expr_126_in2);//#map:p_obj-193/p_obj-40/>_obj-16:1
            }
            
            void expr_128_out1_set(number v) {
                this->expr_128_out1 = v;
                this->expr_126_in1_set(this->expr_128_out1);
            }
            
            void expr_128_in1_set(number in1) {
                this->expr_128_in1 = in1;
                this->expr_128_out1_set(this->safemod(this->expr_128_in1, this->expr_128_in2));//#map:p_obj-193/p_obj-40/%_obj-9:1
            }
            
            void expr_125_out1_set(number v) {
                this->expr_125_out1 = v;
                this->expr_128_in1_set(this->expr_125_out1);
            }
            
            void expr_125_in1_set(number in1) {
                this->expr_125_in1 = in1;
                this->expr_125_out1_set(rnbo_floor(this->expr_125_in1));//#map:p_obj-193/p_obj-40/floor_obj-26:1
            }
            
            void expr_127_out1_set(number v) {
                this->expr_127_out1 = v;
                this->expr_125_in1_set(this->expr_127_out1);
            }
            
            void expr_127_in1_set(number in1) {
                this->expr_127_in1 = in1;
            
                this->expr_127_out1_set(
                    (this->expr_127_in2 == 0 ? 0 : (this->expr_127_in2 == 0. ? 0. : this->expr_127_in1 / this->expr_127_in2))
                );//#map:p_obj-193/p_obj-40//_obj-12:1
            }
            
            void expr_130_out1_set(number v) {
                this->expr_130_out1 = v;
                this->expr_132_in1_set(this->expr_130_out1);
                this->expr_127_in1_set(this->expr_130_out1);
            }
            
            void expr_130_in1_set(number in1) {
                this->expr_130_in1 = in1;
                this->expr_130_out1_set(rnbo_floor(this->expr_130_in1));//#map:p_obj-193/p_obj-40/floor_obj-24:1
            }
            
            void expr_131_out1_set(number v) {
                this->expr_131_out1 = v;
                this->expr_130_in1_set(this->expr_131_out1);
            }
            
            void expr_131_in1_set(number in1) {
                this->expr_131_in1 = in1;
            
                this->expr_131_out1_set(
                    (this->expr_131_in2 == 0 ? 0 : (this->expr_131_in2 == 0. ? 0. : this->expr_131_in1 / this->expr_131_in2))
                );//#map:p_obj-193/p_obj-40//_obj-11:1
            }
            
            void expr_134_out1_set(number v) {
                this->expr_134_out1 = v;
                this->expr_136_in1_set(this->expr_134_out1);
                this->expr_131_in1_set(this->expr_134_out1);
            }
            
            void expr_134_in1_set(number in1) {
                this->expr_134_in1 = in1;
                this->expr_134_out1_set(rnbo_floor(this->expr_134_in1));//#map:p_obj-193/p_obj-40/floor_obj-21:1
            }
            
            void expr_135_out1_set(number v) {
                this->expr_135_out1 = v;
                this->expr_134_in1_set(this->expr_135_out1);
            }
            
            void expr_135_in1_set(number in1) {
                this->expr_135_in1 = in1;
            
                this->expr_135_out1_set(
                    (this->expr_135_in2 == 0 ? 0 : (this->expr_135_in2 == 0. ? 0. : this->expr_135_in1 / this->expr_135_in2))
                );//#map:p_obj-193/p_obj-40//_obj-10:1
            }
            
            void eventinlet_28_out1_number_set(number v) {
                this->expr_138_in1_set(v);
                this->expr_135_in1_set(v);
            }
            
            void expr_138_in1_bang() {
                this->expr_138_out1_set(this->safemod(this->expr_138_in1, this->expr_138_in2));//#map:p_obj-193/p_obj-40/%_obj-6:1
            }
            
            void expr_135_in1_bang() {
                this->expr_135_out1_set(
                    (this->expr_135_in2 == 0 ? 0 : (this->expr_135_in2 == 0. ? 0. : this->expr_135_in1 / this->expr_135_in2))
                );//#map:p_obj-193/p_obj-40//_obj-10:1
            }
            
            void expr_138_in2_set(number v) {
                this->expr_138_in2 = v;
            }
            
            void expr_135_in2_set(number v) {
                this->expr_135_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_125_in1 = 0;
                expr_125_out1 = 0;
                route_33_selector1 = 1;
                expr_126_in1 = 0;
                expr_126_in2 = 0.3;
                expr_126_out1 = 0;
                expr_127_in1 = 0;
                expr_127_in2 = 2;
                expr_127_out1 = 0;
                expr_128_in1 = 0;
                expr_128_in2 = 2;
                expr_128_out1 = 0;
                expr_129_in1 = 0;
                expr_129_in2 = 0.3;
                expr_129_out1 = 0;
                expr_130_in1 = 0;
                expr_130_out1 = 0;
                route_34_selector1 = 1;
                expr_131_in1 = 0;
                expr_131_in2 = 2;
                expr_131_out1 = 0;
                expr_132_in1 = 0;
                expr_132_in2 = 2;
                expr_132_out1 = 0;
                expr_133_in1 = 0;
                expr_133_in2 = 0.3;
                expr_133_out1 = 0;
                expr_134_in1 = 0;
                expr_134_out1 = 0;
                expr_135_in1 = 0;
                expr_135_in2 = 2;
                expr_135_out1 = 0;
                expr_136_in1 = 0;
                expr_136_in2 = 2;
                expr_136_out1 = 0;
                route_35_selector1 = 1;
                route_36_selector1 = 1;
                expr_137_in1 = 0;
                expr_137_in2 = 0.3;
                expr_137_out1 = 0;
                expr_138_in1 = 0;
                expr_138_in2 = 2;
                expr_138_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_125_in1;
                number expr_125_out1;
                number route_33_selector1;
                number expr_126_in1;
                number expr_126_in2;
                number expr_126_out1;
                number expr_127_in1;
                number expr_127_in2;
                number expr_127_out1;
                number expr_128_in1;
                number expr_128_in2;
                number expr_128_out1;
                number expr_129_in1;
                number expr_129_in2;
                number expr_129_out1;
                number expr_130_in1;
                number expr_130_out1;
                number route_34_selector1;
                number expr_131_in1;
                number expr_131_in2;
                number expr_131_out1;
                number expr_132_in1;
                number expr_132_in2;
                number expr_132_out1;
                number expr_133_in1;
                number expr_133_in2;
                number expr_133_out1;
                number expr_134_in1;
                number expr_134_out1;
                number expr_135_in1;
                number expr_135_in2;
                number expr_135_out1;
                number expr_136_in1;
                number expr_136_in2;
                number expr_136_out1;
                number route_35_selector1;
                number route_36_selector1;
                number expr_137_in1;
                number expr_137_in2;
                number expr_137_out1;
                number expr_138_in1;
                number expr_138_in2;
                number expr_138_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1043 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1043()
            {
            }
            
            ~RNBOSubpatcher_1043()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_29_out1_bang_bang() {
                this->expr_152_in1_bang();
                this->expr_149_in1_bang();
            }
            
            void eventinlet_29_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_152_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_152_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_149_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_149_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_40_nomatch_bang_bang() {}
            
            void eventoutlet_40_in1_bang_bang() {
                ;
                this->getPatcher()->p_19_out4_bang_bang();
            }
            
            void route_40_match1_bang_bang() {
                this->eventoutlet_40_in1_bang_bang();
            }
            
            void eventoutlet_40_in1_number_set(number v) {
                this->getPatcher()->p_19_out4_number_set(v);
            }
            
            void route_40_match1_number_set(number v) {
                this->eventoutlet_40_in1_number_set(v);
            }
            
            void eventoutlet_40_in1_list_set(const list& v) {
                this->getPatcher()->p_19_out4_list_set((list)v);
            }
            
            void route_40_match1_list_set(const list& v) {
                this->eventoutlet_40_in1_list_set(v);
            }
            
            void route_40_nomatch_number_set(number ) {}
            
            void route_40_nomatch_list_set(const list& ) {}
            
            void route_40_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_40_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_40_selector1) {
                        if (input->length == 0)
                            this->route_40_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_40_match1_number_set(input[0]);
                        else
                            this->route_40_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_40_nomatch_number_set(v[0]);
                        } else {
                            this->route_40_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_40_input_number_set(number v) {
                this->route_40_input_list_set({v});
            }
            
            void expr_151_out1_set(number v) {
                this->expr_151_out1 = v;
                this->route_40_input_number_set(this->expr_151_out1);
            }
            
            void expr_151_in1_set(number in1) {
                this->expr_151_in1 = in1;
                this->expr_151_out1_set(this->expr_151_in1 > this->expr_151_in2);//#map:p_obj-193/p_obj-101/>_obj-13:1
            }
            
            void expr_152_out1_set(number v) {
                this->expr_152_out1 = v;
                this->expr_151_in1_set(this->expr_152_out1);
            }
            
            void expr_152_in1_set(number in1) {
                this->expr_152_in1 = in1;
                this->expr_152_out1_set(this->safemod(this->expr_152_in1, this->expr_152_in2));//#map:p_obj-193/p_obj-101/%_obj-6:1
            }
            
            void route_39_nomatch_bang_bang() {}
            
            void eventoutlet_39_in1_bang_bang() {
                ;
                this->getPatcher()->p_19_out3_bang_bang();
            }
            
            void route_39_match1_bang_bang() {
                this->eventoutlet_39_in1_bang_bang();
            }
            
            void eventoutlet_39_in1_number_set(number v) {
                this->getPatcher()->p_19_out3_number_set(v);
            }
            
            void route_39_match1_number_set(number v) {
                this->eventoutlet_39_in1_number_set(v);
            }
            
            void eventoutlet_39_in1_list_set(const list& v) {
                this->getPatcher()->p_19_out3_list_set((list)v);
            }
            
            void route_39_match1_list_set(const list& v) {
                this->eventoutlet_39_in1_list_set(v);
            }
            
            void route_39_nomatch_number_set(number ) {}
            
            void route_39_nomatch_list_set(const list& ) {}
            
            void route_39_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_39_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_39_selector1) {
                        if (input->length == 0)
                            this->route_39_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_39_match1_number_set(input[0]);
                        else
                            this->route_39_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_39_nomatch_number_set(v[0]);
                        } else {
                            this->route_39_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_39_input_number_set(number v) {
                this->route_39_input_list_set({v});
            }
            
            void expr_147_out1_set(number v) {
                this->expr_147_out1 = v;
                this->route_39_input_number_set(this->expr_147_out1);
            }
            
            void expr_147_in1_set(number in1) {
                this->expr_147_in1 = in1;
                this->expr_147_out1_set(this->expr_147_in1 > this->expr_147_in2);//#map:p_obj-193/p_obj-101/>_obj-14:1
            }
            
            void expr_150_out1_set(number v) {
                this->expr_150_out1 = v;
                this->expr_147_in1_set(this->expr_150_out1);
            }
            
            void expr_150_in1_set(number in1) {
                this->expr_150_in1 = in1;
                this->expr_150_out1_set(this->safemod(this->expr_150_in1, this->expr_150_in2));//#map:p_obj-193/p_obj-101/%_obj-7:1
            }
            
            void route_38_nomatch_bang_bang() {}
            
            void eventoutlet_38_in1_bang_bang() {
                ;
                this->getPatcher()->p_19_out2_bang_bang();
            }
            
            void route_38_match1_bang_bang() {
                this->eventoutlet_38_in1_bang_bang();
            }
            
            void eventoutlet_38_in1_number_set(number v) {
                this->getPatcher()->p_19_out2_number_set(v);
            }
            
            void route_38_match1_number_set(number v) {
                this->eventoutlet_38_in1_number_set(v);
            }
            
            void eventoutlet_38_in1_list_set(const list& v) {
                this->getPatcher()->p_19_out2_list_set((list)v);
            }
            
            void route_38_match1_list_set(const list& v) {
                this->eventoutlet_38_in1_list_set(v);
            }
            
            void route_38_nomatch_number_set(number ) {}
            
            void route_38_nomatch_list_set(const list& ) {}
            
            void route_38_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_38_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_38_selector1) {
                        if (input->length == 0)
                            this->route_38_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_38_match1_number_set(input[0]);
                        else
                            this->route_38_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_38_nomatch_number_set(v[0]);
                        } else {
                            this->route_38_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_38_input_number_set(number v) {
                this->route_38_input_list_set({v});
            }
            
            void expr_143_out1_set(number v) {
                this->expr_143_out1 = v;
                this->route_38_input_number_set(this->expr_143_out1);
            }
            
            void expr_143_in1_set(number in1) {
                this->expr_143_in1 = in1;
                this->expr_143_out1_set(this->expr_143_in1 > this->expr_143_in2);//#map:p_obj-193/p_obj-101/>_obj-15:1
            }
            
            void expr_146_out1_set(number v) {
                this->expr_146_out1 = v;
                this->expr_143_in1_set(this->expr_146_out1);
            }
            
            void expr_146_in1_set(number in1) {
                this->expr_146_in1 = in1;
                this->expr_146_out1_set(this->safemod(this->expr_146_in1, this->expr_146_in2));//#map:p_obj-193/p_obj-101/%_obj-8:1
            }
            
            void route_37_nomatch_bang_bang() {}
            
            void eventoutlet_37_in1_bang_bang() {
                ;
                this->getPatcher()->p_19_out1_bang_bang();
            }
            
            void route_37_match1_bang_bang() {
                this->eventoutlet_37_in1_bang_bang();
            }
            
            void eventoutlet_37_in1_number_set(number v) {
                this->getPatcher()->p_19_out1_number_set(v);
            }
            
            void route_37_match1_number_set(number v) {
                this->eventoutlet_37_in1_number_set(v);
            }
            
            void eventoutlet_37_in1_list_set(const list& v) {
                this->getPatcher()->p_19_out1_list_set((list)v);
            }
            
            void route_37_match1_list_set(const list& v) {
                this->eventoutlet_37_in1_list_set(v);
            }
            
            void route_37_nomatch_number_set(number ) {}
            
            void route_37_nomatch_list_set(const list& ) {}
            
            void route_37_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_37_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_37_selector1) {
                        if (input->length == 0)
                            this->route_37_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_37_match1_number_set(input[0]);
                        else
                            this->route_37_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_37_nomatch_number_set(v[0]);
                        } else {
                            this->route_37_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_37_input_number_set(number v) {
                this->route_37_input_list_set({v});
            }
            
            void expr_140_out1_set(number v) {
                this->expr_140_out1 = v;
                this->route_37_input_number_set(this->expr_140_out1);
            }
            
            void expr_140_in1_set(number in1) {
                this->expr_140_in1 = in1;
                this->expr_140_out1_set(this->expr_140_in1 > this->expr_140_in2);//#map:p_obj-193/p_obj-101/>_obj-16:1
            }
            
            void expr_142_out1_set(number v) {
                this->expr_142_out1 = v;
                this->expr_140_in1_set(this->expr_142_out1);
            }
            
            void expr_142_in1_set(number in1) {
                this->expr_142_in1 = in1;
                this->expr_142_out1_set(this->safemod(this->expr_142_in1, this->expr_142_in2));//#map:p_obj-193/p_obj-101/%_obj-9:1
            }
            
            void expr_139_out1_set(number v) {
                this->expr_139_out1 = v;
                this->expr_142_in1_set(this->expr_139_out1);
            }
            
            void expr_139_in1_set(number in1) {
                this->expr_139_in1 = in1;
                this->expr_139_out1_set(rnbo_floor(this->expr_139_in1));//#map:p_obj-193/p_obj-101/floor_obj-26:1
            }
            
            void expr_141_out1_set(number v) {
                this->expr_141_out1 = v;
                this->expr_139_in1_set(this->expr_141_out1);
            }
            
            void expr_141_in1_set(number in1) {
                this->expr_141_in1 = in1;
            
                this->expr_141_out1_set(
                    (this->expr_141_in2 == 0 ? 0 : (this->expr_141_in2 == 0. ? 0. : this->expr_141_in1 / this->expr_141_in2))
                );//#map:p_obj-193/p_obj-101//_obj-12:1
            }
            
            void expr_144_out1_set(number v) {
                this->expr_144_out1 = v;
                this->expr_146_in1_set(this->expr_144_out1);
                this->expr_141_in1_set(this->expr_144_out1);
            }
            
            void expr_144_in1_set(number in1) {
                this->expr_144_in1 = in1;
                this->expr_144_out1_set(rnbo_floor(this->expr_144_in1));//#map:p_obj-193/p_obj-101/floor_obj-24:1
            }
            
            void expr_145_out1_set(number v) {
                this->expr_145_out1 = v;
                this->expr_144_in1_set(this->expr_145_out1);
            }
            
            void expr_145_in1_set(number in1) {
                this->expr_145_in1 = in1;
            
                this->expr_145_out1_set(
                    (this->expr_145_in2 == 0 ? 0 : (this->expr_145_in2 == 0. ? 0. : this->expr_145_in1 / this->expr_145_in2))
                );//#map:p_obj-193/p_obj-101//_obj-11:1
            }
            
            void expr_148_out1_set(number v) {
                this->expr_148_out1 = v;
                this->expr_150_in1_set(this->expr_148_out1);
                this->expr_145_in1_set(this->expr_148_out1);
            }
            
            void expr_148_in1_set(number in1) {
                this->expr_148_in1 = in1;
                this->expr_148_out1_set(rnbo_floor(this->expr_148_in1));//#map:p_obj-193/p_obj-101/floor_obj-21:1
            }
            
            void expr_149_out1_set(number v) {
                this->expr_149_out1 = v;
                this->expr_148_in1_set(this->expr_149_out1);
            }
            
            void expr_149_in1_set(number in1) {
                this->expr_149_in1 = in1;
            
                this->expr_149_out1_set(
                    (this->expr_149_in2 == 0 ? 0 : (this->expr_149_in2 == 0. ? 0. : this->expr_149_in1 / this->expr_149_in2))
                );//#map:p_obj-193/p_obj-101//_obj-10:1
            }
            
            void eventinlet_29_out1_number_set(number v) {
                this->expr_152_in1_set(v);
                this->expr_149_in1_set(v);
            }
            
            void expr_152_in1_bang() {
                this->expr_152_out1_set(this->safemod(this->expr_152_in1, this->expr_152_in2));//#map:p_obj-193/p_obj-101/%_obj-6:1
            }
            
            void expr_149_in1_bang() {
                this->expr_149_out1_set(
                    (this->expr_149_in2 == 0 ? 0 : (this->expr_149_in2 == 0. ? 0. : this->expr_149_in1 / this->expr_149_in2))
                );//#map:p_obj-193/p_obj-101//_obj-10:1
            }
            
            void expr_152_in2_set(number v) {
                this->expr_152_in2 = v;
            }
            
            void expr_149_in2_set(number v) {
                this->expr_149_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_139_in1 = 0;
                expr_139_out1 = 0;
                route_37_selector1 = 1;
                expr_140_in1 = 0;
                expr_140_in2 = 0.3;
                expr_140_out1 = 0;
                expr_141_in1 = 0;
                expr_141_in2 = 2;
                expr_141_out1 = 0;
                expr_142_in1 = 0;
                expr_142_in2 = 2;
                expr_142_out1 = 0;
                expr_143_in1 = 0;
                expr_143_in2 = 0.3;
                expr_143_out1 = 0;
                expr_144_in1 = 0;
                expr_144_out1 = 0;
                route_38_selector1 = 1;
                expr_145_in1 = 0;
                expr_145_in2 = 2;
                expr_145_out1 = 0;
                expr_146_in1 = 0;
                expr_146_in2 = 2;
                expr_146_out1 = 0;
                expr_147_in1 = 0;
                expr_147_in2 = 0.3;
                expr_147_out1 = 0;
                expr_148_in1 = 0;
                expr_148_out1 = 0;
                expr_149_in1 = 0;
                expr_149_in2 = 2;
                expr_149_out1 = 0;
                expr_150_in1 = 0;
                expr_150_in2 = 2;
                expr_150_out1 = 0;
                route_39_selector1 = 1;
                route_40_selector1 = 1;
                expr_151_in1 = 0;
                expr_151_in2 = 0.3;
                expr_151_out1 = 0;
                expr_152_in1 = 0;
                expr_152_in2 = 2;
                expr_152_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_139_in1;
                number expr_139_out1;
                number route_37_selector1;
                number expr_140_in1;
                number expr_140_in2;
                number expr_140_out1;
                number expr_141_in1;
                number expr_141_in2;
                number expr_141_out1;
                number expr_142_in1;
                number expr_142_in2;
                number expr_142_out1;
                number expr_143_in1;
                number expr_143_in2;
                number expr_143_out1;
                number expr_144_in1;
                number expr_144_out1;
                number route_38_selector1;
                number expr_145_in1;
                number expr_145_in2;
                number expr_145_out1;
                number expr_146_in1;
                number expr_146_in2;
                number expr_146_out1;
                number expr_147_in1;
                number expr_147_in2;
                number expr_147_out1;
                number expr_148_in1;
                number expr_148_out1;
                number expr_149_in1;
                number expr_149_in2;
                number expr_149_out1;
                number expr_150_in1;
                number expr_150_in2;
                number expr_150_out1;
                number route_39_selector1;
                number route_40_selector1;
                number expr_151_in1;
                number expr_151_in2;
                number expr_151_out1;
                number expr_152_in1;
                number expr_152_in2;
                number expr_152_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1044 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1044()
            {
            }
            
            ~RNBOSubpatcher_1044()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_30_out1_bang_bang() {
                this->expr_166_in1_bang();
                this->expr_163_in1_bang();
            }
            
            void eventinlet_30_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_166_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_166_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_163_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_163_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_44_nomatch_bang_bang() {}
            
            void eventoutlet_44_in1_bang_bang() {
                ;
                this->getPatcher()->p_20_out4_bang_bang();
            }
            
            void route_44_match1_bang_bang() {
                this->eventoutlet_44_in1_bang_bang();
            }
            
            void eventoutlet_44_in1_number_set(number v) {
                this->getPatcher()->p_20_out4_number_set(v);
            }
            
            void route_44_match1_number_set(number v) {
                this->eventoutlet_44_in1_number_set(v);
            }
            
            void eventoutlet_44_in1_list_set(const list& v) {
                this->getPatcher()->p_20_out4_list_set((list)v);
            }
            
            void route_44_match1_list_set(const list& v) {
                this->eventoutlet_44_in1_list_set(v);
            }
            
            void route_44_nomatch_number_set(number ) {}
            
            void route_44_nomatch_list_set(const list& ) {}
            
            void route_44_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_44_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_44_selector1) {
                        if (input->length == 0)
                            this->route_44_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_44_match1_number_set(input[0]);
                        else
                            this->route_44_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_44_nomatch_number_set(v[0]);
                        } else {
                            this->route_44_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_44_input_number_set(number v) {
                this->route_44_input_list_set({v});
            }
            
            void expr_165_out1_set(number v) {
                this->expr_165_out1 = v;
                this->route_44_input_number_set(this->expr_165_out1);
            }
            
            void expr_165_in1_set(number in1) {
                this->expr_165_in1 = in1;
                this->expr_165_out1_set(this->expr_165_in1 > this->expr_165_in2);//#map:p_obj-193/p_obj-96/>_obj-13:1
            }
            
            void expr_166_out1_set(number v) {
                this->expr_166_out1 = v;
                this->expr_165_in1_set(this->expr_166_out1);
            }
            
            void expr_166_in1_set(number in1) {
                this->expr_166_in1 = in1;
                this->expr_166_out1_set(this->safemod(this->expr_166_in1, this->expr_166_in2));//#map:p_obj-193/p_obj-96/%_obj-6:1
            }
            
            void route_43_nomatch_bang_bang() {}
            
            void eventoutlet_43_in1_bang_bang() {
                ;
                this->getPatcher()->p_20_out3_bang_bang();
            }
            
            void route_43_match1_bang_bang() {
                this->eventoutlet_43_in1_bang_bang();
            }
            
            void eventoutlet_43_in1_number_set(number v) {
                this->getPatcher()->p_20_out3_number_set(v);
            }
            
            void route_43_match1_number_set(number v) {
                this->eventoutlet_43_in1_number_set(v);
            }
            
            void eventoutlet_43_in1_list_set(const list& v) {
                this->getPatcher()->p_20_out3_list_set((list)v);
            }
            
            void route_43_match1_list_set(const list& v) {
                this->eventoutlet_43_in1_list_set(v);
            }
            
            void route_43_nomatch_number_set(number ) {}
            
            void route_43_nomatch_list_set(const list& ) {}
            
            void route_43_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_43_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_43_selector1) {
                        if (input->length == 0)
                            this->route_43_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_43_match1_number_set(input[0]);
                        else
                            this->route_43_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_43_nomatch_number_set(v[0]);
                        } else {
                            this->route_43_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_43_input_number_set(number v) {
                this->route_43_input_list_set({v});
            }
            
            void expr_161_out1_set(number v) {
                this->expr_161_out1 = v;
                this->route_43_input_number_set(this->expr_161_out1);
            }
            
            void expr_161_in1_set(number in1) {
                this->expr_161_in1 = in1;
                this->expr_161_out1_set(this->expr_161_in1 > this->expr_161_in2);//#map:p_obj-193/p_obj-96/>_obj-14:1
            }
            
            void expr_164_out1_set(number v) {
                this->expr_164_out1 = v;
                this->expr_161_in1_set(this->expr_164_out1);
            }
            
            void expr_164_in1_set(number in1) {
                this->expr_164_in1 = in1;
                this->expr_164_out1_set(this->safemod(this->expr_164_in1, this->expr_164_in2));//#map:p_obj-193/p_obj-96/%_obj-7:1
            }
            
            void route_42_nomatch_bang_bang() {}
            
            void eventoutlet_42_in1_bang_bang() {
                ;
                this->getPatcher()->p_20_out2_bang_bang();
            }
            
            void route_42_match1_bang_bang() {
                this->eventoutlet_42_in1_bang_bang();
            }
            
            void eventoutlet_42_in1_number_set(number v) {
                this->getPatcher()->p_20_out2_number_set(v);
            }
            
            void route_42_match1_number_set(number v) {
                this->eventoutlet_42_in1_number_set(v);
            }
            
            void eventoutlet_42_in1_list_set(const list& v) {
                this->getPatcher()->p_20_out2_list_set((list)v);
            }
            
            void route_42_match1_list_set(const list& v) {
                this->eventoutlet_42_in1_list_set(v);
            }
            
            void route_42_nomatch_number_set(number ) {}
            
            void route_42_nomatch_list_set(const list& ) {}
            
            void route_42_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_42_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_42_selector1) {
                        if (input->length == 0)
                            this->route_42_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_42_match1_number_set(input[0]);
                        else
                            this->route_42_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_42_nomatch_number_set(v[0]);
                        } else {
                            this->route_42_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_42_input_number_set(number v) {
                this->route_42_input_list_set({v});
            }
            
            void expr_157_out1_set(number v) {
                this->expr_157_out1 = v;
                this->route_42_input_number_set(this->expr_157_out1);
            }
            
            void expr_157_in1_set(number in1) {
                this->expr_157_in1 = in1;
                this->expr_157_out1_set(this->expr_157_in1 > this->expr_157_in2);//#map:p_obj-193/p_obj-96/>_obj-15:1
            }
            
            void expr_160_out1_set(number v) {
                this->expr_160_out1 = v;
                this->expr_157_in1_set(this->expr_160_out1);
            }
            
            void expr_160_in1_set(number in1) {
                this->expr_160_in1 = in1;
                this->expr_160_out1_set(this->safemod(this->expr_160_in1, this->expr_160_in2));//#map:p_obj-193/p_obj-96/%_obj-8:1
            }
            
            void route_41_nomatch_bang_bang() {}
            
            void eventoutlet_41_in1_bang_bang() {
                ;
                this->getPatcher()->p_20_out1_bang_bang();
            }
            
            void route_41_match1_bang_bang() {
                this->eventoutlet_41_in1_bang_bang();
            }
            
            void eventoutlet_41_in1_number_set(number v) {
                this->getPatcher()->p_20_out1_number_set(v);
            }
            
            void route_41_match1_number_set(number v) {
                this->eventoutlet_41_in1_number_set(v);
            }
            
            void eventoutlet_41_in1_list_set(const list& v) {
                this->getPatcher()->p_20_out1_list_set((list)v);
            }
            
            void route_41_match1_list_set(const list& v) {
                this->eventoutlet_41_in1_list_set(v);
            }
            
            void route_41_nomatch_number_set(number ) {}
            
            void route_41_nomatch_list_set(const list& ) {}
            
            void route_41_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_41_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_41_selector1) {
                        if (input->length == 0)
                            this->route_41_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_41_match1_number_set(input[0]);
                        else
                            this->route_41_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_41_nomatch_number_set(v[0]);
                        } else {
                            this->route_41_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_41_input_number_set(number v) {
                this->route_41_input_list_set({v});
            }
            
            void expr_154_out1_set(number v) {
                this->expr_154_out1 = v;
                this->route_41_input_number_set(this->expr_154_out1);
            }
            
            void expr_154_in1_set(number in1) {
                this->expr_154_in1 = in1;
                this->expr_154_out1_set(this->expr_154_in1 > this->expr_154_in2);//#map:p_obj-193/p_obj-96/>_obj-16:1
            }
            
            void expr_156_out1_set(number v) {
                this->expr_156_out1 = v;
                this->expr_154_in1_set(this->expr_156_out1);
            }
            
            void expr_156_in1_set(number in1) {
                this->expr_156_in1 = in1;
                this->expr_156_out1_set(this->safemod(this->expr_156_in1, this->expr_156_in2));//#map:p_obj-193/p_obj-96/%_obj-9:1
            }
            
            void expr_153_out1_set(number v) {
                this->expr_153_out1 = v;
                this->expr_156_in1_set(this->expr_153_out1);
            }
            
            void expr_153_in1_set(number in1) {
                this->expr_153_in1 = in1;
                this->expr_153_out1_set(rnbo_floor(this->expr_153_in1));//#map:p_obj-193/p_obj-96/floor_obj-26:1
            }
            
            void expr_155_out1_set(number v) {
                this->expr_155_out1 = v;
                this->expr_153_in1_set(this->expr_155_out1);
            }
            
            void expr_155_in1_set(number in1) {
                this->expr_155_in1 = in1;
            
                this->expr_155_out1_set(
                    (this->expr_155_in2 == 0 ? 0 : (this->expr_155_in2 == 0. ? 0. : this->expr_155_in1 / this->expr_155_in2))
                );//#map:p_obj-193/p_obj-96//_obj-12:1
            }
            
            void expr_158_out1_set(number v) {
                this->expr_158_out1 = v;
                this->expr_160_in1_set(this->expr_158_out1);
                this->expr_155_in1_set(this->expr_158_out1);
            }
            
            void expr_158_in1_set(number in1) {
                this->expr_158_in1 = in1;
                this->expr_158_out1_set(rnbo_floor(this->expr_158_in1));//#map:p_obj-193/p_obj-96/floor_obj-24:1
            }
            
            void expr_159_out1_set(number v) {
                this->expr_159_out1 = v;
                this->expr_158_in1_set(this->expr_159_out1);
            }
            
            void expr_159_in1_set(number in1) {
                this->expr_159_in1 = in1;
            
                this->expr_159_out1_set(
                    (this->expr_159_in2 == 0 ? 0 : (this->expr_159_in2 == 0. ? 0. : this->expr_159_in1 / this->expr_159_in2))
                );//#map:p_obj-193/p_obj-96//_obj-11:1
            }
            
            void expr_162_out1_set(number v) {
                this->expr_162_out1 = v;
                this->expr_164_in1_set(this->expr_162_out1);
                this->expr_159_in1_set(this->expr_162_out1);
            }
            
            void expr_162_in1_set(number in1) {
                this->expr_162_in1 = in1;
                this->expr_162_out1_set(rnbo_floor(this->expr_162_in1));//#map:p_obj-193/p_obj-96/floor_obj-21:1
            }
            
            void expr_163_out1_set(number v) {
                this->expr_163_out1 = v;
                this->expr_162_in1_set(this->expr_163_out1);
            }
            
            void expr_163_in1_set(number in1) {
                this->expr_163_in1 = in1;
            
                this->expr_163_out1_set(
                    (this->expr_163_in2 == 0 ? 0 : (this->expr_163_in2 == 0. ? 0. : this->expr_163_in1 / this->expr_163_in2))
                );//#map:p_obj-193/p_obj-96//_obj-10:1
            }
            
            void eventinlet_30_out1_number_set(number v) {
                this->expr_166_in1_set(v);
                this->expr_163_in1_set(v);
            }
            
            void expr_166_in1_bang() {
                this->expr_166_out1_set(this->safemod(this->expr_166_in1, this->expr_166_in2));//#map:p_obj-193/p_obj-96/%_obj-6:1
            }
            
            void expr_163_in1_bang() {
                this->expr_163_out1_set(
                    (this->expr_163_in2 == 0 ? 0 : (this->expr_163_in2 == 0. ? 0. : this->expr_163_in1 / this->expr_163_in2))
                );//#map:p_obj-193/p_obj-96//_obj-10:1
            }
            
            void expr_166_in2_set(number v) {
                this->expr_166_in2 = v;
            }
            
            void expr_163_in2_set(number v) {
                this->expr_163_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_153_in1 = 0;
                expr_153_out1 = 0;
                route_41_selector1 = 1;
                expr_154_in1 = 0;
                expr_154_in2 = 0.3;
                expr_154_out1 = 0;
                expr_155_in1 = 0;
                expr_155_in2 = 2;
                expr_155_out1 = 0;
                expr_156_in1 = 0;
                expr_156_in2 = 2;
                expr_156_out1 = 0;
                expr_157_in1 = 0;
                expr_157_in2 = 0.3;
                expr_157_out1 = 0;
                expr_158_in1 = 0;
                expr_158_out1 = 0;
                route_42_selector1 = 1;
                expr_159_in1 = 0;
                expr_159_in2 = 2;
                expr_159_out1 = 0;
                expr_160_in1 = 0;
                expr_160_in2 = 2;
                expr_160_out1 = 0;
                expr_161_in1 = 0;
                expr_161_in2 = 0.3;
                expr_161_out1 = 0;
                expr_162_in1 = 0;
                expr_162_out1 = 0;
                expr_163_in1 = 0;
                expr_163_in2 = 2;
                expr_163_out1 = 0;
                expr_164_in1 = 0;
                expr_164_in2 = 2;
                expr_164_out1 = 0;
                route_43_selector1 = 1;
                route_44_selector1 = 1;
                expr_165_in1 = 0;
                expr_165_in2 = 0.3;
                expr_165_out1 = 0;
                expr_166_in1 = 0;
                expr_166_in2 = 2;
                expr_166_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_153_in1;
                number expr_153_out1;
                number route_41_selector1;
                number expr_154_in1;
                number expr_154_in2;
                number expr_154_out1;
                number expr_155_in1;
                number expr_155_in2;
                number expr_155_out1;
                number expr_156_in1;
                number expr_156_in2;
                number expr_156_out1;
                number expr_157_in1;
                number expr_157_in2;
                number expr_157_out1;
                number expr_158_in1;
                number expr_158_out1;
                number route_42_selector1;
                number expr_159_in1;
                number expr_159_in2;
                number expr_159_out1;
                number expr_160_in1;
                number expr_160_in2;
                number expr_160_out1;
                number expr_161_in1;
                number expr_161_in2;
                number expr_161_out1;
                number expr_162_in1;
                number expr_162_out1;
                number expr_163_in1;
                number expr_163_in2;
                number expr_163_out1;
                number expr_164_in1;
                number expr_164_in2;
                number expr_164_out1;
                number route_43_selector1;
                number route_44_selector1;
                number expr_165_in1;
                number expr_165_in2;
                number expr_165_out1;
                number expr_166_in1;
                number expr_166_in2;
                number expr_166_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1045 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1045()
            {
            }
            
            ~RNBOSubpatcher_1045()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_31_out1_bang_bang() {
                this->expr_180_in1_bang();
                this->expr_177_in1_bang();
            }
            
            void eventinlet_31_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_180_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_180_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_177_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_177_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_48_nomatch_bang_bang() {}
            
            void eventoutlet_48_in1_bang_bang() {
                ;
                this->getPatcher()->p_21_out4_bang_bang();
            }
            
            void route_48_match1_bang_bang() {
                this->eventoutlet_48_in1_bang_bang();
            }
            
            void eventoutlet_48_in1_number_set(number v) {
                this->getPatcher()->p_21_out4_number_set(v);
            }
            
            void route_48_match1_number_set(number v) {
                this->eventoutlet_48_in1_number_set(v);
            }
            
            void eventoutlet_48_in1_list_set(const list& v) {
                this->getPatcher()->p_21_out4_list_set((list)v);
            }
            
            void route_48_match1_list_set(const list& v) {
                this->eventoutlet_48_in1_list_set(v);
            }
            
            void route_48_nomatch_number_set(number ) {}
            
            void route_48_nomatch_list_set(const list& ) {}
            
            void route_48_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_48_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_48_selector1) {
                        if (input->length == 0)
                            this->route_48_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_48_match1_number_set(input[0]);
                        else
                            this->route_48_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_48_nomatch_number_set(v[0]);
                        } else {
                            this->route_48_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_48_input_number_set(number v) {
                this->route_48_input_list_set({v});
            }
            
            void expr_179_out1_set(number v) {
                this->expr_179_out1 = v;
                this->route_48_input_number_set(this->expr_179_out1);
            }
            
            void expr_179_in1_set(number in1) {
                this->expr_179_in1 = in1;
                this->expr_179_out1_set(this->expr_179_in1 > this->expr_179_in2);//#map:p_obj-193/p_obj-91/>_obj-13:1
            }
            
            void expr_180_out1_set(number v) {
                this->expr_180_out1 = v;
                this->expr_179_in1_set(this->expr_180_out1);
            }
            
            void expr_180_in1_set(number in1) {
                this->expr_180_in1 = in1;
                this->expr_180_out1_set(this->safemod(this->expr_180_in1, this->expr_180_in2));//#map:p_obj-193/p_obj-91/%_obj-6:1
            }
            
            void route_47_nomatch_bang_bang() {}
            
            void eventoutlet_47_in1_bang_bang() {
                ;
                this->getPatcher()->p_21_out3_bang_bang();
            }
            
            void route_47_match1_bang_bang() {
                this->eventoutlet_47_in1_bang_bang();
            }
            
            void eventoutlet_47_in1_number_set(number v) {
                this->getPatcher()->p_21_out3_number_set(v);
            }
            
            void route_47_match1_number_set(number v) {
                this->eventoutlet_47_in1_number_set(v);
            }
            
            void eventoutlet_47_in1_list_set(const list& v) {
                this->getPatcher()->p_21_out3_list_set((list)v);
            }
            
            void route_47_match1_list_set(const list& v) {
                this->eventoutlet_47_in1_list_set(v);
            }
            
            void route_47_nomatch_number_set(number ) {}
            
            void route_47_nomatch_list_set(const list& ) {}
            
            void route_47_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_47_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_47_selector1) {
                        if (input->length == 0)
                            this->route_47_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_47_match1_number_set(input[0]);
                        else
                            this->route_47_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_47_nomatch_number_set(v[0]);
                        } else {
                            this->route_47_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_47_input_number_set(number v) {
                this->route_47_input_list_set({v});
            }
            
            void expr_175_out1_set(number v) {
                this->expr_175_out1 = v;
                this->route_47_input_number_set(this->expr_175_out1);
            }
            
            void expr_175_in1_set(number in1) {
                this->expr_175_in1 = in1;
                this->expr_175_out1_set(this->expr_175_in1 > this->expr_175_in2);//#map:p_obj-193/p_obj-91/>_obj-14:1
            }
            
            void expr_178_out1_set(number v) {
                this->expr_178_out1 = v;
                this->expr_175_in1_set(this->expr_178_out1);
            }
            
            void expr_178_in1_set(number in1) {
                this->expr_178_in1 = in1;
                this->expr_178_out1_set(this->safemod(this->expr_178_in1, this->expr_178_in2));//#map:p_obj-193/p_obj-91/%_obj-7:1
            }
            
            void route_46_nomatch_bang_bang() {}
            
            void eventoutlet_46_in1_bang_bang() {
                ;
                this->getPatcher()->p_21_out2_bang_bang();
            }
            
            void route_46_match1_bang_bang() {
                this->eventoutlet_46_in1_bang_bang();
            }
            
            void eventoutlet_46_in1_number_set(number v) {
                this->getPatcher()->p_21_out2_number_set(v);
            }
            
            void route_46_match1_number_set(number v) {
                this->eventoutlet_46_in1_number_set(v);
            }
            
            void eventoutlet_46_in1_list_set(const list& v) {
                this->getPatcher()->p_21_out2_list_set((list)v);
            }
            
            void route_46_match1_list_set(const list& v) {
                this->eventoutlet_46_in1_list_set(v);
            }
            
            void route_46_nomatch_number_set(number ) {}
            
            void route_46_nomatch_list_set(const list& ) {}
            
            void route_46_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_46_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_46_selector1) {
                        if (input->length == 0)
                            this->route_46_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_46_match1_number_set(input[0]);
                        else
                            this->route_46_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_46_nomatch_number_set(v[0]);
                        } else {
                            this->route_46_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_46_input_number_set(number v) {
                this->route_46_input_list_set({v});
            }
            
            void expr_171_out1_set(number v) {
                this->expr_171_out1 = v;
                this->route_46_input_number_set(this->expr_171_out1);
            }
            
            void expr_171_in1_set(number in1) {
                this->expr_171_in1 = in1;
                this->expr_171_out1_set(this->expr_171_in1 > this->expr_171_in2);//#map:p_obj-193/p_obj-91/>_obj-15:1
            }
            
            void expr_174_out1_set(number v) {
                this->expr_174_out1 = v;
                this->expr_171_in1_set(this->expr_174_out1);
            }
            
            void expr_174_in1_set(number in1) {
                this->expr_174_in1 = in1;
                this->expr_174_out1_set(this->safemod(this->expr_174_in1, this->expr_174_in2));//#map:p_obj-193/p_obj-91/%_obj-8:1
            }
            
            void route_45_nomatch_bang_bang() {}
            
            void eventoutlet_45_in1_bang_bang() {
                ;
                this->getPatcher()->p_21_out1_bang_bang();
            }
            
            void route_45_match1_bang_bang() {
                this->eventoutlet_45_in1_bang_bang();
            }
            
            void eventoutlet_45_in1_number_set(number v) {
                this->getPatcher()->p_21_out1_number_set(v);
            }
            
            void route_45_match1_number_set(number v) {
                this->eventoutlet_45_in1_number_set(v);
            }
            
            void eventoutlet_45_in1_list_set(const list& v) {
                this->getPatcher()->p_21_out1_list_set((list)v);
            }
            
            void route_45_match1_list_set(const list& v) {
                this->eventoutlet_45_in1_list_set(v);
            }
            
            void route_45_nomatch_number_set(number ) {}
            
            void route_45_nomatch_list_set(const list& ) {}
            
            void route_45_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_45_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_45_selector1) {
                        if (input->length == 0)
                            this->route_45_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_45_match1_number_set(input[0]);
                        else
                            this->route_45_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_45_nomatch_number_set(v[0]);
                        } else {
                            this->route_45_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_45_input_number_set(number v) {
                this->route_45_input_list_set({v});
            }
            
            void expr_168_out1_set(number v) {
                this->expr_168_out1 = v;
                this->route_45_input_number_set(this->expr_168_out1);
            }
            
            void expr_168_in1_set(number in1) {
                this->expr_168_in1 = in1;
                this->expr_168_out1_set(this->expr_168_in1 > this->expr_168_in2);//#map:p_obj-193/p_obj-91/>_obj-16:1
            }
            
            void expr_170_out1_set(number v) {
                this->expr_170_out1 = v;
                this->expr_168_in1_set(this->expr_170_out1);
            }
            
            void expr_170_in1_set(number in1) {
                this->expr_170_in1 = in1;
                this->expr_170_out1_set(this->safemod(this->expr_170_in1, this->expr_170_in2));//#map:p_obj-193/p_obj-91/%_obj-9:1
            }
            
            void expr_167_out1_set(number v) {
                this->expr_167_out1 = v;
                this->expr_170_in1_set(this->expr_167_out1);
            }
            
            void expr_167_in1_set(number in1) {
                this->expr_167_in1 = in1;
                this->expr_167_out1_set(rnbo_floor(this->expr_167_in1));//#map:p_obj-193/p_obj-91/floor_obj-26:1
            }
            
            void expr_169_out1_set(number v) {
                this->expr_169_out1 = v;
                this->expr_167_in1_set(this->expr_169_out1);
            }
            
            void expr_169_in1_set(number in1) {
                this->expr_169_in1 = in1;
            
                this->expr_169_out1_set(
                    (this->expr_169_in2 == 0 ? 0 : (this->expr_169_in2 == 0. ? 0. : this->expr_169_in1 / this->expr_169_in2))
                );//#map:p_obj-193/p_obj-91//_obj-12:1
            }
            
            void expr_172_out1_set(number v) {
                this->expr_172_out1 = v;
                this->expr_174_in1_set(this->expr_172_out1);
                this->expr_169_in1_set(this->expr_172_out1);
            }
            
            void expr_172_in1_set(number in1) {
                this->expr_172_in1 = in1;
                this->expr_172_out1_set(rnbo_floor(this->expr_172_in1));//#map:p_obj-193/p_obj-91/floor_obj-24:1
            }
            
            void expr_173_out1_set(number v) {
                this->expr_173_out1 = v;
                this->expr_172_in1_set(this->expr_173_out1);
            }
            
            void expr_173_in1_set(number in1) {
                this->expr_173_in1 = in1;
            
                this->expr_173_out1_set(
                    (this->expr_173_in2 == 0 ? 0 : (this->expr_173_in2 == 0. ? 0. : this->expr_173_in1 / this->expr_173_in2))
                );//#map:p_obj-193/p_obj-91//_obj-11:1
            }
            
            void expr_176_out1_set(number v) {
                this->expr_176_out1 = v;
                this->expr_178_in1_set(this->expr_176_out1);
                this->expr_173_in1_set(this->expr_176_out1);
            }
            
            void expr_176_in1_set(number in1) {
                this->expr_176_in1 = in1;
                this->expr_176_out1_set(rnbo_floor(this->expr_176_in1));//#map:p_obj-193/p_obj-91/floor_obj-21:1
            }
            
            void expr_177_out1_set(number v) {
                this->expr_177_out1 = v;
                this->expr_176_in1_set(this->expr_177_out1);
            }
            
            void expr_177_in1_set(number in1) {
                this->expr_177_in1 = in1;
            
                this->expr_177_out1_set(
                    (this->expr_177_in2 == 0 ? 0 : (this->expr_177_in2 == 0. ? 0. : this->expr_177_in1 / this->expr_177_in2))
                );//#map:p_obj-193/p_obj-91//_obj-10:1
            }
            
            void eventinlet_31_out1_number_set(number v) {
                this->expr_180_in1_set(v);
                this->expr_177_in1_set(v);
            }
            
            void expr_180_in1_bang() {
                this->expr_180_out1_set(this->safemod(this->expr_180_in1, this->expr_180_in2));//#map:p_obj-193/p_obj-91/%_obj-6:1
            }
            
            void expr_177_in1_bang() {
                this->expr_177_out1_set(
                    (this->expr_177_in2 == 0 ? 0 : (this->expr_177_in2 == 0. ? 0. : this->expr_177_in1 / this->expr_177_in2))
                );//#map:p_obj-193/p_obj-91//_obj-10:1
            }
            
            void expr_180_in2_set(number v) {
                this->expr_180_in2 = v;
            }
            
            void expr_177_in2_set(number v) {
                this->expr_177_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_167_in1 = 0;
                expr_167_out1 = 0;
                route_45_selector1 = 1;
                expr_168_in1 = 0;
                expr_168_in2 = 0.3;
                expr_168_out1 = 0;
                expr_169_in1 = 0;
                expr_169_in2 = 2;
                expr_169_out1 = 0;
                expr_170_in1 = 0;
                expr_170_in2 = 2;
                expr_170_out1 = 0;
                expr_171_in1 = 0;
                expr_171_in2 = 0.3;
                expr_171_out1 = 0;
                expr_172_in1 = 0;
                expr_172_out1 = 0;
                route_46_selector1 = 1;
                expr_173_in1 = 0;
                expr_173_in2 = 2;
                expr_173_out1 = 0;
                expr_174_in1 = 0;
                expr_174_in2 = 2;
                expr_174_out1 = 0;
                expr_175_in1 = 0;
                expr_175_in2 = 0.3;
                expr_175_out1 = 0;
                expr_176_in1 = 0;
                expr_176_out1 = 0;
                expr_177_in1 = 0;
                expr_177_in2 = 2;
                expr_177_out1 = 0;
                expr_178_in1 = 0;
                expr_178_in2 = 2;
                expr_178_out1 = 0;
                route_47_selector1 = 1;
                route_48_selector1 = 1;
                expr_179_in1 = 0;
                expr_179_in2 = 0.3;
                expr_179_out1 = 0;
                expr_180_in1 = 0;
                expr_180_in2 = 2;
                expr_180_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_167_in1;
                number expr_167_out1;
                number route_45_selector1;
                number expr_168_in1;
                number expr_168_in2;
                number expr_168_out1;
                number expr_169_in1;
                number expr_169_in2;
                number expr_169_out1;
                number expr_170_in1;
                number expr_170_in2;
                number expr_170_out1;
                number expr_171_in1;
                number expr_171_in2;
                number expr_171_out1;
                number expr_172_in1;
                number expr_172_out1;
                number route_46_selector1;
                number expr_173_in1;
                number expr_173_in2;
                number expr_173_out1;
                number expr_174_in1;
                number expr_174_in2;
                number expr_174_out1;
                number expr_175_in1;
                number expr_175_in2;
                number expr_175_out1;
                number expr_176_in1;
                number expr_176_out1;
                number expr_177_in1;
                number expr_177_in2;
                number expr_177_out1;
                number expr_178_in1;
                number expr_178_in2;
                number expr_178_out1;
                number route_47_selector1;
                number route_48_selector1;
                number expr_179_in1;
                number expr_179_in2;
                number expr_179_out1;
                number expr_180_in1;
                number expr_180_in2;
                number expr_180_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1046 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1046()
            {
            }
            
            ~RNBOSubpatcher_1046()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_32_out1_bang_bang() {
                this->expr_194_in1_bang();
                this->expr_191_in1_bang();
            }
            
            void eventinlet_32_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_194_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_194_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_191_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_191_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_52_nomatch_bang_bang() {}
            
            void eventoutlet_52_in1_bang_bang() {
                ;
                this->getPatcher()->p_22_out4_bang_bang();
            }
            
            void route_52_match1_bang_bang() {
                this->eventoutlet_52_in1_bang_bang();
            }
            
            void eventoutlet_52_in1_number_set(number v) {
                this->getPatcher()->p_22_out4_number_set(v);
            }
            
            void route_52_match1_number_set(number v) {
                this->eventoutlet_52_in1_number_set(v);
            }
            
            void eventoutlet_52_in1_list_set(const list& v) {
                this->getPatcher()->p_22_out4_list_set((list)v);
            }
            
            void route_52_match1_list_set(const list& v) {
                this->eventoutlet_52_in1_list_set(v);
            }
            
            void route_52_nomatch_number_set(number ) {}
            
            void route_52_nomatch_list_set(const list& ) {}
            
            void route_52_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_52_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_52_selector1) {
                        if (input->length == 0)
                            this->route_52_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_52_match1_number_set(input[0]);
                        else
                            this->route_52_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_52_nomatch_number_set(v[0]);
                        } else {
                            this->route_52_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_52_input_number_set(number v) {
                this->route_52_input_list_set({v});
            }
            
            void expr_193_out1_set(number v) {
                this->expr_193_out1 = v;
                this->route_52_input_number_set(this->expr_193_out1);
            }
            
            void expr_193_in1_set(number in1) {
                this->expr_193_in1 = in1;
                this->expr_193_out1_set(this->expr_193_in1 > this->expr_193_in2);//#map:p_obj-193/p_obj-86/>_obj-13:1
            }
            
            void expr_194_out1_set(number v) {
                this->expr_194_out1 = v;
                this->expr_193_in1_set(this->expr_194_out1);
            }
            
            void expr_194_in1_set(number in1) {
                this->expr_194_in1 = in1;
                this->expr_194_out1_set(this->safemod(this->expr_194_in1, this->expr_194_in2));//#map:p_obj-193/p_obj-86/%_obj-6:1
            }
            
            void route_51_nomatch_bang_bang() {}
            
            void eventoutlet_51_in1_bang_bang() {
                ;
                this->getPatcher()->p_22_out3_bang_bang();
            }
            
            void route_51_match1_bang_bang() {
                this->eventoutlet_51_in1_bang_bang();
            }
            
            void eventoutlet_51_in1_number_set(number v) {
                this->getPatcher()->p_22_out3_number_set(v);
            }
            
            void route_51_match1_number_set(number v) {
                this->eventoutlet_51_in1_number_set(v);
            }
            
            void eventoutlet_51_in1_list_set(const list& v) {
                this->getPatcher()->p_22_out3_list_set((list)v);
            }
            
            void route_51_match1_list_set(const list& v) {
                this->eventoutlet_51_in1_list_set(v);
            }
            
            void route_51_nomatch_number_set(number ) {}
            
            void route_51_nomatch_list_set(const list& ) {}
            
            void route_51_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_51_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_51_selector1) {
                        if (input->length == 0)
                            this->route_51_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_51_match1_number_set(input[0]);
                        else
                            this->route_51_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_51_nomatch_number_set(v[0]);
                        } else {
                            this->route_51_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_51_input_number_set(number v) {
                this->route_51_input_list_set({v});
            }
            
            void expr_189_out1_set(number v) {
                this->expr_189_out1 = v;
                this->route_51_input_number_set(this->expr_189_out1);
            }
            
            void expr_189_in1_set(number in1) {
                this->expr_189_in1 = in1;
                this->expr_189_out1_set(this->expr_189_in1 > this->expr_189_in2);//#map:p_obj-193/p_obj-86/>_obj-14:1
            }
            
            void expr_192_out1_set(number v) {
                this->expr_192_out1 = v;
                this->expr_189_in1_set(this->expr_192_out1);
            }
            
            void expr_192_in1_set(number in1) {
                this->expr_192_in1 = in1;
                this->expr_192_out1_set(this->safemod(this->expr_192_in1, this->expr_192_in2));//#map:p_obj-193/p_obj-86/%_obj-7:1
            }
            
            void route_50_nomatch_bang_bang() {}
            
            void eventoutlet_50_in1_bang_bang() {
                ;
                this->getPatcher()->p_22_out2_bang_bang();
            }
            
            void route_50_match1_bang_bang() {
                this->eventoutlet_50_in1_bang_bang();
            }
            
            void eventoutlet_50_in1_number_set(number v) {
                this->getPatcher()->p_22_out2_number_set(v);
            }
            
            void route_50_match1_number_set(number v) {
                this->eventoutlet_50_in1_number_set(v);
            }
            
            void eventoutlet_50_in1_list_set(const list& v) {
                this->getPatcher()->p_22_out2_list_set((list)v);
            }
            
            void route_50_match1_list_set(const list& v) {
                this->eventoutlet_50_in1_list_set(v);
            }
            
            void route_50_nomatch_number_set(number ) {}
            
            void route_50_nomatch_list_set(const list& ) {}
            
            void route_50_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_50_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_50_selector1) {
                        if (input->length == 0)
                            this->route_50_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_50_match1_number_set(input[0]);
                        else
                            this->route_50_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_50_nomatch_number_set(v[0]);
                        } else {
                            this->route_50_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_50_input_number_set(number v) {
                this->route_50_input_list_set({v});
            }
            
            void expr_185_out1_set(number v) {
                this->expr_185_out1 = v;
                this->route_50_input_number_set(this->expr_185_out1);
            }
            
            void expr_185_in1_set(number in1) {
                this->expr_185_in1 = in1;
                this->expr_185_out1_set(this->expr_185_in1 > this->expr_185_in2);//#map:p_obj-193/p_obj-86/>_obj-15:1
            }
            
            void expr_188_out1_set(number v) {
                this->expr_188_out1 = v;
                this->expr_185_in1_set(this->expr_188_out1);
            }
            
            void expr_188_in1_set(number in1) {
                this->expr_188_in1 = in1;
                this->expr_188_out1_set(this->safemod(this->expr_188_in1, this->expr_188_in2));//#map:p_obj-193/p_obj-86/%_obj-8:1
            }
            
            void route_49_nomatch_bang_bang() {}
            
            void eventoutlet_49_in1_bang_bang() {
                ;
                this->getPatcher()->p_22_out1_bang_bang();
            }
            
            void route_49_match1_bang_bang() {
                this->eventoutlet_49_in1_bang_bang();
            }
            
            void eventoutlet_49_in1_number_set(number v) {
                this->getPatcher()->p_22_out1_number_set(v);
            }
            
            void route_49_match1_number_set(number v) {
                this->eventoutlet_49_in1_number_set(v);
            }
            
            void eventoutlet_49_in1_list_set(const list& v) {
                this->getPatcher()->p_22_out1_list_set((list)v);
            }
            
            void route_49_match1_list_set(const list& v) {
                this->eventoutlet_49_in1_list_set(v);
            }
            
            void route_49_nomatch_number_set(number ) {}
            
            void route_49_nomatch_list_set(const list& ) {}
            
            void route_49_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_49_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_49_selector1) {
                        if (input->length == 0)
                            this->route_49_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_49_match1_number_set(input[0]);
                        else
                            this->route_49_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_49_nomatch_number_set(v[0]);
                        } else {
                            this->route_49_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_49_input_number_set(number v) {
                this->route_49_input_list_set({v});
            }
            
            void expr_182_out1_set(number v) {
                this->expr_182_out1 = v;
                this->route_49_input_number_set(this->expr_182_out1);
            }
            
            void expr_182_in1_set(number in1) {
                this->expr_182_in1 = in1;
                this->expr_182_out1_set(this->expr_182_in1 > this->expr_182_in2);//#map:p_obj-193/p_obj-86/>_obj-16:1
            }
            
            void expr_184_out1_set(number v) {
                this->expr_184_out1 = v;
                this->expr_182_in1_set(this->expr_184_out1);
            }
            
            void expr_184_in1_set(number in1) {
                this->expr_184_in1 = in1;
                this->expr_184_out1_set(this->safemod(this->expr_184_in1, this->expr_184_in2));//#map:p_obj-193/p_obj-86/%_obj-9:1
            }
            
            void expr_181_out1_set(number v) {
                this->expr_181_out1 = v;
                this->expr_184_in1_set(this->expr_181_out1);
            }
            
            void expr_181_in1_set(number in1) {
                this->expr_181_in1 = in1;
                this->expr_181_out1_set(rnbo_floor(this->expr_181_in1));//#map:p_obj-193/p_obj-86/floor_obj-26:1
            }
            
            void expr_183_out1_set(number v) {
                this->expr_183_out1 = v;
                this->expr_181_in1_set(this->expr_183_out1);
            }
            
            void expr_183_in1_set(number in1) {
                this->expr_183_in1 = in1;
            
                this->expr_183_out1_set(
                    (this->expr_183_in2 == 0 ? 0 : (this->expr_183_in2 == 0. ? 0. : this->expr_183_in1 / this->expr_183_in2))
                );//#map:p_obj-193/p_obj-86//_obj-12:1
            }
            
            void expr_186_out1_set(number v) {
                this->expr_186_out1 = v;
                this->expr_188_in1_set(this->expr_186_out1);
                this->expr_183_in1_set(this->expr_186_out1);
            }
            
            void expr_186_in1_set(number in1) {
                this->expr_186_in1 = in1;
                this->expr_186_out1_set(rnbo_floor(this->expr_186_in1));//#map:p_obj-193/p_obj-86/floor_obj-24:1
            }
            
            void expr_187_out1_set(number v) {
                this->expr_187_out1 = v;
                this->expr_186_in1_set(this->expr_187_out1);
            }
            
            void expr_187_in1_set(number in1) {
                this->expr_187_in1 = in1;
            
                this->expr_187_out1_set(
                    (this->expr_187_in2 == 0 ? 0 : (this->expr_187_in2 == 0. ? 0. : this->expr_187_in1 / this->expr_187_in2))
                );//#map:p_obj-193/p_obj-86//_obj-11:1
            }
            
            void expr_190_out1_set(number v) {
                this->expr_190_out1 = v;
                this->expr_192_in1_set(this->expr_190_out1);
                this->expr_187_in1_set(this->expr_190_out1);
            }
            
            void expr_190_in1_set(number in1) {
                this->expr_190_in1 = in1;
                this->expr_190_out1_set(rnbo_floor(this->expr_190_in1));//#map:p_obj-193/p_obj-86/floor_obj-21:1
            }
            
            void expr_191_out1_set(number v) {
                this->expr_191_out1 = v;
                this->expr_190_in1_set(this->expr_191_out1);
            }
            
            void expr_191_in1_set(number in1) {
                this->expr_191_in1 = in1;
            
                this->expr_191_out1_set(
                    (this->expr_191_in2 == 0 ? 0 : (this->expr_191_in2 == 0. ? 0. : this->expr_191_in1 / this->expr_191_in2))
                );//#map:p_obj-193/p_obj-86//_obj-10:1
            }
            
            void eventinlet_32_out1_number_set(number v) {
                this->expr_194_in1_set(v);
                this->expr_191_in1_set(v);
            }
            
            void expr_194_in1_bang() {
                this->expr_194_out1_set(this->safemod(this->expr_194_in1, this->expr_194_in2));//#map:p_obj-193/p_obj-86/%_obj-6:1
            }
            
            void expr_191_in1_bang() {
                this->expr_191_out1_set(
                    (this->expr_191_in2 == 0 ? 0 : (this->expr_191_in2 == 0. ? 0. : this->expr_191_in1 / this->expr_191_in2))
                );//#map:p_obj-193/p_obj-86//_obj-10:1
            }
            
            void expr_194_in2_set(number v) {
                this->expr_194_in2 = v;
            }
            
            void expr_191_in2_set(number v) {
                this->expr_191_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_181_in1 = 0;
                expr_181_out1 = 0;
                route_49_selector1 = 1;
                expr_182_in1 = 0;
                expr_182_in2 = 0.3;
                expr_182_out1 = 0;
                expr_183_in1 = 0;
                expr_183_in2 = 2;
                expr_183_out1 = 0;
                expr_184_in1 = 0;
                expr_184_in2 = 2;
                expr_184_out1 = 0;
                expr_185_in1 = 0;
                expr_185_in2 = 0.3;
                expr_185_out1 = 0;
                expr_186_in1 = 0;
                expr_186_out1 = 0;
                route_50_selector1 = 1;
                expr_187_in1 = 0;
                expr_187_in2 = 2;
                expr_187_out1 = 0;
                expr_188_in1 = 0;
                expr_188_in2 = 2;
                expr_188_out1 = 0;
                expr_189_in1 = 0;
                expr_189_in2 = 0.3;
                expr_189_out1 = 0;
                expr_190_in1 = 0;
                expr_190_out1 = 0;
                expr_191_in1 = 0;
                expr_191_in2 = 2;
                expr_191_out1 = 0;
                expr_192_in1 = 0;
                expr_192_in2 = 2;
                expr_192_out1 = 0;
                route_51_selector1 = 1;
                route_52_selector1 = 1;
                expr_193_in1 = 0;
                expr_193_in2 = 0.3;
                expr_193_out1 = 0;
                expr_194_in1 = 0;
                expr_194_in2 = 2;
                expr_194_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_181_in1;
                number expr_181_out1;
                number route_49_selector1;
                number expr_182_in1;
                number expr_182_in2;
                number expr_182_out1;
                number expr_183_in1;
                number expr_183_in2;
                number expr_183_out1;
                number expr_184_in1;
                number expr_184_in2;
                number expr_184_out1;
                number expr_185_in1;
                number expr_185_in2;
                number expr_185_out1;
                number expr_186_in1;
                number expr_186_out1;
                number route_50_selector1;
                number expr_187_in1;
                number expr_187_in2;
                number expr_187_out1;
                number expr_188_in1;
                number expr_188_in2;
                number expr_188_out1;
                number expr_189_in1;
                number expr_189_in2;
                number expr_189_out1;
                number expr_190_in1;
                number expr_190_out1;
                number expr_191_in1;
                number expr_191_in2;
                number expr_191_out1;
                number expr_192_in1;
                number expr_192_in2;
                number expr_192_out1;
                number route_51_selector1;
                number route_52_selector1;
                number expr_193_in1;
                number expr_193_in2;
                number expr_193_out1;
                number expr_194_in1;
                number expr_194_in2;
                number expr_194_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1047 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1047()
            {
            }
            
            ~RNBOSubpatcher_1047()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_33_out1_bang_bang() {
                this->expr_208_in1_bang();
                this->expr_205_in1_bang();
            }
            
            void eventinlet_33_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_208_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_208_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_205_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_205_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_56_nomatch_bang_bang() {}
            
            void eventoutlet_56_in1_bang_bang() {
                ;
                this->getPatcher()->p_23_out4_bang_bang();
            }
            
            void route_56_match1_bang_bang() {
                this->eventoutlet_56_in1_bang_bang();
            }
            
            void eventoutlet_56_in1_number_set(number v) {
                this->getPatcher()->p_23_out4_number_set(v);
            }
            
            void route_56_match1_number_set(number v) {
                this->eventoutlet_56_in1_number_set(v);
            }
            
            void eventoutlet_56_in1_list_set(const list& v) {
                this->getPatcher()->p_23_out4_list_set((list)v);
            }
            
            void route_56_match1_list_set(const list& v) {
                this->eventoutlet_56_in1_list_set(v);
            }
            
            void route_56_nomatch_number_set(number ) {}
            
            void route_56_nomatch_list_set(const list& ) {}
            
            void route_56_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_56_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_56_selector1) {
                        if (input->length == 0)
                            this->route_56_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_56_match1_number_set(input[0]);
                        else
                            this->route_56_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_56_nomatch_number_set(v[0]);
                        } else {
                            this->route_56_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_56_input_number_set(number v) {
                this->route_56_input_list_set({v});
            }
            
            void expr_207_out1_set(number v) {
                this->expr_207_out1 = v;
                this->route_56_input_number_set(this->expr_207_out1);
            }
            
            void expr_207_in1_set(number in1) {
                this->expr_207_in1 = in1;
                this->expr_207_out1_set(this->expr_207_in1 > this->expr_207_in2);//#map:p_obj-193/p_obj-76/>_obj-13:1
            }
            
            void expr_208_out1_set(number v) {
                this->expr_208_out1 = v;
                this->expr_207_in1_set(this->expr_208_out1);
            }
            
            void expr_208_in1_set(number in1) {
                this->expr_208_in1 = in1;
                this->expr_208_out1_set(this->safemod(this->expr_208_in1, this->expr_208_in2));//#map:p_obj-193/p_obj-76/%_obj-6:1
            }
            
            void route_55_nomatch_bang_bang() {}
            
            void eventoutlet_55_in1_bang_bang() {
                ;
                this->getPatcher()->p_23_out3_bang_bang();
            }
            
            void route_55_match1_bang_bang() {
                this->eventoutlet_55_in1_bang_bang();
            }
            
            void eventoutlet_55_in1_number_set(number v) {
                this->getPatcher()->p_23_out3_number_set(v);
            }
            
            void route_55_match1_number_set(number v) {
                this->eventoutlet_55_in1_number_set(v);
            }
            
            void eventoutlet_55_in1_list_set(const list& v) {
                this->getPatcher()->p_23_out3_list_set((list)v);
            }
            
            void route_55_match1_list_set(const list& v) {
                this->eventoutlet_55_in1_list_set(v);
            }
            
            void route_55_nomatch_number_set(number ) {}
            
            void route_55_nomatch_list_set(const list& ) {}
            
            void route_55_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_55_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_55_selector1) {
                        if (input->length == 0)
                            this->route_55_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_55_match1_number_set(input[0]);
                        else
                            this->route_55_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_55_nomatch_number_set(v[0]);
                        } else {
                            this->route_55_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_55_input_number_set(number v) {
                this->route_55_input_list_set({v});
            }
            
            void expr_203_out1_set(number v) {
                this->expr_203_out1 = v;
                this->route_55_input_number_set(this->expr_203_out1);
            }
            
            void expr_203_in1_set(number in1) {
                this->expr_203_in1 = in1;
                this->expr_203_out1_set(this->expr_203_in1 > this->expr_203_in2);//#map:p_obj-193/p_obj-76/>_obj-14:1
            }
            
            void expr_206_out1_set(number v) {
                this->expr_206_out1 = v;
                this->expr_203_in1_set(this->expr_206_out1);
            }
            
            void expr_206_in1_set(number in1) {
                this->expr_206_in1 = in1;
                this->expr_206_out1_set(this->safemod(this->expr_206_in1, this->expr_206_in2));//#map:p_obj-193/p_obj-76/%_obj-7:1
            }
            
            void route_54_nomatch_bang_bang() {}
            
            void eventoutlet_54_in1_bang_bang() {
                ;
                this->getPatcher()->p_23_out2_bang_bang();
            }
            
            void route_54_match1_bang_bang() {
                this->eventoutlet_54_in1_bang_bang();
            }
            
            void eventoutlet_54_in1_number_set(number v) {
                this->getPatcher()->p_23_out2_number_set(v);
            }
            
            void route_54_match1_number_set(number v) {
                this->eventoutlet_54_in1_number_set(v);
            }
            
            void eventoutlet_54_in1_list_set(const list& v) {
                this->getPatcher()->p_23_out2_list_set((list)v);
            }
            
            void route_54_match1_list_set(const list& v) {
                this->eventoutlet_54_in1_list_set(v);
            }
            
            void route_54_nomatch_number_set(number ) {}
            
            void route_54_nomatch_list_set(const list& ) {}
            
            void route_54_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_54_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_54_selector1) {
                        if (input->length == 0)
                            this->route_54_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_54_match1_number_set(input[0]);
                        else
                            this->route_54_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_54_nomatch_number_set(v[0]);
                        } else {
                            this->route_54_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_54_input_number_set(number v) {
                this->route_54_input_list_set({v});
            }
            
            void expr_199_out1_set(number v) {
                this->expr_199_out1 = v;
                this->route_54_input_number_set(this->expr_199_out1);
            }
            
            void expr_199_in1_set(number in1) {
                this->expr_199_in1 = in1;
                this->expr_199_out1_set(this->expr_199_in1 > this->expr_199_in2);//#map:p_obj-193/p_obj-76/>_obj-15:1
            }
            
            void expr_202_out1_set(number v) {
                this->expr_202_out1 = v;
                this->expr_199_in1_set(this->expr_202_out1);
            }
            
            void expr_202_in1_set(number in1) {
                this->expr_202_in1 = in1;
                this->expr_202_out1_set(this->safemod(this->expr_202_in1, this->expr_202_in2));//#map:p_obj-193/p_obj-76/%_obj-8:1
            }
            
            void route_53_nomatch_bang_bang() {}
            
            void eventoutlet_53_in1_bang_bang() {
                ;
                this->getPatcher()->p_23_out1_bang_bang();
            }
            
            void route_53_match1_bang_bang() {
                this->eventoutlet_53_in1_bang_bang();
            }
            
            void eventoutlet_53_in1_number_set(number v) {
                this->getPatcher()->p_23_out1_number_set(v);
            }
            
            void route_53_match1_number_set(number v) {
                this->eventoutlet_53_in1_number_set(v);
            }
            
            void eventoutlet_53_in1_list_set(const list& v) {
                this->getPatcher()->p_23_out1_list_set((list)v);
            }
            
            void route_53_match1_list_set(const list& v) {
                this->eventoutlet_53_in1_list_set(v);
            }
            
            void route_53_nomatch_number_set(number ) {}
            
            void route_53_nomatch_list_set(const list& ) {}
            
            void route_53_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_53_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_53_selector1) {
                        if (input->length == 0)
                            this->route_53_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_53_match1_number_set(input[0]);
                        else
                            this->route_53_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_53_nomatch_number_set(v[0]);
                        } else {
                            this->route_53_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_53_input_number_set(number v) {
                this->route_53_input_list_set({v});
            }
            
            void expr_196_out1_set(number v) {
                this->expr_196_out1 = v;
                this->route_53_input_number_set(this->expr_196_out1);
            }
            
            void expr_196_in1_set(number in1) {
                this->expr_196_in1 = in1;
                this->expr_196_out1_set(this->expr_196_in1 > this->expr_196_in2);//#map:p_obj-193/p_obj-76/>_obj-16:1
            }
            
            void expr_198_out1_set(number v) {
                this->expr_198_out1 = v;
                this->expr_196_in1_set(this->expr_198_out1);
            }
            
            void expr_198_in1_set(number in1) {
                this->expr_198_in1 = in1;
                this->expr_198_out1_set(this->safemod(this->expr_198_in1, this->expr_198_in2));//#map:p_obj-193/p_obj-76/%_obj-9:1
            }
            
            void expr_195_out1_set(number v) {
                this->expr_195_out1 = v;
                this->expr_198_in1_set(this->expr_195_out1);
            }
            
            void expr_195_in1_set(number in1) {
                this->expr_195_in1 = in1;
                this->expr_195_out1_set(rnbo_floor(this->expr_195_in1));//#map:p_obj-193/p_obj-76/floor_obj-26:1
            }
            
            void expr_197_out1_set(number v) {
                this->expr_197_out1 = v;
                this->expr_195_in1_set(this->expr_197_out1);
            }
            
            void expr_197_in1_set(number in1) {
                this->expr_197_in1 = in1;
            
                this->expr_197_out1_set(
                    (this->expr_197_in2 == 0 ? 0 : (this->expr_197_in2 == 0. ? 0. : this->expr_197_in1 / this->expr_197_in2))
                );//#map:p_obj-193/p_obj-76//_obj-12:1
            }
            
            void expr_200_out1_set(number v) {
                this->expr_200_out1 = v;
                this->expr_202_in1_set(this->expr_200_out1);
                this->expr_197_in1_set(this->expr_200_out1);
            }
            
            void expr_200_in1_set(number in1) {
                this->expr_200_in1 = in1;
                this->expr_200_out1_set(rnbo_floor(this->expr_200_in1));//#map:p_obj-193/p_obj-76/floor_obj-24:1
            }
            
            void expr_201_out1_set(number v) {
                this->expr_201_out1 = v;
                this->expr_200_in1_set(this->expr_201_out1);
            }
            
            void expr_201_in1_set(number in1) {
                this->expr_201_in1 = in1;
            
                this->expr_201_out1_set(
                    (this->expr_201_in2 == 0 ? 0 : (this->expr_201_in2 == 0. ? 0. : this->expr_201_in1 / this->expr_201_in2))
                );//#map:p_obj-193/p_obj-76//_obj-11:1
            }
            
            void expr_204_out1_set(number v) {
                this->expr_204_out1 = v;
                this->expr_206_in1_set(this->expr_204_out1);
                this->expr_201_in1_set(this->expr_204_out1);
            }
            
            void expr_204_in1_set(number in1) {
                this->expr_204_in1 = in1;
                this->expr_204_out1_set(rnbo_floor(this->expr_204_in1));//#map:p_obj-193/p_obj-76/floor_obj-21:1
            }
            
            void expr_205_out1_set(number v) {
                this->expr_205_out1 = v;
                this->expr_204_in1_set(this->expr_205_out1);
            }
            
            void expr_205_in1_set(number in1) {
                this->expr_205_in1 = in1;
            
                this->expr_205_out1_set(
                    (this->expr_205_in2 == 0 ? 0 : (this->expr_205_in2 == 0. ? 0. : this->expr_205_in1 / this->expr_205_in2))
                );//#map:p_obj-193/p_obj-76//_obj-10:1
            }
            
            void eventinlet_33_out1_number_set(number v) {
                this->expr_208_in1_set(v);
                this->expr_205_in1_set(v);
            }
            
            void expr_208_in1_bang() {
                this->expr_208_out1_set(this->safemod(this->expr_208_in1, this->expr_208_in2));//#map:p_obj-193/p_obj-76/%_obj-6:1
            }
            
            void expr_205_in1_bang() {
                this->expr_205_out1_set(
                    (this->expr_205_in2 == 0 ? 0 : (this->expr_205_in2 == 0. ? 0. : this->expr_205_in1 / this->expr_205_in2))
                );//#map:p_obj-193/p_obj-76//_obj-10:1
            }
            
            void expr_208_in2_set(number v) {
                this->expr_208_in2 = v;
            }
            
            void expr_205_in2_set(number v) {
                this->expr_205_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_195_in1 = 0;
                expr_195_out1 = 0;
                route_53_selector1 = 1;
                expr_196_in1 = 0;
                expr_196_in2 = 0.3;
                expr_196_out1 = 0;
                expr_197_in1 = 0;
                expr_197_in2 = 2;
                expr_197_out1 = 0;
                expr_198_in1 = 0;
                expr_198_in2 = 2;
                expr_198_out1 = 0;
                expr_199_in1 = 0;
                expr_199_in2 = 0.3;
                expr_199_out1 = 0;
                expr_200_in1 = 0;
                expr_200_out1 = 0;
                route_54_selector1 = 1;
                expr_201_in1 = 0;
                expr_201_in2 = 2;
                expr_201_out1 = 0;
                expr_202_in1 = 0;
                expr_202_in2 = 2;
                expr_202_out1 = 0;
                expr_203_in1 = 0;
                expr_203_in2 = 0.3;
                expr_203_out1 = 0;
                expr_204_in1 = 0;
                expr_204_out1 = 0;
                expr_205_in1 = 0;
                expr_205_in2 = 2;
                expr_205_out1 = 0;
                expr_206_in1 = 0;
                expr_206_in2 = 2;
                expr_206_out1 = 0;
                route_55_selector1 = 1;
                route_56_selector1 = 1;
                expr_207_in1 = 0;
                expr_207_in2 = 0.3;
                expr_207_out1 = 0;
                expr_208_in1 = 0;
                expr_208_in2 = 2;
                expr_208_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_195_in1;
                number expr_195_out1;
                number route_53_selector1;
                number expr_196_in1;
                number expr_196_in2;
                number expr_196_out1;
                number expr_197_in1;
                number expr_197_in2;
                number expr_197_out1;
                number expr_198_in1;
                number expr_198_in2;
                number expr_198_out1;
                number expr_199_in1;
                number expr_199_in2;
                number expr_199_out1;
                number expr_200_in1;
                number expr_200_out1;
                number route_54_selector1;
                number expr_201_in1;
                number expr_201_in2;
                number expr_201_out1;
                number expr_202_in1;
                number expr_202_in2;
                number expr_202_out1;
                number expr_203_in1;
                number expr_203_in2;
                number expr_203_out1;
                number expr_204_in1;
                number expr_204_out1;
                number expr_205_in1;
                number expr_205_in2;
                number expr_205_out1;
                number expr_206_in1;
                number expr_206_in2;
                number expr_206_out1;
                number route_55_selector1;
                number route_56_selector1;
                number expr_207_in1;
                number expr_207_in2;
                number expr_207_out1;
                number expr_208_in1;
                number expr_208_in2;
                number expr_208_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1048 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1048()
            {
            }
            
            ~RNBOSubpatcher_1048()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_34_out1_bang_bang() {
                this->expr_222_in1_bang();
                this->expr_219_in1_bang();
            }
            
            void eventinlet_34_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_222_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_222_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_219_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_219_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_60_nomatch_bang_bang() {}
            
            void eventoutlet_60_in1_bang_bang() {
                ;
                this->getPatcher()->p_24_out4_bang_bang();
            }
            
            void route_60_match1_bang_bang() {
                this->eventoutlet_60_in1_bang_bang();
            }
            
            void eventoutlet_60_in1_number_set(number v) {
                this->getPatcher()->p_24_out4_number_set(v);
            }
            
            void route_60_match1_number_set(number v) {
                this->eventoutlet_60_in1_number_set(v);
            }
            
            void eventoutlet_60_in1_list_set(const list& v) {
                this->getPatcher()->p_24_out4_list_set((list)v);
            }
            
            void route_60_match1_list_set(const list& v) {
                this->eventoutlet_60_in1_list_set(v);
            }
            
            void route_60_nomatch_number_set(number ) {}
            
            void route_60_nomatch_list_set(const list& ) {}
            
            void route_60_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_60_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_60_selector1) {
                        if (input->length == 0)
                            this->route_60_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_60_match1_number_set(input[0]);
                        else
                            this->route_60_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_60_nomatch_number_set(v[0]);
                        } else {
                            this->route_60_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_60_input_number_set(number v) {
                this->route_60_input_list_set({v});
            }
            
            void expr_221_out1_set(number v) {
                this->expr_221_out1 = v;
                this->route_60_input_number_set(this->expr_221_out1);
            }
            
            void expr_221_in1_set(number in1) {
                this->expr_221_in1 = in1;
                this->expr_221_out1_set(this->expr_221_in1 > this->expr_221_in2);//#map:p_obj-193/p_obj-70/>_obj-13:1
            }
            
            void expr_222_out1_set(number v) {
                this->expr_222_out1 = v;
                this->expr_221_in1_set(this->expr_222_out1);
            }
            
            void expr_222_in1_set(number in1) {
                this->expr_222_in1 = in1;
                this->expr_222_out1_set(this->safemod(this->expr_222_in1, this->expr_222_in2));//#map:p_obj-193/p_obj-70/%_obj-6:1
            }
            
            void route_59_nomatch_bang_bang() {}
            
            void eventoutlet_59_in1_bang_bang() {
                ;
                this->getPatcher()->p_24_out3_bang_bang();
            }
            
            void route_59_match1_bang_bang() {
                this->eventoutlet_59_in1_bang_bang();
            }
            
            void eventoutlet_59_in1_number_set(number v) {
                this->getPatcher()->p_24_out3_number_set(v);
            }
            
            void route_59_match1_number_set(number v) {
                this->eventoutlet_59_in1_number_set(v);
            }
            
            void eventoutlet_59_in1_list_set(const list& v) {
                this->getPatcher()->p_24_out3_list_set((list)v);
            }
            
            void route_59_match1_list_set(const list& v) {
                this->eventoutlet_59_in1_list_set(v);
            }
            
            void route_59_nomatch_number_set(number ) {}
            
            void route_59_nomatch_list_set(const list& ) {}
            
            void route_59_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_59_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_59_selector1) {
                        if (input->length == 0)
                            this->route_59_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_59_match1_number_set(input[0]);
                        else
                            this->route_59_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_59_nomatch_number_set(v[0]);
                        } else {
                            this->route_59_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_59_input_number_set(number v) {
                this->route_59_input_list_set({v});
            }
            
            void expr_217_out1_set(number v) {
                this->expr_217_out1 = v;
                this->route_59_input_number_set(this->expr_217_out1);
            }
            
            void expr_217_in1_set(number in1) {
                this->expr_217_in1 = in1;
                this->expr_217_out1_set(this->expr_217_in1 > this->expr_217_in2);//#map:p_obj-193/p_obj-70/>_obj-14:1
            }
            
            void expr_220_out1_set(number v) {
                this->expr_220_out1 = v;
                this->expr_217_in1_set(this->expr_220_out1);
            }
            
            void expr_220_in1_set(number in1) {
                this->expr_220_in1 = in1;
                this->expr_220_out1_set(this->safemod(this->expr_220_in1, this->expr_220_in2));//#map:p_obj-193/p_obj-70/%_obj-7:1
            }
            
            void route_58_nomatch_bang_bang() {}
            
            void eventoutlet_58_in1_bang_bang() {
                ;
                this->getPatcher()->p_24_out2_bang_bang();
            }
            
            void route_58_match1_bang_bang() {
                this->eventoutlet_58_in1_bang_bang();
            }
            
            void eventoutlet_58_in1_number_set(number v) {
                this->getPatcher()->p_24_out2_number_set(v);
            }
            
            void route_58_match1_number_set(number v) {
                this->eventoutlet_58_in1_number_set(v);
            }
            
            void eventoutlet_58_in1_list_set(const list& v) {
                this->getPatcher()->p_24_out2_list_set((list)v);
            }
            
            void route_58_match1_list_set(const list& v) {
                this->eventoutlet_58_in1_list_set(v);
            }
            
            void route_58_nomatch_number_set(number ) {}
            
            void route_58_nomatch_list_set(const list& ) {}
            
            void route_58_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_58_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_58_selector1) {
                        if (input->length == 0)
                            this->route_58_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_58_match1_number_set(input[0]);
                        else
                            this->route_58_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_58_nomatch_number_set(v[0]);
                        } else {
                            this->route_58_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_58_input_number_set(number v) {
                this->route_58_input_list_set({v});
            }
            
            void expr_213_out1_set(number v) {
                this->expr_213_out1 = v;
                this->route_58_input_number_set(this->expr_213_out1);
            }
            
            void expr_213_in1_set(number in1) {
                this->expr_213_in1 = in1;
                this->expr_213_out1_set(this->expr_213_in1 > this->expr_213_in2);//#map:p_obj-193/p_obj-70/>_obj-15:1
            }
            
            void expr_216_out1_set(number v) {
                this->expr_216_out1 = v;
                this->expr_213_in1_set(this->expr_216_out1);
            }
            
            void expr_216_in1_set(number in1) {
                this->expr_216_in1 = in1;
                this->expr_216_out1_set(this->safemod(this->expr_216_in1, this->expr_216_in2));//#map:p_obj-193/p_obj-70/%_obj-8:1
            }
            
            void route_57_nomatch_bang_bang() {}
            
            void eventoutlet_57_in1_bang_bang() {
                ;
                this->getPatcher()->p_24_out1_bang_bang();
            }
            
            void route_57_match1_bang_bang() {
                this->eventoutlet_57_in1_bang_bang();
            }
            
            void eventoutlet_57_in1_number_set(number v) {
                this->getPatcher()->p_24_out1_number_set(v);
            }
            
            void route_57_match1_number_set(number v) {
                this->eventoutlet_57_in1_number_set(v);
            }
            
            void eventoutlet_57_in1_list_set(const list& v) {
                this->getPatcher()->p_24_out1_list_set((list)v);
            }
            
            void route_57_match1_list_set(const list& v) {
                this->eventoutlet_57_in1_list_set(v);
            }
            
            void route_57_nomatch_number_set(number ) {}
            
            void route_57_nomatch_list_set(const list& ) {}
            
            void route_57_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_57_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_57_selector1) {
                        if (input->length == 0)
                            this->route_57_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_57_match1_number_set(input[0]);
                        else
                            this->route_57_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_57_nomatch_number_set(v[0]);
                        } else {
                            this->route_57_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_57_input_number_set(number v) {
                this->route_57_input_list_set({v});
            }
            
            void expr_210_out1_set(number v) {
                this->expr_210_out1 = v;
                this->route_57_input_number_set(this->expr_210_out1);
            }
            
            void expr_210_in1_set(number in1) {
                this->expr_210_in1 = in1;
                this->expr_210_out1_set(this->expr_210_in1 > this->expr_210_in2);//#map:p_obj-193/p_obj-70/>_obj-16:1
            }
            
            void expr_212_out1_set(number v) {
                this->expr_212_out1 = v;
                this->expr_210_in1_set(this->expr_212_out1);
            }
            
            void expr_212_in1_set(number in1) {
                this->expr_212_in1 = in1;
                this->expr_212_out1_set(this->safemod(this->expr_212_in1, this->expr_212_in2));//#map:p_obj-193/p_obj-70/%_obj-9:1
            }
            
            void expr_209_out1_set(number v) {
                this->expr_209_out1 = v;
                this->expr_212_in1_set(this->expr_209_out1);
            }
            
            void expr_209_in1_set(number in1) {
                this->expr_209_in1 = in1;
                this->expr_209_out1_set(rnbo_floor(this->expr_209_in1));//#map:p_obj-193/p_obj-70/floor_obj-26:1
            }
            
            void expr_211_out1_set(number v) {
                this->expr_211_out1 = v;
                this->expr_209_in1_set(this->expr_211_out1);
            }
            
            void expr_211_in1_set(number in1) {
                this->expr_211_in1 = in1;
            
                this->expr_211_out1_set(
                    (this->expr_211_in2 == 0 ? 0 : (this->expr_211_in2 == 0. ? 0. : this->expr_211_in1 / this->expr_211_in2))
                );//#map:p_obj-193/p_obj-70//_obj-12:1
            }
            
            void expr_214_out1_set(number v) {
                this->expr_214_out1 = v;
                this->expr_216_in1_set(this->expr_214_out1);
                this->expr_211_in1_set(this->expr_214_out1);
            }
            
            void expr_214_in1_set(number in1) {
                this->expr_214_in1 = in1;
                this->expr_214_out1_set(rnbo_floor(this->expr_214_in1));//#map:p_obj-193/p_obj-70/floor_obj-24:1
            }
            
            void expr_215_out1_set(number v) {
                this->expr_215_out1 = v;
                this->expr_214_in1_set(this->expr_215_out1);
            }
            
            void expr_215_in1_set(number in1) {
                this->expr_215_in1 = in1;
            
                this->expr_215_out1_set(
                    (this->expr_215_in2 == 0 ? 0 : (this->expr_215_in2 == 0. ? 0. : this->expr_215_in1 / this->expr_215_in2))
                );//#map:p_obj-193/p_obj-70//_obj-11:1
            }
            
            void expr_218_out1_set(number v) {
                this->expr_218_out1 = v;
                this->expr_220_in1_set(this->expr_218_out1);
                this->expr_215_in1_set(this->expr_218_out1);
            }
            
            void expr_218_in1_set(number in1) {
                this->expr_218_in1 = in1;
                this->expr_218_out1_set(rnbo_floor(this->expr_218_in1));//#map:p_obj-193/p_obj-70/floor_obj-21:1
            }
            
            void expr_219_out1_set(number v) {
                this->expr_219_out1 = v;
                this->expr_218_in1_set(this->expr_219_out1);
            }
            
            void expr_219_in1_set(number in1) {
                this->expr_219_in1 = in1;
            
                this->expr_219_out1_set(
                    (this->expr_219_in2 == 0 ? 0 : (this->expr_219_in2 == 0. ? 0. : this->expr_219_in1 / this->expr_219_in2))
                );//#map:p_obj-193/p_obj-70//_obj-10:1
            }
            
            void eventinlet_34_out1_number_set(number v) {
                this->expr_222_in1_set(v);
                this->expr_219_in1_set(v);
            }
            
            void expr_222_in1_bang() {
                this->expr_222_out1_set(this->safemod(this->expr_222_in1, this->expr_222_in2));//#map:p_obj-193/p_obj-70/%_obj-6:1
            }
            
            void expr_219_in1_bang() {
                this->expr_219_out1_set(
                    (this->expr_219_in2 == 0 ? 0 : (this->expr_219_in2 == 0. ? 0. : this->expr_219_in1 / this->expr_219_in2))
                );//#map:p_obj-193/p_obj-70//_obj-10:1
            }
            
            void expr_222_in2_set(number v) {
                this->expr_222_in2 = v;
            }
            
            void expr_219_in2_set(number v) {
                this->expr_219_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_209_in1 = 0;
                expr_209_out1 = 0;
                route_57_selector1 = 1;
                expr_210_in1 = 0;
                expr_210_in2 = 0.3;
                expr_210_out1 = 0;
                expr_211_in1 = 0;
                expr_211_in2 = 2;
                expr_211_out1 = 0;
                expr_212_in1 = 0;
                expr_212_in2 = 2;
                expr_212_out1 = 0;
                expr_213_in1 = 0;
                expr_213_in2 = 0.3;
                expr_213_out1 = 0;
                expr_214_in1 = 0;
                expr_214_out1 = 0;
                route_58_selector1 = 1;
                expr_215_in1 = 0;
                expr_215_in2 = 2;
                expr_215_out1 = 0;
                expr_216_in1 = 0;
                expr_216_in2 = 2;
                expr_216_out1 = 0;
                expr_217_in1 = 0;
                expr_217_in2 = 0.3;
                expr_217_out1 = 0;
                expr_218_in1 = 0;
                expr_218_out1 = 0;
                expr_219_in1 = 0;
                expr_219_in2 = 2;
                expr_219_out1 = 0;
                expr_220_in1 = 0;
                expr_220_in2 = 2;
                expr_220_out1 = 0;
                route_59_selector1 = 1;
                route_60_selector1 = 1;
                expr_221_in1 = 0;
                expr_221_in2 = 0.3;
                expr_221_out1 = 0;
                expr_222_in1 = 0;
                expr_222_in2 = 2;
                expr_222_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_209_in1;
                number expr_209_out1;
                number route_57_selector1;
                number expr_210_in1;
                number expr_210_in2;
                number expr_210_out1;
                number expr_211_in1;
                number expr_211_in2;
                number expr_211_out1;
                number expr_212_in1;
                number expr_212_in2;
                number expr_212_out1;
                number expr_213_in1;
                number expr_213_in2;
                number expr_213_out1;
                number expr_214_in1;
                number expr_214_out1;
                number route_58_selector1;
                number expr_215_in1;
                number expr_215_in2;
                number expr_215_out1;
                number expr_216_in1;
                number expr_216_in2;
                number expr_216_out1;
                number expr_217_in1;
                number expr_217_in2;
                number expr_217_out1;
                number expr_218_in1;
                number expr_218_out1;
                number expr_219_in1;
                number expr_219_in2;
                number expr_219_out1;
                number expr_220_in1;
                number expr_220_in2;
                number expr_220_out1;
                number route_59_selector1;
                number route_60_selector1;
                number expr_221_in1;
                number expr_221_in2;
                number expr_221_out1;
                number expr_222_in1;
                number expr_222_in2;
                number expr_222_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1049 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1049()
            {
            }
            
            ~RNBOSubpatcher_1049()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_35_out1_bang_bang() {
                this->expr_236_in1_bang();
                this->expr_233_in1_bang();
            }
            
            void eventinlet_35_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_236_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_236_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_233_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_233_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_64_nomatch_bang_bang() {}
            
            void eventoutlet_64_in1_bang_bang() {
                ;
                this->getPatcher()->p_25_out4_bang_bang();
            }
            
            void route_64_match1_bang_bang() {
                this->eventoutlet_64_in1_bang_bang();
            }
            
            void eventoutlet_64_in1_number_set(number v) {
                this->getPatcher()->p_25_out4_number_set(v);
            }
            
            void route_64_match1_number_set(number v) {
                this->eventoutlet_64_in1_number_set(v);
            }
            
            void eventoutlet_64_in1_list_set(const list& v) {
                this->getPatcher()->p_25_out4_list_set((list)v);
            }
            
            void route_64_match1_list_set(const list& v) {
                this->eventoutlet_64_in1_list_set(v);
            }
            
            void route_64_nomatch_number_set(number ) {}
            
            void route_64_nomatch_list_set(const list& ) {}
            
            void route_64_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_64_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_64_selector1) {
                        if (input->length == 0)
                            this->route_64_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_64_match1_number_set(input[0]);
                        else
                            this->route_64_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_64_nomatch_number_set(v[0]);
                        } else {
                            this->route_64_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_64_input_number_set(number v) {
                this->route_64_input_list_set({v});
            }
            
            void expr_235_out1_set(number v) {
                this->expr_235_out1 = v;
                this->route_64_input_number_set(this->expr_235_out1);
            }
            
            void expr_235_in1_set(number in1) {
                this->expr_235_in1 = in1;
                this->expr_235_out1_set(this->expr_235_in1 > this->expr_235_in2);//#map:p_obj-193/p_obj-65/>_obj-13:1
            }
            
            void expr_236_out1_set(number v) {
                this->expr_236_out1 = v;
                this->expr_235_in1_set(this->expr_236_out1);
            }
            
            void expr_236_in1_set(number in1) {
                this->expr_236_in1 = in1;
                this->expr_236_out1_set(this->safemod(this->expr_236_in1, this->expr_236_in2));//#map:p_obj-193/p_obj-65/%_obj-6:1
            }
            
            void route_63_nomatch_bang_bang() {}
            
            void eventoutlet_63_in1_bang_bang() {
                ;
                this->getPatcher()->p_25_out3_bang_bang();
            }
            
            void route_63_match1_bang_bang() {
                this->eventoutlet_63_in1_bang_bang();
            }
            
            void eventoutlet_63_in1_number_set(number v) {
                this->getPatcher()->p_25_out3_number_set(v);
            }
            
            void route_63_match1_number_set(number v) {
                this->eventoutlet_63_in1_number_set(v);
            }
            
            void eventoutlet_63_in1_list_set(const list& v) {
                this->getPatcher()->p_25_out3_list_set((list)v);
            }
            
            void route_63_match1_list_set(const list& v) {
                this->eventoutlet_63_in1_list_set(v);
            }
            
            void route_63_nomatch_number_set(number ) {}
            
            void route_63_nomatch_list_set(const list& ) {}
            
            void route_63_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_63_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_63_selector1) {
                        if (input->length == 0)
                            this->route_63_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_63_match1_number_set(input[0]);
                        else
                            this->route_63_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_63_nomatch_number_set(v[0]);
                        } else {
                            this->route_63_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_63_input_number_set(number v) {
                this->route_63_input_list_set({v});
            }
            
            void expr_231_out1_set(number v) {
                this->expr_231_out1 = v;
                this->route_63_input_number_set(this->expr_231_out1);
            }
            
            void expr_231_in1_set(number in1) {
                this->expr_231_in1 = in1;
                this->expr_231_out1_set(this->expr_231_in1 > this->expr_231_in2);//#map:p_obj-193/p_obj-65/>_obj-14:1
            }
            
            void expr_234_out1_set(number v) {
                this->expr_234_out1 = v;
                this->expr_231_in1_set(this->expr_234_out1);
            }
            
            void expr_234_in1_set(number in1) {
                this->expr_234_in1 = in1;
                this->expr_234_out1_set(this->safemod(this->expr_234_in1, this->expr_234_in2));//#map:p_obj-193/p_obj-65/%_obj-7:1
            }
            
            void route_62_nomatch_bang_bang() {}
            
            void eventoutlet_62_in1_bang_bang() {
                ;
                this->getPatcher()->p_25_out2_bang_bang();
            }
            
            void route_62_match1_bang_bang() {
                this->eventoutlet_62_in1_bang_bang();
            }
            
            void eventoutlet_62_in1_number_set(number v) {
                this->getPatcher()->p_25_out2_number_set(v);
            }
            
            void route_62_match1_number_set(number v) {
                this->eventoutlet_62_in1_number_set(v);
            }
            
            void eventoutlet_62_in1_list_set(const list& v) {
                this->getPatcher()->p_25_out2_list_set((list)v);
            }
            
            void route_62_match1_list_set(const list& v) {
                this->eventoutlet_62_in1_list_set(v);
            }
            
            void route_62_nomatch_number_set(number ) {}
            
            void route_62_nomatch_list_set(const list& ) {}
            
            void route_62_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_62_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_62_selector1) {
                        if (input->length == 0)
                            this->route_62_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_62_match1_number_set(input[0]);
                        else
                            this->route_62_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_62_nomatch_number_set(v[0]);
                        } else {
                            this->route_62_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_62_input_number_set(number v) {
                this->route_62_input_list_set({v});
            }
            
            void expr_227_out1_set(number v) {
                this->expr_227_out1 = v;
                this->route_62_input_number_set(this->expr_227_out1);
            }
            
            void expr_227_in1_set(number in1) {
                this->expr_227_in1 = in1;
                this->expr_227_out1_set(this->expr_227_in1 > this->expr_227_in2);//#map:p_obj-193/p_obj-65/>_obj-15:1
            }
            
            void expr_230_out1_set(number v) {
                this->expr_230_out1 = v;
                this->expr_227_in1_set(this->expr_230_out1);
            }
            
            void expr_230_in1_set(number in1) {
                this->expr_230_in1 = in1;
                this->expr_230_out1_set(this->safemod(this->expr_230_in1, this->expr_230_in2));//#map:p_obj-193/p_obj-65/%_obj-8:1
            }
            
            void route_61_nomatch_bang_bang() {}
            
            void eventoutlet_61_in1_bang_bang() {
                ;
                this->getPatcher()->p_25_out1_bang_bang();
            }
            
            void route_61_match1_bang_bang() {
                this->eventoutlet_61_in1_bang_bang();
            }
            
            void eventoutlet_61_in1_number_set(number v) {
                this->getPatcher()->p_25_out1_number_set(v);
            }
            
            void route_61_match1_number_set(number v) {
                this->eventoutlet_61_in1_number_set(v);
            }
            
            void eventoutlet_61_in1_list_set(const list& v) {
                this->getPatcher()->p_25_out1_list_set((list)v);
            }
            
            void route_61_match1_list_set(const list& v) {
                this->eventoutlet_61_in1_list_set(v);
            }
            
            void route_61_nomatch_number_set(number ) {}
            
            void route_61_nomatch_list_set(const list& ) {}
            
            void route_61_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_61_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_61_selector1) {
                        if (input->length == 0)
                            this->route_61_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_61_match1_number_set(input[0]);
                        else
                            this->route_61_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_61_nomatch_number_set(v[0]);
                        } else {
                            this->route_61_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_61_input_number_set(number v) {
                this->route_61_input_list_set({v});
            }
            
            void expr_224_out1_set(number v) {
                this->expr_224_out1 = v;
                this->route_61_input_number_set(this->expr_224_out1);
            }
            
            void expr_224_in1_set(number in1) {
                this->expr_224_in1 = in1;
                this->expr_224_out1_set(this->expr_224_in1 > this->expr_224_in2);//#map:p_obj-193/p_obj-65/>_obj-16:1
            }
            
            void expr_226_out1_set(number v) {
                this->expr_226_out1 = v;
                this->expr_224_in1_set(this->expr_226_out1);
            }
            
            void expr_226_in1_set(number in1) {
                this->expr_226_in1 = in1;
                this->expr_226_out1_set(this->safemod(this->expr_226_in1, this->expr_226_in2));//#map:p_obj-193/p_obj-65/%_obj-9:1
            }
            
            void expr_223_out1_set(number v) {
                this->expr_223_out1 = v;
                this->expr_226_in1_set(this->expr_223_out1);
            }
            
            void expr_223_in1_set(number in1) {
                this->expr_223_in1 = in1;
                this->expr_223_out1_set(rnbo_floor(this->expr_223_in1));//#map:p_obj-193/p_obj-65/floor_obj-26:1
            }
            
            void expr_225_out1_set(number v) {
                this->expr_225_out1 = v;
                this->expr_223_in1_set(this->expr_225_out1);
            }
            
            void expr_225_in1_set(number in1) {
                this->expr_225_in1 = in1;
            
                this->expr_225_out1_set(
                    (this->expr_225_in2 == 0 ? 0 : (this->expr_225_in2 == 0. ? 0. : this->expr_225_in1 / this->expr_225_in2))
                );//#map:p_obj-193/p_obj-65//_obj-12:1
            }
            
            void expr_228_out1_set(number v) {
                this->expr_228_out1 = v;
                this->expr_230_in1_set(this->expr_228_out1);
                this->expr_225_in1_set(this->expr_228_out1);
            }
            
            void expr_228_in1_set(number in1) {
                this->expr_228_in1 = in1;
                this->expr_228_out1_set(rnbo_floor(this->expr_228_in1));//#map:p_obj-193/p_obj-65/floor_obj-24:1
            }
            
            void expr_229_out1_set(number v) {
                this->expr_229_out1 = v;
                this->expr_228_in1_set(this->expr_229_out1);
            }
            
            void expr_229_in1_set(number in1) {
                this->expr_229_in1 = in1;
            
                this->expr_229_out1_set(
                    (this->expr_229_in2 == 0 ? 0 : (this->expr_229_in2 == 0. ? 0. : this->expr_229_in1 / this->expr_229_in2))
                );//#map:p_obj-193/p_obj-65//_obj-11:1
            }
            
            void expr_232_out1_set(number v) {
                this->expr_232_out1 = v;
                this->expr_234_in1_set(this->expr_232_out1);
                this->expr_229_in1_set(this->expr_232_out1);
            }
            
            void expr_232_in1_set(number in1) {
                this->expr_232_in1 = in1;
                this->expr_232_out1_set(rnbo_floor(this->expr_232_in1));//#map:p_obj-193/p_obj-65/floor_obj-21:1
            }
            
            void expr_233_out1_set(number v) {
                this->expr_233_out1 = v;
                this->expr_232_in1_set(this->expr_233_out1);
            }
            
            void expr_233_in1_set(number in1) {
                this->expr_233_in1 = in1;
            
                this->expr_233_out1_set(
                    (this->expr_233_in2 == 0 ? 0 : (this->expr_233_in2 == 0. ? 0. : this->expr_233_in1 / this->expr_233_in2))
                );//#map:p_obj-193/p_obj-65//_obj-10:1
            }
            
            void eventinlet_35_out1_number_set(number v) {
                this->expr_236_in1_set(v);
                this->expr_233_in1_set(v);
            }
            
            void expr_236_in1_bang() {
                this->expr_236_out1_set(this->safemod(this->expr_236_in1, this->expr_236_in2));//#map:p_obj-193/p_obj-65/%_obj-6:1
            }
            
            void expr_233_in1_bang() {
                this->expr_233_out1_set(
                    (this->expr_233_in2 == 0 ? 0 : (this->expr_233_in2 == 0. ? 0. : this->expr_233_in1 / this->expr_233_in2))
                );//#map:p_obj-193/p_obj-65//_obj-10:1
            }
            
            void expr_236_in2_set(number v) {
                this->expr_236_in2 = v;
            }
            
            void expr_233_in2_set(number v) {
                this->expr_233_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_223_in1 = 0;
                expr_223_out1 = 0;
                route_61_selector1 = 1;
                expr_224_in1 = 0;
                expr_224_in2 = 0.3;
                expr_224_out1 = 0;
                expr_225_in1 = 0;
                expr_225_in2 = 2;
                expr_225_out1 = 0;
                expr_226_in1 = 0;
                expr_226_in2 = 2;
                expr_226_out1 = 0;
                expr_227_in1 = 0;
                expr_227_in2 = 0.3;
                expr_227_out1 = 0;
                expr_228_in1 = 0;
                expr_228_out1 = 0;
                route_62_selector1 = 1;
                expr_229_in1 = 0;
                expr_229_in2 = 2;
                expr_229_out1 = 0;
                expr_230_in1 = 0;
                expr_230_in2 = 2;
                expr_230_out1 = 0;
                expr_231_in1 = 0;
                expr_231_in2 = 0.3;
                expr_231_out1 = 0;
                expr_232_in1 = 0;
                expr_232_out1 = 0;
                expr_233_in1 = 0;
                expr_233_in2 = 2;
                expr_233_out1 = 0;
                expr_234_in1 = 0;
                expr_234_in2 = 2;
                expr_234_out1 = 0;
                route_63_selector1 = 1;
                route_64_selector1 = 1;
                expr_235_in1 = 0;
                expr_235_in2 = 0.3;
                expr_235_out1 = 0;
                expr_236_in1 = 0;
                expr_236_in2 = 2;
                expr_236_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_223_in1;
                number expr_223_out1;
                number route_61_selector1;
                number expr_224_in1;
                number expr_224_in2;
                number expr_224_out1;
                number expr_225_in1;
                number expr_225_in2;
                number expr_225_out1;
                number expr_226_in1;
                number expr_226_in2;
                number expr_226_out1;
                number expr_227_in1;
                number expr_227_in2;
                number expr_227_out1;
                number expr_228_in1;
                number expr_228_out1;
                number route_62_selector1;
                number expr_229_in1;
                number expr_229_in2;
                number expr_229_out1;
                number expr_230_in1;
                number expr_230_in2;
                number expr_230_out1;
                number expr_231_in1;
                number expr_231_in2;
                number expr_231_out1;
                number expr_232_in1;
                number expr_232_out1;
                number expr_233_in1;
                number expr_233_in2;
                number expr_233_out1;
                number expr_234_in1;
                number expr_234_in2;
                number expr_234_out1;
                number route_63_selector1;
                number route_64_selector1;
                number expr_235_in1;
                number expr_235_in2;
                number expr_235_out1;
                number expr_236_in1;
                number expr_236_in2;
                number expr_236_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_1050 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_1058;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_1050()
            {
            }
            
            ~RNBOSubpatcher_1050()
            {
            }
            
            virtual RNBOSubpatcher_1058* getPatcher() const {
                return static_cast<RNBOSubpatcher_1058 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    if (m < 0) {
                        m = -m;
                    }
            
                    if (f >= m) {
                        if (f >= m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f -= m;
                        }
                    } else if (f <= -m) {
                        if (f <= -m * 2.0) {
                            number d = f / m;
                            int i = (int)(rnbo_trunc(d));
                            d = d - i;
                            f = d * m;
                        } else {
                            f += m;
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
                RNBO_UNUSED(paramid);
                return INVALID_INDEX;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                SampleValue ** inputs,
                Index numInputs,
                SampleValue ** outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    this->setProbingIndex(-1);
                    break;
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void processTempoEvent(MillisecondTime , Tempo ) {}
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    return 0;
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    return "bogus";
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    return value;
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    return value;
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    return nullptr;
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_36_out1_bang_bang() {
                this->expr_250_in1_bang();
                this->expr_247_in1_bang();
            }
            
            void eventinlet_36_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_250_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_250_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_247_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_247_in1_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void route_68_nomatch_bang_bang() {}
            
            void eventoutlet_68_in1_bang_bang() {
                ;
                this->getPatcher()->p_26_out4_bang_bang();
            }
            
            void route_68_match1_bang_bang() {
                this->eventoutlet_68_in1_bang_bang();
            }
            
            void eventoutlet_68_in1_number_set(number v) {
                this->getPatcher()->p_26_out4_number_set(v);
            }
            
            void route_68_match1_number_set(number v) {
                this->eventoutlet_68_in1_number_set(v);
            }
            
            void eventoutlet_68_in1_list_set(const list& v) {
                this->getPatcher()->p_26_out4_list_set((list)v);
            }
            
            void route_68_match1_list_set(const list& v) {
                this->eventoutlet_68_in1_list_set(v);
            }
            
            void route_68_nomatch_number_set(number ) {}
            
            void route_68_nomatch_list_set(const list& ) {}
            
            void route_68_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_68_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_68_selector1) {
                        if (input->length == 0)
                            this->route_68_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_68_match1_number_set(input[0]);
                        else
                            this->route_68_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_68_nomatch_number_set(v[0]);
                        } else {
                            this->route_68_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_68_input_number_set(number v) {
                this->route_68_input_list_set({v});
            }
            
            void expr_249_out1_set(number v) {
                this->expr_249_out1 = v;
                this->route_68_input_number_set(this->expr_249_out1);
            }
            
            void expr_249_in1_set(number in1) {
                this->expr_249_in1 = in1;
                this->expr_249_out1_set(this->expr_249_in1 > this->expr_249_in2);//#map:p_obj-193/p_obj-60/>_obj-13:1
            }
            
            void expr_250_out1_set(number v) {
                this->expr_250_out1 = v;
                this->expr_249_in1_set(this->expr_250_out1);
            }
            
            void expr_250_in1_set(number in1) {
                this->expr_250_in1 = in1;
                this->expr_250_out1_set(this->safemod(this->expr_250_in1, this->expr_250_in2));//#map:p_obj-193/p_obj-60/%_obj-6:1
            }
            
            void route_67_nomatch_bang_bang() {}
            
            void eventoutlet_67_in1_bang_bang() {
                ;
                this->getPatcher()->p_26_out3_bang_bang();
            }
            
            void route_67_match1_bang_bang() {
                this->eventoutlet_67_in1_bang_bang();
            }
            
            void eventoutlet_67_in1_number_set(number v) {
                this->getPatcher()->p_26_out3_number_set(v);
            }
            
            void route_67_match1_number_set(number v) {
                this->eventoutlet_67_in1_number_set(v);
            }
            
            void eventoutlet_67_in1_list_set(const list& v) {
                this->getPatcher()->p_26_out3_list_set((list)v);
            }
            
            void route_67_match1_list_set(const list& v) {
                this->eventoutlet_67_in1_list_set(v);
            }
            
            void route_67_nomatch_number_set(number ) {}
            
            void route_67_nomatch_list_set(const list& ) {}
            
            void route_67_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_67_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_67_selector1) {
                        if (input->length == 0)
                            this->route_67_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_67_match1_number_set(input[0]);
                        else
                            this->route_67_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_67_nomatch_number_set(v[0]);
                        } else {
                            this->route_67_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_67_input_number_set(number v) {
                this->route_67_input_list_set({v});
            }
            
            void expr_245_out1_set(number v) {
                this->expr_245_out1 = v;
                this->route_67_input_number_set(this->expr_245_out1);
            }
            
            void expr_245_in1_set(number in1) {
                this->expr_245_in1 = in1;
                this->expr_245_out1_set(this->expr_245_in1 > this->expr_245_in2);//#map:p_obj-193/p_obj-60/>_obj-14:1
            }
            
            void expr_248_out1_set(number v) {
                this->expr_248_out1 = v;
                this->expr_245_in1_set(this->expr_248_out1);
            }
            
            void expr_248_in1_set(number in1) {
                this->expr_248_in1 = in1;
                this->expr_248_out1_set(this->safemod(this->expr_248_in1, this->expr_248_in2));//#map:p_obj-193/p_obj-60/%_obj-7:1
            }
            
            void route_66_nomatch_bang_bang() {}
            
            void eventoutlet_66_in1_bang_bang() {
                ;
                this->getPatcher()->p_26_out2_bang_bang();
            }
            
            void route_66_match1_bang_bang() {
                this->eventoutlet_66_in1_bang_bang();
            }
            
            void eventoutlet_66_in1_number_set(number v) {
                this->getPatcher()->p_26_out2_number_set(v);
            }
            
            void route_66_match1_number_set(number v) {
                this->eventoutlet_66_in1_number_set(v);
            }
            
            void eventoutlet_66_in1_list_set(const list& v) {
                this->getPatcher()->p_26_out2_list_set((list)v);
            }
            
            void route_66_match1_list_set(const list& v) {
                this->eventoutlet_66_in1_list_set(v);
            }
            
            void route_66_nomatch_number_set(number ) {}
            
            void route_66_nomatch_list_set(const list& ) {}
            
            void route_66_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_66_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_66_selector1) {
                        if (input->length == 0)
                            this->route_66_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_66_match1_number_set(input[0]);
                        else
                            this->route_66_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_66_nomatch_number_set(v[0]);
                        } else {
                            this->route_66_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_66_input_number_set(number v) {
                this->route_66_input_list_set({v});
            }
            
            void expr_241_out1_set(number v) {
                this->expr_241_out1 = v;
                this->route_66_input_number_set(this->expr_241_out1);
            }
            
            void expr_241_in1_set(number in1) {
                this->expr_241_in1 = in1;
                this->expr_241_out1_set(this->expr_241_in1 > this->expr_241_in2);//#map:p_obj-193/p_obj-60/>_obj-15:1
            }
            
            void expr_244_out1_set(number v) {
                this->expr_244_out1 = v;
                this->expr_241_in1_set(this->expr_244_out1);
            }
            
            void expr_244_in1_set(number in1) {
                this->expr_244_in1 = in1;
                this->expr_244_out1_set(this->safemod(this->expr_244_in1, this->expr_244_in2));//#map:p_obj-193/p_obj-60/%_obj-8:1
            }
            
            void route_65_nomatch_bang_bang() {}
            
            void eventoutlet_65_in1_bang_bang() {
                ;
                this->getPatcher()->p_26_out1_bang_bang();
            }
            
            void route_65_match1_bang_bang() {
                this->eventoutlet_65_in1_bang_bang();
            }
            
            void eventoutlet_65_in1_number_set(number v) {
                this->getPatcher()->p_26_out1_number_set(v);
            }
            
            void route_65_match1_number_set(number v) {
                this->eventoutlet_65_in1_number_set(v);
            }
            
            void eventoutlet_65_in1_list_set(const list& v) {
                this->getPatcher()->p_26_out1_list_set((list)v);
            }
            
            void route_65_match1_list_set(const list& v) {
                this->eventoutlet_65_in1_list_set(v);
            }
            
            void route_65_nomatch_number_set(number ) {}
            
            void route_65_nomatch_list_set(const list& ) {}
            
            void route_65_input_list_set(const list& v) {
                if ((bool)(!(bool)(v->length)))
                    this->route_65_nomatch_bang_bang();
                else {
                    number check = v[0];
                    list input = jsCreateListCopy(v);
                    input->shift();
                    bool nomatch = true;
            
                    if (check == this->route_65_selector1) {
                        if (input->length == 0)
                            this->route_65_match1_bang_bang();
                        else if (input->length == 1)
                            this->route_65_match1_number_set(input[0]);
                        else
                            this->route_65_match1_list_set(input);
            
                        nomatch = false;
                    }
            
                    if ((bool)(nomatch)) {
                        if (v->length == 1) {
                            this->route_65_nomatch_number_set(v[0]);
                        } else {
                            this->route_65_nomatch_list_set(v);
                        }
                    }
                }
            }
            
            void route_65_input_number_set(number v) {
                this->route_65_input_list_set({v});
            }
            
            void expr_238_out1_set(number v) {
                this->expr_238_out1 = v;
                this->route_65_input_number_set(this->expr_238_out1);
            }
            
            void expr_238_in1_set(number in1) {
                this->expr_238_in1 = in1;
                this->expr_238_out1_set(this->expr_238_in1 > this->expr_238_in2);//#map:p_obj-193/p_obj-60/>_obj-16:1
            }
            
            void expr_240_out1_set(number v) {
                this->expr_240_out1 = v;
                this->expr_238_in1_set(this->expr_240_out1);
            }
            
            void expr_240_in1_set(number in1) {
                this->expr_240_in1 = in1;
                this->expr_240_out1_set(this->safemod(this->expr_240_in1, this->expr_240_in2));//#map:p_obj-193/p_obj-60/%_obj-9:1
            }
            
            void expr_237_out1_set(number v) {
                this->expr_237_out1 = v;
                this->expr_240_in1_set(this->expr_237_out1);
            }
            
            void expr_237_in1_set(number in1) {
                this->expr_237_in1 = in1;
                this->expr_237_out1_set(rnbo_floor(this->expr_237_in1));//#map:p_obj-193/p_obj-60/floor_obj-26:1
            }
            
            void expr_239_out1_set(number v) {
                this->expr_239_out1 = v;
                this->expr_237_in1_set(this->expr_239_out1);
            }
            
            void expr_239_in1_set(number in1) {
                this->expr_239_in1 = in1;
            
                this->expr_239_out1_set(
                    (this->expr_239_in2 == 0 ? 0 : (this->expr_239_in2 == 0. ? 0. : this->expr_239_in1 / this->expr_239_in2))
                );//#map:p_obj-193/p_obj-60//_obj-12:1
            }
            
            void expr_242_out1_set(number v) {
                this->expr_242_out1 = v;
                this->expr_244_in1_set(this->expr_242_out1);
                this->expr_239_in1_set(this->expr_242_out1);
            }
            
            void expr_242_in1_set(number in1) {
                this->expr_242_in1 = in1;
                this->expr_242_out1_set(rnbo_floor(this->expr_242_in1));//#map:p_obj-193/p_obj-60/floor_obj-24:1
            }
            
            void expr_243_out1_set(number v) {
                this->expr_243_out1 = v;
                this->expr_242_in1_set(this->expr_243_out1);
            }
            
            void expr_243_in1_set(number in1) {
                this->expr_243_in1 = in1;
            
                this->expr_243_out1_set(
                    (this->expr_243_in2 == 0 ? 0 : (this->expr_243_in2 == 0. ? 0. : this->expr_243_in1 / this->expr_243_in2))
                );//#map:p_obj-193/p_obj-60//_obj-11:1
            }
            
            void expr_246_out1_set(number v) {
                this->expr_246_out1 = v;
                this->expr_248_in1_set(this->expr_246_out1);
                this->expr_243_in1_set(this->expr_246_out1);
            }
            
            void expr_246_in1_set(number in1) {
                this->expr_246_in1 = in1;
                this->expr_246_out1_set(rnbo_floor(this->expr_246_in1));//#map:p_obj-193/p_obj-60/floor_obj-21:1
            }
            
            void expr_247_out1_set(number v) {
                this->expr_247_out1 = v;
                this->expr_246_in1_set(this->expr_247_out1);
            }
            
            void expr_247_in1_set(number in1) {
                this->expr_247_in1 = in1;
            
                this->expr_247_out1_set(
                    (this->expr_247_in2 == 0 ? 0 : (this->expr_247_in2 == 0. ? 0. : this->expr_247_in1 / this->expr_247_in2))
                );//#map:p_obj-193/p_obj-60//_obj-10:1
            }
            
            void eventinlet_36_out1_number_set(number v) {
                this->expr_250_in1_set(v);
                this->expr_247_in1_set(v);
            }
            
            void expr_250_in1_bang() {
                this->expr_250_out1_set(this->safemod(this->expr_250_in1, this->expr_250_in2));//#map:p_obj-193/p_obj-60/%_obj-6:1
            }
            
            void expr_247_in1_bang() {
                this->expr_247_out1_set(
                    (this->expr_247_in2 == 0 ? 0 : (this->expr_247_in2 == 0. ? 0. : this->expr_247_in1 / this->expr_247_in2))
                );//#map:p_obj-193/p_obj-60//_obj-10:1
            }
            
            void expr_250_in2_set(number v) {
                this->expr_250_in2 = v;
            }
            
            void expr_247_in2_set(number v) {
                this->expr_247_in2 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_237_in1 = 0;
                expr_237_out1 = 0;
                route_65_selector1 = 1;
                expr_238_in1 = 0;
                expr_238_in2 = 0.3;
                expr_238_out1 = 0;
                expr_239_in1 = 0;
                expr_239_in2 = 2;
                expr_239_out1 = 0;
                expr_240_in1 = 0;
                expr_240_in2 = 2;
                expr_240_out1 = 0;
                expr_241_in1 = 0;
                expr_241_in2 = 0.3;
                expr_241_out1 = 0;
                expr_242_in1 = 0;
                expr_242_out1 = 0;
                route_66_selector1 = 1;
                expr_243_in1 = 0;
                expr_243_in2 = 2;
                expr_243_out1 = 0;
                expr_244_in1 = 0;
                expr_244_in2 = 2;
                expr_244_out1 = 0;
                expr_245_in1 = 0;
                expr_245_in2 = 0.3;
                expr_245_out1 = 0;
                expr_246_in1 = 0;
                expr_246_out1 = 0;
                expr_247_in1 = 0;
                expr_247_in2 = 2;
                expr_247_out1 = 0;
                expr_248_in1 = 0;
                expr_248_in2 = 2;
                expr_248_out1 = 0;
                route_67_selector1 = 1;
                route_68_selector1 = 1;
                expr_249_in1 = 0;
                expr_249_in2 = 0.3;
                expr_249_out1 = 0;
                expr_250_in1 = 0;
                expr_250_in2 = 2;
                expr_250_out1 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_237_in1;
                number expr_237_out1;
                number route_65_selector1;
                number expr_238_in1;
                number expr_238_in2;
                number expr_238_out1;
                number expr_239_in1;
                number expr_239_in2;
                number expr_239_out1;
                number expr_240_in1;
                number expr_240_in2;
                number expr_240_out1;
                number expr_241_in1;
                number expr_241_in2;
                number expr_241_out1;
                number expr_242_in1;
                number expr_242_out1;
                number route_66_selector1;
                number expr_243_in1;
                number expr_243_in2;
                number expr_243_out1;
                number expr_244_in1;
                number expr_244_in2;
                number expr_244_out1;
                number expr_245_in1;
                number expr_245_in2;
                number expr_245_out1;
                number expr_246_in1;
                number expr_246_out1;
                number expr_247_in1;
                number expr_247_in2;
                number expr_247_out1;
                number expr_248_in1;
                number expr_248_in2;
                number expr_248_out1;
                number route_67_selector1;
                number route_68_selector1;
                number expr_249_in1;
                number expr_249_in2;
                number expr_249_out1;
                number expr_250_in1;
                number expr_250_in2;
                number expr_250_out1;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_1058()
    {
    }
    
    ~RNBOSubpatcher_1058()
    {
        delete this->p_11;
        delete this->p_12;
        delete this->p_13;
        delete this->p_14;
        delete this->p_15;
        delete this->p_16;
        delete this->p_17;
        delete this->p_18;
        delete this->p_19;
        delete this->p_20;
        delete this->p_21;
        delete this->p_22;
        delete this->p_23;
        delete this->p_24;
        delete this->p_25;
        delete this->p_26;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
        if (!stringCompare(paramid, "message_obj-133/bangval")) {
            return 0;
        }
    
        if (!stringCompare(paramid, "number_obj-12/value")) {
            return 1;
        }
    
        if (!stringCompare(paramid, "button_obj-123/bangval")) {
            return 2;
        }
    
        if (!stringCompare(paramid, "message_obj-147/bangval")) {
            return 3;
        }
    
        if (!stringCompare(paramid, "message_obj-145/bangval")) {
            return 4;
        }
    
        if (!stringCompare(paramid, "number_obj-16/value")) {
            return 5;
        }
    
        if (!stringCompare(paramid, "button_obj-122/bangval")) {
            return 6;
        }
    
        if (!stringCompare(paramid, "message_obj-181/bangval")) {
            return 7;
        }
    
        if (!stringCompare(paramid, "button_obj-212/bangval")) {
            return 8;
        }
    
        if (!stringCompare(paramid, "message_obj-182/bangval")) {
            return 9;
        }
    
        if (!stringCompare(paramid, "button_obj-214/bangval")) {
            return 10;
        }
    
        if (!stringCompare(paramid, "button_obj-121/bangval")) {
            return 11;
        }
    
        if (!stringCompare(paramid, "message_obj-184/bangval")) {
            return 12;
        }
    
        if (!stringCompare(paramid, "number_obj-18/value")) {
            return 13;
        }
    
        if (!stringCompare(paramid, "message_obj-185/bangval")) {
            return 14;
        }
    
        if (!stringCompare(paramid, "button_obj-216/bangval")) {
            return 15;
        }
    
        if (!stringCompare(paramid, "button_obj-120/bangval")) {
            return 16;
        }
    
        if (!stringCompare(paramid, "message_obj-187/bangval")) {
            return 17;
        }
    
        if (!stringCompare(paramid, "number_obj-79/value")) {
            return 18;
        }
    
        if (!stringCompare(paramid, "message_obj-188/bangval")) {
            return 19;
        }
    
        if (!stringCompare(paramid, "button_obj-218/bangval")) {
            return 20;
        }
    
        if (!stringCompare(paramid, "button_obj-118/bangval")) {
            return 21;
        }
    
        if (!stringCompare(paramid, "message_obj-190/bangval")) {
            return 22;
        }
    
        if (!stringCompare(paramid, "number_obj-103/value")) {
            return 23;
        }
    
        if (!stringCompare(paramid, "message_obj-191/bangval")) {
            return 24;
        }
    
        if (!stringCompare(paramid, "button_obj-117/bangval")) {
            return 25;
        }
    
        if (!stringCompare(paramid, "message_obj-193/bangval")) {
            return 26;
        }
    
        if (!stringCompare(paramid, "number_obj-107/value")) {
            return 27;
        }
    
        if (!stringCompare(paramid, "message_obj-194/bangval")) {
            return 28;
        }
    
        if (!stringCompare(paramid, "number_obj-119/value")) {
            return 29;
        }
    
        if (!stringCompare(paramid, "button_obj-116/bangval")) {
            return 30;
        }
    
        if (!stringCompare(paramid, "message_obj-196/bangval")) {
            return 31;
        }
    
        if (!stringCompare(paramid, "message_obj-197/bangval")) {
            return 32;
        }
    
        if (!stringCompare(paramid, "button_obj-115/bangval")) {
            return 33;
        }
    
        if (!stringCompare(paramid, "message_obj-199/bangval")) {
            return 34;
        }
    
        if (!stringCompare(paramid, "number_obj-125/value")) {
            return 35;
        }
    
        if (!stringCompare(paramid, "message_obj-200/bangval")) {
            return 36;
        }
    
        if (!stringCompare(paramid, "button_obj-114/bangval")) {
            return 37;
        }
    
        if (!stringCompare(paramid, "message_obj-202/bangval")) {
            return 38;
        }
    
        if (!stringCompare(paramid, "number_obj-127/value")) {
            return 39;
        }
    
        if (!stringCompare(paramid, "message_obj-203/bangval")) {
            return 40;
        }
    
        if (!stringCompare(paramid, "button_obj-112/bangval")) {
            return 41;
        }
    
        if (!stringCompare(paramid, "message_obj-205/bangval")) {
            return 42;
        }
    
        if (!stringCompare(paramid, "number_obj-129/value")) {
            return 43;
        }
    
        if (!stringCompare(paramid, "message_obj-206/bangval")) {
            return 44;
        }
    
        if (!stringCompare(paramid, "button_obj-111/bangval")) {
            return 45;
        }
    
        if (!stringCompare(paramid, "message_obj-208/bangval")) {
            return 46;
        }
    
        if (!stringCompare(paramid, "number_obj-131/value")) {
            return 47;
        }
    
        if (!stringCompare(paramid, "message_obj-209/bangval")) {
            return 48;
        }
    
        if (!stringCompare(paramid, "button_obj-110/bangval")) {
            return 49;
        }
    
        if (!stringCompare(paramid, "message_obj-211/bangval")) {
            return 50;
        }
    
        if (!stringCompare(paramid, "number_obj-134/value")) {
            return 51;
        }
    
        if (!stringCompare(paramid, "message_obj-213/bangval")) {
            return 52;
        }
    
        if (!stringCompare(paramid, "button_obj-109/bangval")) {
            return 53;
        }
    
        if (!stringCompare(paramid, "message_obj-217/bangval")) {
            return 54;
        }
    
        if (!stringCompare(paramid, "number_obj-136/value")) {
            return 55;
        }
    
        if (!stringCompare(paramid, "message_obj-219/bangval")) {
            return 56;
        }
    
        if (!stringCompare(paramid, "number_obj-138/value")) {
            return 57;
        }
    
        if (!stringCompare(paramid, "button_obj-108/bangval")) {
            return 58;
        }
    
        if (!stringCompare(paramid, "message_obj-221/bangval")) {
            return 59;
        }
    
        if (!stringCompare(paramid, "message_obj-222/bangval")) {
            return 60;
        }
    
        if (!stringCompare(paramid, "button_obj-106/bangval")) {
            return 61;
        }
    
        if (!stringCompare(paramid, "message_obj-224/bangval")) {
            return 62;
        }
    
        if (!stringCompare(paramid, "number_obj-140/value")) {
            return 63;
        }
    
        if (!stringCompare(paramid, "message_obj-225/bangval")) {
            return 64;
        }
    
        if (!stringCompare(paramid, "button_obj-105/bangval")) {
            return 65;
        }
    
        if (!stringCompare(paramid, "message_obj-227/bangval")) {
            return 66;
        }
    
        if (!stringCompare(paramid, "number_obj-142/value")) {
            return 67;
        }
    
        if (!stringCompare(paramid, "message_obj-228/bangval")) {
            return 68;
        }
    
        return INVALID_INDEX;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        SampleValue ** inputs,
        Index numInputs,
        SampleValue ** outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_11_perform(n);
        this->p_12_perform(n);
        this->p_13_perform(n);
        this->p_14_perform(n);
        this->p_15_perform(n);
        this->p_16_perform(n);
        this->p_17_perform(n);
        this->p_18_perform(n);
        this->p_19_perform(n);
        this->p_20_perform(n);
        this->p_21_perform(n);
        this->p_22_perform(n);
        this->p_23_perform(n);
        this->p_24_perform(n);
        this->p_25_perform(n);
        this->p_26_perform(n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
        this->p_11->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_12->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_13->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_14->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_15->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_16->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_17->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_18->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_19->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_20->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_21->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_22->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_23->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_24->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_25->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_26->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            this->setProbingIndex(-1);
            break;
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_11 = new RNBOSubpatcher_1035();
        this->p_11->setEngineAndPatcher(this->getEngine(), this);
        this->p_11->initialize();
        this->p_11->setParameterOffset(this->getParameterOffset(this->p_11));
        this->p_12 = new RNBOSubpatcher_1036();
        this->p_12->setEngineAndPatcher(this->getEngine(), this);
        this->p_12->initialize();
        this->p_12->setParameterOffset(this->getParameterOffset(this->p_12));
        this->p_13 = new RNBOSubpatcher_1037();
        this->p_13->setEngineAndPatcher(this->getEngine(), this);
        this->p_13->initialize();
        this->p_13->setParameterOffset(this->getParameterOffset(this->p_13));
        this->p_14 = new RNBOSubpatcher_1038();
        this->p_14->setEngineAndPatcher(this->getEngine(), this);
        this->p_14->initialize();
        this->p_14->setParameterOffset(this->getParameterOffset(this->p_14));
        this->p_15 = new RNBOSubpatcher_1039();
        this->p_15->setEngineAndPatcher(this->getEngine(), this);
        this->p_15->initialize();
        this->p_15->setParameterOffset(this->getParameterOffset(this->p_15));
        this->p_16 = new RNBOSubpatcher_1040();
        this->p_16->setEngineAndPatcher(this->getEngine(), this);
        this->p_16->initialize();
        this->p_16->setParameterOffset(this->getParameterOffset(this->p_16));
        this->p_17 = new RNBOSubpatcher_1041();
        this->p_17->setEngineAndPatcher(this->getEngine(), this);
        this->p_17->initialize();
        this->p_17->setParameterOffset(this->getParameterOffset(this->p_17));
        this->p_18 = new RNBOSubpatcher_1042();
        this->p_18->setEngineAndPatcher(this->getEngine(), this);
        this->p_18->initialize();
        this->p_18->setParameterOffset(this->getParameterOffset(this->p_18));
        this->p_19 = new RNBOSubpatcher_1043();
        this->p_19->setEngineAndPatcher(this->getEngine(), this);
        this->p_19->initialize();
        this->p_19->setParameterOffset(this->getParameterOffset(this->p_19));
        this->p_20 = new RNBOSubpatcher_1044();
        this->p_20->setEngineAndPatcher(this->getEngine(), this);
        this->p_20->initialize();
        this->p_20->setParameterOffset(this->getParameterOffset(this->p_20));
        this->p_21 = new RNBOSubpatcher_1045();
        this->p_21->setEngineAndPatcher(this->getEngine(), this);
        this->p_21->initialize();
        this->p_21->setParameterOffset(this->getParameterOffset(this->p_21));
        this->p_22 = new RNBOSubpatcher_1046();
        this->p_22->setEngineAndPatcher(this->getEngine(), this);
        this->p_22->initialize();
        this->p_22->setParameterOffset(this->getParameterOffset(this->p_22));
        this->p_23 = new RNBOSubpatcher_1047();
        this->p_23->setEngineAndPatcher(this->getEngine(), this);
        this->p_23->initialize();
        this->p_23->setParameterOffset(this->getParameterOffset(this->p_23));
        this->p_24 = new RNBOSubpatcher_1048();
        this->p_24->setEngineAndPatcher(this->getEngine(), this);
        this->p_24->initialize();
        this->p_24->setParameterOffset(this->getParameterOffset(this->p_24));
        this->p_25 = new RNBOSubpatcher_1049();
        this->p_25->setEngineAndPatcher(this->getEngine(), this);
        this->p_25->initialize();
        this->p_25->setParameterOffset(this->getParameterOffset(this->p_25));
        this->p_26 = new RNBOSubpatcher_1050();
        this->p_26->setEngineAndPatcher(this->getEngine(), this);
        this->p_26->initialize();
        this->p_26->setParameterOffset(this->getParameterOffset(this->p_26));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->p_11->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-74"));
        this->p_12->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-25"));
        this->p_13->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-30"));
        this->p_14->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-35"));
        this->p_15->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-55"));
        this->p_16->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-50"));
        this->p_17->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-45"));
        this->p_18->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-40"));
        this->p_19->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-101"));
        this->p_20->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-96"));
        this->p_21->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-91"));
        this->p_22->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-86"));
        this->p_23->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-76"));
        this->p_24->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-70"));
        this->p_25->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-65"));
        this->p_26->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-60"));
    }
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_11->processTempoEvent(time, tempo);
        this->p_12->processTempoEvent(time, tempo);
        this->p_13->processTempoEvent(time, tempo);
        this->p_14->processTempoEvent(time, tempo);
        this->p_15->processTempoEvent(time, tempo);
        this->p_16->processTempoEvent(time, tempo);
        this->p_17->processTempoEvent(time, tempo);
        this->p_18->processTempoEvent(time, tempo);
        this->p_19->processTempoEvent(time, tempo);
        this->p_20->processTempoEvent(time, tempo);
        this->p_21->processTempoEvent(time, tempo);
        this->p_22->processTempoEvent(time, tempo);
        this->p_23->processTempoEvent(time, tempo);
        this->p_24->processTempoEvent(time, tempo);
        this->p_25->processTempoEvent(time, tempo);
        this->p_26->processTempoEvent(time, tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_11->processTransportEvent(time, state);
        this->p_12->processTransportEvent(time, state);
        this->p_13->processTransportEvent(time, state);
        this->p_14->processTransportEvent(time, state);
        this->p_15->processTransportEvent(time, state);
        this->p_16->processTransportEvent(time, state);
        this->p_17->processTransportEvent(time, state);
        this->p_18->processTransportEvent(time, state);
        this->p_19->processTransportEvent(time, state);
        this->p_20->processTransportEvent(time, state);
        this->p_21->processTransportEvent(time, state);
        this->p_22->processTransportEvent(time, state);
        this->p_23->processTransportEvent(time, state);
        this->p_24->processTransportEvent(time, state);
        this->p_25->processTransportEvent(time, state);
        this->p_26->processTransportEvent(time, state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_11->processBeatTimeEvent(time, beattime);
        this->p_12->processBeatTimeEvent(time, beattime);
        this->p_13->processBeatTimeEvent(time, beattime);
        this->p_14->processBeatTimeEvent(time, beattime);
        this->p_15->processBeatTimeEvent(time, beattime);
        this->p_16->processBeatTimeEvent(time, beattime);
        this->p_17->processBeatTimeEvent(time, beattime);
        this->p_18->processBeatTimeEvent(time, beattime);
        this->p_19->processBeatTimeEvent(time, beattime);
        this->p_20->processBeatTimeEvent(time, beattime);
        this->p_21->processBeatTimeEvent(time, beattime);
        this->p_22->processBeatTimeEvent(time, beattime);
        this->p_23->processBeatTimeEvent(time, beattime);
        this->p_24->processBeatTimeEvent(time, beattime);
        this->p_25->processBeatTimeEvent(time, beattime);
        this->p_26->processBeatTimeEvent(time, beattime);
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_11->processTimeSignatureEvent(time, numerator, denominator);
        this->p_12->processTimeSignatureEvent(time, numerator, denominator);
        this->p_13->processTimeSignatureEvent(time, numerator, denominator);
        this->p_14->processTimeSignatureEvent(time, numerator, denominator);
        this->p_15->processTimeSignatureEvent(time, numerator, denominator);
        this->p_16->processTimeSignatureEvent(time, numerator, denominator);
        this->p_17->processTimeSignatureEvent(time, numerator, denominator);
        this->p_18->processTimeSignatureEvent(time, numerator, denominator);
        this->p_19->processTimeSignatureEvent(time, numerator, denominator);
        this->p_20->processTimeSignatureEvent(time, numerator, denominator);
        this->p_21->processTimeSignatureEvent(time, numerator, denominator);
        this->p_22->processTimeSignatureEvent(time, numerator, denominator);
        this->p_23->processTimeSignatureEvent(time, numerator, denominator);
        this->p_24->processTimeSignatureEvent(time, numerator, denominator);
        this->p_25->processTimeSignatureEvent(time, numerator, denominator);
        this->p_26->processTimeSignatureEvent(time, numerator, denominator);
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            this->message_17_bangval_bang();
            break;
        case 1:
            this->numberobj_31_value_set(v);
            break;
        case 2:
            this->button_02_bangval_bang();
            break;
        case 3:
            this->message_18_bangval_bang();
            break;
        case 4:
            this->message_19_bangval_bang();
            break;
        case 5:
            this->numberobj_32_value_set(v);
            break;
        case 6:
            this->button_03_bangval_bang();
            break;
        case 7:
            this->message_20_bangval_bang();
            break;
        case 8:
            this->button_04_bangval_bang();
            break;
        case 9:
            this->message_21_bangval_bang();
            break;
        case 10:
            this->button_05_bangval_bang();
            break;
        case 11:
            this->button_06_bangval_bang();
            break;
        case 12:
            this->message_22_bangval_bang();
            break;
        case 13:
            this->numberobj_33_value_set(v);
            break;
        case 14:
            this->message_23_bangval_bang();
            break;
        case 15:
            this->button_07_bangval_bang();
            break;
        case 16:
            this->button_08_bangval_bang();
            break;
        case 17:
            this->message_24_bangval_bang();
            break;
        case 18:
            this->numberobj_34_value_set(v);
            break;
        case 19:
            this->message_25_bangval_bang();
            break;
        case 20:
            this->button_09_bangval_bang();
            break;
        case 21:
            this->button_10_bangval_bang();
            break;
        case 22:
            this->message_26_bangval_bang();
            break;
        case 23:
            this->numberobj_35_value_set(v);
            break;
        case 24:
            this->message_27_bangval_bang();
            break;
        case 25:
            this->button_11_bangval_bang();
            break;
        case 26:
            this->message_28_bangval_bang();
            break;
        case 27:
            this->numberobj_36_value_set(v);
            break;
        case 28:
            this->message_29_bangval_bang();
            break;
        case 29:
            this->numberobj_37_value_set(v);
            break;
        case 30:
            this->button_12_bangval_bang();
            break;
        case 31:
            this->message_30_bangval_bang();
            break;
        case 32:
            this->message_31_bangval_bang();
            break;
        case 33:
            this->button_13_bangval_bang();
            break;
        case 34:
            this->message_32_bangval_bang();
            break;
        case 35:
            this->numberobj_38_value_set(v);
            break;
        case 36:
            this->message_33_bangval_bang();
            break;
        case 37:
            this->button_14_bangval_bang();
            break;
        case 38:
            this->message_34_bangval_bang();
            break;
        case 39:
            this->numberobj_39_value_set(v);
            break;
        case 40:
            this->message_35_bangval_bang();
            break;
        case 41:
            this->button_15_bangval_bang();
            break;
        case 42:
            this->message_36_bangval_bang();
            break;
        case 43:
            this->numberobj_40_value_set(v);
            break;
        case 44:
            this->message_37_bangval_bang();
            break;
        case 45:
            this->button_16_bangval_bang();
            break;
        case 46:
            this->message_38_bangval_bang();
            break;
        case 47:
            this->numberobj_41_value_set(v);
            break;
        case 48:
            this->message_39_bangval_bang();
            break;
        case 49:
            this->button_17_bangval_bang();
            break;
        case 50:
            this->message_40_bangval_bang();
            break;
        case 51:
            this->numberobj_42_value_set(v);
            break;
        case 52:
            this->message_41_bangval_bang();
            break;
        case 53:
            this->button_18_bangval_bang();
            break;
        case 54:
            this->message_42_bangval_bang();
            break;
        case 55:
            this->numberobj_43_value_set(v);
            break;
        case 56:
            this->message_43_bangval_bang();
            break;
        case 57:
            this->numberobj_44_value_set(v);
            break;
        case 58:
            this->button_19_bangval_bang();
            break;
        case 59:
            this->message_44_bangval_bang();
            break;
        case 60:
            this->message_45_bangval_bang();
            break;
        case 61:
            this->button_20_bangval_bang();
            break;
        case 62:
            this->message_46_bangval_bang();
            break;
        case 63:
            this->numberobj_45_value_set(v);
            break;
        case 64:
            this->message_47_bangval_bang();
            break;
        case 65:
            this->button_21_bangval_bang();
            break;
        case 66:
            this->message_48_bangval_bang();
            break;
        case 67:
            this->numberobj_46_value_set(v);
            break;
        case 68:
            this->message_49_bangval_bang();
            break;
        default:
            index -= 69;
    
            if (index < this->p_11->getNumParameters())
                this->p_11->setParameterValue(index, v, time);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                this->p_12->setParameterValue(index, v, time);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                this->p_13->setParameterValue(index, v, time);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                this->p_14->setParameterValue(index, v, time);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                this->p_15->setParameterValue(index, v, time);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                this->p_16->setParameterValue(index, v, time);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                this->p_17->setParameterValue(index, v, time);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                this->p_18->setParameterValue(index, v, time);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                this->p_19->setParameterValue(index, v, time);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                this->p_20->setParameterValue(index, v, time);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                this->p_21->setParameterValue(index, v, time);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                this->p_22->setParameterValue(index, v, time);
    
            index -= this->p_22->getNumParameters();
    
            if (index < this->p_23->getNumParameters())
                this->p_23->setParameterValue(index, v, time);
    
            index -= this->p_23->getNumParameters();
    
            if (index < this->p_24->getNumParameters())
                this->p_24->setParameterValue(index, v, time);
    
            index -= this->p_24->getNumParameters();
    
            if (index < this->p_25->getNumParameters())
                this->p_25->setParameterValue(index, v, time);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                this->p_26->setParameterValue(index, v, time);
    
            break;
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 1:
            return this->numberobj_31_value;
        case 5:
            return this->numberobj_32_value;
        case 13:
            return this->numberobj_33_value;
        case 18:
            return this->numberobj_34_value;
        case 23:
            return this->numberobj_35_value;
        case 27:
            return this->numberobj_36_value;
        case 29:
            return this->numberobj_37_value;
        case 35:
            return this->numberobj_38_value;
        case 39:
            return this->numberobj_39_value;
        case 43:
            return this->numberobj_40_value;
        case 47:
            return this->numberobj_41_value;
        case 51:
            return this->numberobj_42_value;
        case 55:
            return this->numberobj_43_value;
        case 57:
            return this->numberobj_44_value;
        case 63:
            return this->numberobj_45_value;
        case 67:
            return this->numberobj_46_value;
        default:
            index -= 69;
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterValue(index);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterValue(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterValue(index);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->getParameterValue(index);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->getParameterValue(index);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterValue(index);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->getParameterValue(index);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->getParameterValue(index);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->getParameterValue(index);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->getParameterValue(index);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->getParameterValue(index);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->getParameterValue(index);
    
            index -= this->p_22->getNumParameters();
    
            if (index < this->p_23->getNumParameters())
                return this->p_23->getParameterValue(index);
    
            index -= this->p_23->getNumParameters();
    
            if (index < this->p_24->getNumParameters())
                return this->p_24->getParameterValue(index);
    
            index -= this->p_24->getNumParameters();
    
            if (index < this->p_25->getNumParameters())
                return this->p_25->getParameterValue(index);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->getParameterValue(index);
    
            return 0;
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters() + this->p_22->getNumParameters() + this->p_23->getNumParameters() + this->p_24->getNumParameters() + this->p_25->getNumParameters() + this->p_26->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "message_17_bangval";
        case 1:
            return "numberobj_31_value";
        case 2:
            return "button_02_bangval";
        case 3:
            return "message_18_bangval";
        case 4:
            return "message_19_bangval";
        case 5:
            return "numberobj_32_value";
        case 6:
            return "button_03_bangval";
        case 7:
            return "message_20_bangval";
        case 8:
            return "button_04_bangval";
        case 9:
            return "message_21_bangval";
        case 10:
            return "button_05_bangval";
        case 11:
            return "button_06_bangval";
        case 12:
            return "message_22_bangval";
        case 13:
            return "numberobj_33_value";
        case 14:
            return "message_23_bangval";
        case 15:
            return "button_07_bangval";
        case 16:
            return "button_08_bangval";
        case 17:
            return "message_24_bangval";
        case 18:
            return "numberobj_34_value";
        case 19:
            return "message_25_bangval";
        case 20:
            return "button_09_bangval";
        case 21:
            return "button_10_bangval";
        case 22:
            return "message_26_bangval";
        case 23:
            return "numberobj_35_value";
        case 24:
            return "message_27_bangval";
        case 25:
            return "button_11_bangval";
        case 26:
            return "message_28_bangval";
        case 27:
            return "numberobj_36_value";
        case 28:
            return "message_29_bangval";
        case 29:
            return "numberobj_37_value";
        case 30:
            return "button_12_bangval";
        case 31:
            return "message_30_bangval";
        case 32:
            return "message_31_bangval";
        case 33:
            return "button_13_bangval";
        case 34:
            return "message_32_bangval";
        case 35:
            return "numberobj_38_value";
        case 36:
            return "message_33_bangval";
        case 37:
            return "button_14_bangval";
        case 38:
            return "message_34_bangval";
        case 39:
            return "numberobj_39_value";
        case 40:
            return "message_35_bangval";
        case 41:
            return "button_15_bangval";
        case 42:
            return "message_36_bangval";
        case 43:
            return "numberobj_40_value";
        case 44:
            return "message_37_bangval";
        case 45:
            return "button_16_bangval";
        case 46:
            return "message_38_bangval";
        case 47:
            return "numberobj_41_value";
        case 48:
            return "message_39_bangval";
        case 49:
            return "button_17_bangval";
        case 50:
            return "message_40_bangval";
        case 51:
            return "numberobj_42_value";
        case 52:
            return "message_41_bangval";
        case 53:
            return "button_18_bangval";
        case 54:
            return "message_42_bangval";
        case 55:
            return "numberobj_43_value";
        case 56:
            return "message_43_bangval";
        case 57:
            return "numberobj_44_value";
        case 58:
            return "button_19_bangval";
        case 59:
            return "message_44_bangval";
        case 60:
            return "message_45_bangval";
        case 61:
            return "button_20_bangval";
        case 62:
            return "message_46_bangval";
        case 63:
            return "numberobj_45_value";
        case 64:
            return "message_47_bangval";
        case 65:
            return "button_21_bangval";
        case 66:
            return "message_48_bangval";
        case 67:
            return "numberobj_46_value";
        case 68:
            return "message_49_bangval";
        default:
            index -= 69;
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterName(index);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterName(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterName(index);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->getParameterName(index);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->getParameterName(index);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterName(index);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->getParameterName(index);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->getParameterName(index);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->getParameterName(index);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->getParameterName(index);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->getParameterName(index);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->getParameterName(index);
    
            index -= this->p_22->getNumParameters();
    
            if (index < this->p_23->getNumParameters())
                return this->p_23->getParameterName(index);
    
            index -= this->p_23->getNumParameters();
    
            if (index < this->p_24->getNumParameters())
                return this->p_24->getParameterName(index);
    
            index -= this->p_24->getNumParameters();
    
            if (index < this->p_25->getNumParameters())
                return this->p_25->getParameterName(index);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->getParameterName(index);
    
            return "bogus";
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            return "p_obj-193/message_obj-133/bangval";
        case 1:
            return "p_obj-193/number_obj-12/value";
        case 2:
            return "p_obj-193/button_obj-123/bangval";
        case 3:
            return "p_obj-193/message_obj-147/bangval";
        case 4:
            return "p_obj-193/message_obj-145/bangval";
        case 5:
            return "p_obj-193/number_obj-16/value";
        case 6:
            return "p_obj-193/button_obj-122/bangval";
        case 7:
            return "p_obj-193/message_obj-181/bangval";
        case 8:
            return "p_obj-193/button_obj-212/bangval";
        case 9:
            return "p_obj-193/message_obj-182/bangval";
        case 10:
            return "p_obj-193/button_obj-214/bangval";
        case 11:
            return "p_obj-193/button_obj-121/bangval";
        case 12:
            return "p_obj-193/message_obj-184/bangval";
        case 13:
            return "p_obj-193/number_obj-18/value";
        case 14:
            return "p_obj-193/message_obj-185/bangval";
        case 15:
            return "p_obj-193/button_obj-216/bangval";
        case 16:
            return "p_obj-193/button_obj-120/bangval";
        case 17:
            return "p_obj-193/message_obj-187/bangval";
        case 18:
            return "p_obj-193/number_obj-79/value";
        case 19:
            return "p_obj-193/message_obj-188/bangval";
        case 20:
            return "p_obj-193/button_obj-218/bangval";
        case 21:
            return "p_obj-193/button_obj-118/bangval";
        case 22:
            return "p_obj-193/message_obj-190/bangval";
        case 23:
            return "p_obj-193/number_obj-103/value";
        case 24:
            return "p_obj-193/message_obj-191/bangval";
        case 25:
            return "p_obj-193/button_obj-117/bangval";
        case 26:
            return "p_obj-193/message_obj-193/bangval";
        case 27:
            return "p_obj-193/number_obj-107/value";
        case 28:
            return "p_obj-193/message_obj-194/bangval";
        case 29:
            return "p_obj-193/number_obj-119/value";
        case 30:
            return "p_obj-193/button_obj-116/bangval";
        case 31:
            return "p_obj-193/message_obj-196/bangval";
        case 32:
            return "p_obj-193/message_obj-197/bangval";
        case 33:
            return "p_obj-193/button_obj-115/bangval";
        case 34:
            return "p_obj-193/message_obj-199/bangval";
        case 35:
            return "p_obj-193/number_obj-125/value";
        case 36:
            return "p_obj-193/message_obj-200/bangval";
        case 37:
            return "p_obj-193/button_obj-114/bangval";
        case 38:
            return "p_obj-193/message_obj-202/bangval";
        case 39:
            return "p_obj-193/number_obj-127/value";
        case 40:
            return "p_obj-193/message_obj-203/bangval";
        case 41:
            return "p_obj-193/button_obj-112/bangval";
        case 42:
            return "p_obj-193/message_obj-205/bangval";
        case 43:
            return "p_obj-193/number_obj-129/value";
        case 44:
            return "p_obj-193/message_obj-206/bangval";
        case 45:
            return "p_obj-193/button_obj-111/bangval";
        case 46:
            return "p_obj-193/message_obj-208/bangval";
        case 47:
            return "p_obj-193/number_obj-131/value";
        case 48:
            return "p_obj-193/message_obj-209/bangval";
        case 49:
            return "p_obj-193/button_obj-110/bangval";
        case 50:
            return "p_obj-193/message_obj-211/bangval";
        case 51:
            return "p_obj-193/number_obj-134/value";
        case 52:
            return "p_obj-193/message_obj-213/bangval";
        case 53:
            return "p_obj-193/button_obj-109/bangval";
        case 54:
            return "p_obj-193/message_obj-217/bangval";
        case 55:
            return "p_obj-193/number_obj-136/value";
        case 56:
            return "p_obj-193/message_obj-219/bangval";
        case 57:
            return "p_obj-193/number_obj-138/value";
        case 58:
            return "p_obj-193/button_obj-108/bangval";
        case 59:
            return "p_obj-193/message_obj-221/bangval";
        case 60:
            return "p_obj-193/message_obj-222/bangval";
        case 61:
            return "p_obj-193/button_obj-106/bangval";
        case 62:
            return "p_obj-193/message_obj-224/bangval";
        case 63:
            return "p_obj-193/number_obj-140/value";
        case 64:
            return "p_obj-193/message_obj-225/bangval";
        case 65:
            return "p_obj-193/button_obj-105/bangval";
        case 66:
            return "p_obj-193/message_obj-227/bangval";
        case 67:
            return "p_obj-193/number_obj-142/value";
        case 68:
            return "p_obj-193/message_obj-228/bangval";
        default:
            index -= 69;
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterId(index);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterId(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterId(index);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->getParameterId(index);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->getParameterId(index);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterId(index);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->getParameterId(index);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->getParameterId(index);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->getParameterId(index);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->getParameterId(index);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->getParameterId(index);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->getParameterId(index);
    
            index -= this->p_22->getNumParameters();
    
            if (index < this->p_23->getNumParameters())
                return this->p_23->getParameterId(index);
    
            index -= this->p_23->getNumParameters();
    
            if (index < this->p_24->getNumParameters())
                return this->p_24->getParameterId(index);
    
            index -= this->p_24->getNumParameters();
    
            if (index < this->p_25->getNumParameters())
                return this->p_25->getParameterId(index);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->getParameterId(index);
    
            return "bogus";
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 1:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 2:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 3:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 4:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 5:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 6:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 7:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 8:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 9:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 10:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 11:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 12:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 13:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 14:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 15:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 16:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 17:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 18:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 19:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 20:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 21:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 22:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 23:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 24:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 25:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 26:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 27:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 28:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 29:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 30:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 31:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 32:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 33:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 34:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 35:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 36:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 37:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 38:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 39:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 40:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 41:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 42:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 43:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 44:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 45:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 46:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 47:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 48:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 49:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 50:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 51:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 52:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 53:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 54:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 55:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 56:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 57:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 58:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 59:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 60:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 61:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 62:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 63:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 64:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 65:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 66:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 67:
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            case 68:
                info->type = ParameterTypeBang;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = false;
                info->visible = false;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
            default:
                index -= 69;
    
                if (index < this->p_11->getNumParameters())
                    this->p_11->getParameterInfo(index, info);
    
                index -= this->p_11->getNumParameters();
    
                if (index < this->p_12->getNumParameters())
                    this->p_12->getParameterInfo(index, info);
    
                index -= this->p_12->getNumParameters();
    
                if (index < this->p_13->getNumParameters())
                    this->p_13->getParameterInfo(index, info);
    
                index -= this->p_13->getNumParameters();
    
                if (index < this->p_14->getNumParameters())
                    this->p_14->getParameterInfo(index, info);
    
                index -= this->p_14->getNumParameters();
    
                if (index < this->p_15->getNumParameters())
                    this->p_15->getParameterInfo(index, info);
    
                index -= this->p_15->getNumParameters();
    
                if (index < this->p_16->getNumParameters())
                    this->p_16->getParameterInfo(index, info);
    
                index -= this->p_16->getNumParameters();
    
                if (index < this->p_17->getNumParameters())
                    this->p_17->getParameterInfo(index, info);
    
                index -= this->p_17->getNumParameters();
    
                if (index < this->p_18->getNumParameters())
                    this->p_18->getParameterInfo(index, info);
    
                index -= this->p_18->getNumParameters();
    
                if (index < this->p_19->getNumParameters())
                    this->p_19->getParameterInfo(index, info);
    
                index -= this->p_19->getNumParameters();
    
                if (index < this->p_20->getNumParameters())
                    this->p_20->getParameterInfo(index, info);
    
                index -= this->p_20->getNumParameters();
    
                if (index < this->p_21->getNumParameters())
                    this->p_21->getParameterInfo(index, info);
    
                index -= this->p_21->getNumParameters();
    
                if (index < this->p_22->getNumParameters())
                    this->p_22->getParameterInfo(index, info);
    
                index -= this->p_22->getNumParameters();
    
                if (index < this->p_23->getNumParameters())
                    this->p_23->getParameterInfo(index, info);
    
                index -= this->p_23->getNumParameters();
    
                if (index < this->p_24->getNumParameters())
                    this->p_24->getParameterInfo(index, info);
    
                index -= this->p_24->getNumParameters();
    
                if (index < this->p_25->getNumParameters())
                    this->p_25->getParameterInfo(index, info);
    
                index -= this->p_25->getNumParameters();
    
                if (index < this->p_26->getNumParameters())
                    this->p_26->getParameterInfo(index, info);
    
                break;
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_11)
            return 69;
    
        if (subpatcher == this->p_12)
            return 69 + this->p_11->getNumParameters();
    
        if (subpatcher == this->p_13)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters();
    
        if (subpatcher == this->p_14)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters();
    
        if (subpatcher == this->p_15)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters();
    
        if (subpatcher == this->p_16)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters();
    
        if (subpatcher == this->p_17)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters();
    
        if (subpatcher == this->p_18)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters();
    
        if (subpatcher == this->p_19)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters();
    
        if (subpatcher == this->p_20)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters();
    
        if (subpatcher == this->p_21)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters();
    
        if (subpatcher == this->p_22)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters();
    
        if (subpatcher == this->p_23)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters() + this->p_22->getNumParameters();
    
        if (subpatcher == this->p_24)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters() + this->p_22->getNumParameters() + this->p_23->getNumParameters();
    
        if (subpatcher == this->p_25)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters() + this->p_22->getNumParameters() + this->p_23->getNumParameters() + this->p_24->getNumParameters();
    
        if (subpatcher == this->p_26)
            return 69 + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters() + this->p_22->getNumParameters() + this->p_23->getNumParameters() + this->p_24->getNumParameters() + this->p_25->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 1:
        case 5:
        case 13:
        case 18:
        case 23:
        case 27:
        case 29:
        case 35:
        case 39:
        case 43:
        case 47:
        case 51:
        case 55:
        case 57:
        case 63:
        case 67:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0) / (1 - 0);
                return normalizedValue;
            }
        default:
            index -= 69;
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_22->getNumParameters();
    
            if (index < this->p_23->getNumParameters())
                return this->p_23->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_23->getNumParameters();
    
            if (index < this->p_24->getNumParameters())
                return this->p_24->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_24->getNumParameters();
    
            if (index < this->p_25->getNumParameters())
                return this->p_25->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->convertToNormalizedParameterValue(index, value);
    
            return value;
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 1:
        case 5:
        case 13:
        case 18:
        case 23:
        case 27:
        case 29:
        case 35:
        case 39:
        case 43:
        case 47:
        case 51:
        case 55:
        case 57:
        case 63:
        case 67:
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
                {
                    return 0 + value * (1 - 0);
                }
            }
        default:
            index -= 69;
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_22->getNumParameters();
    
            if (index < this->p_23->getNumParameters())
                return this->p_23->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_23->getNumParameters();
    
            if (index < this->p_24->getNumParameters())
                return this->p_24->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_24->getNumParameters();
    
            if (index < this->p_25->getNumParameters())
                return this->p_25->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->convertFromNormalizedParameterValue(index, value);
    
            return value;
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            index -= 69;
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->constrainParameterValue(index, value);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->constrainParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->constrainParameterValue(index, value);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->constrainParameterValue(index, value);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->constrainParameterValue(index, value);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->constrainParameterValue(index, value);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->constrainParameterValue(index, value);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->constrainParameterValue(index, value);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->constrainParameterValue(index, value);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->constrainParameterValue(index, value);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->constrainParameterValue(index, value);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->constrainParameterValue(index, value);
    
            index -= this->p_22->getNumParameters();
    
            if (index < this->p_23->getNumParameters())
                return this->p_23->constrainParameterValue(index, value);
    
            index -= this->p_23->getNumParameters();
    
            if (index < this->p_24->getNumParameters())
                return this->p_24->constrainParameterValue(index, value);
    
            index -= this->p_24->getNumParameters();
    
            if (index < this->p_25->getNumParameters())
                return this->p_25->constrainParameterValue(index, value);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->constrainParameterValue(index, value);
    
            return value;
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("format"):
            if (TAG("p_obj-193/number_obj-12") == objectId)
                this->numberobj_31_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-16") == objectId)
                this->numberobj_32_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-18") == objectId)
                this->numberobj_33_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-79") == objectId)
                this->numberobj_34_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-103") == objectId)
                this->numberobj_35_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-107") == objectId)
                this->numberobj_36_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-119") == objectId)
                this->numberobj_37_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-125") == objectId)
                this->numberobj_38_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-127") == objectId)
                this->numberobj_39_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-129") == objectId)
                this->numberobj_40_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-131") == objectId)
                this->numberobj_41_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-134") == objectId)
                this->numberobj_42_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-136") == objectId)
                this->numberobj_43_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-138") == objectId)
                this->numberobj_44_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-140") == objectId)
                this->numberobj_45_format_set(payload);
    
            if (TAG("p_obj-193/number_obj-142") == objectId)
                this->numberobj_46_format_set(payload);
    
            break;
        }
    
        this->p_11->processNumMessage(tag, objectId, time, payload);
        this->p_12->processNumMessage(tag, objectId, time, payload);
        this->p_13->processNumMessage(tag, objectId, time, payload);
        this->p_14->processNumMessage(tag, objectId, time, payload);
        this->p_15->processNumMessage(tag, objectId, time, payload);
        this->p_16->processNumMessage(tag, objectId, time, payload);
        this->p_17->processNumMessage(tag, objectId, time, payload);
        this->p_18->processNumMessage(tag, objectId, time, payload);
        this->p_19->processNumMessage(tag, objectId, time, payload);
        this->p_20->processNumMessage(tag, objectId, time, payload);
        this->p_21->processNumMessage(tag, objectId, time, payload);
        this->p_22->processNumMessage(tag, objectId, time, payload);
        this->p_23->processNumMessage(tag, objectId, time, payload);
        this->p_24->processNumMessage(tag, objectId, time, payload);
        this->p_25->processNumMessage(tag, objectId, time, payload);
        this->p_26->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_11->processListMessage(tag, objectId, time, payload);
        this->p_12->processListMessage(tag, objectId, time, payload);
        this->p_13->processListMessage(tag, objectId, time, payload);
        this->p_14->processListMessage(tag, objectId, time, payload);
        this->p_15->processListMessage(tag, objectId, time, payload);
        this->p_16->processListMessage(tag, objectId, time, payload);
        this->p_17->processListMessage(tag, objectId, time, payload);
        this->p_18->processListMessage(tag, objectId, time, payload);
        this->p_19->processListMessage(tag, objectId, time, payload);
        this->p_20->processListMessage(tag, objectId, time, payload);
        this->p_21->processListMessage(tag, objectId, time, payload);
        this->p_22->processListMessage(tag, objectId, time, payload);
        this->p_23->processListMessage(tag, objectId, time, payload);
        this->p_24->processListMessage(tag, objectId, time, payload);
        this->p_25->processListMessage(tag, objectId, time, payload);
        this->p_26->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_11->processBangMessage(tag, objectId, time);
        this->p_12->processBangMessage(tag, objectId, time);
        this->p_13->processBangMessage(tag, objectId, time);
        this->p_14->processBangMessage(tag, objectId, time);
        this->p_15->processBangMessage(tag, objectId, time);
        this->p_16->processBangMessage(tag, objectId, time);
        this->p_17->processBangMessage(tag, objectId, time);
        this->p_18->processBangMessage(tag, objectId, time);
        this->p_19->processBangMessage(tag, objectId, time);
        this->p_20->processBangMessage(tag, objectId, time);
        this->p_21->processBangMessage(tag, objectId, time);
        this->p_22->processBangMessage(tag, objectId, time);
        this->p_23->processBangMessage(tag, objectId, time);
        this->p_24->processBangMessage(tag, objectId, time);
        this->p_25->processBangMessage(tag, objectId, time);
        this->p_26->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("setup"):
            return "setup";
        case TAG("p_obj-193/number_obj-12"):
            return "p_obj-193/number_obj-12";
        case TAG("p_obj-193/number_obj-16"):
            return "p_obj-193/number_obj-16";
        case TAG("p_obj-193/number_obj-18"):
            return "p_obj-193/number_obj-18";
        case TAG("p_obj-193/number_obj-79"):
            return "p_obj-193/number_obj-79";
        case TAG("p_obj-193/number_obj-103"):
            return "p_obj-193/number_obj-103";
        case TAG("p_obj-193/number_obj-107"):
            return "p_obj-193/number_obj-107";
        case TAG("p_obj-193/number_obj-119"):
            return "p_obj-193/number_obj-119";
        case TAG("p_obj-193/number_obj-125"):
            return "p_obj-193/number_obj-125";
        case TAG("p_obj-193/number_obj-127"):
            return "p_obj-193/number_obj-127";
        case TAG("p_obj-193/number_obj-129"):
            return "p_obj-193/number_obj-129";
        case TAG("p_obj-193/number_obj-131"):
            return "p_obj-193/number_obj-131";
        case TAG("p_obj-193/number_obj-134"):
            return "p_obj-193/number_obj-134";
        case TAG("p_obj-193/number_obj-136"):
            return "p_obj-193/number_obj-136";
        case TAG("p_obj-193/number_obj-138"):
            return "p_obj-193/number_obj-138";
        case TAG("p_obj-193/number_obj-140"):
            return "p_obj-193/number_obj-140";
        case TAG("p_obj-193/number_obj-142"):
            return "p_obj-193/number_obj-142";
        case TAG("format"):
            return "format";
        }
    
        auto subpatchResult_0 = this->p_11->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_12->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_13->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        auto subpatchResult_3 = this->p_14->resolveTag(tag);
    
        if (subpatchResult_3)
            return subpatchResult_3;
    
        auto subpatchResult_4 = this->p_15->resolveTag(tag);
    
        if (subpatchResult_4)
            return subpatchResult_4;
    
        auto subpatchResult_5 = this->p_16->resolveTag(tag);
    
        if (subpatchResult_5)
            return subpatchResult_5;
    
        auto subpatchResult_6 = this->p_17->resolveTag(tag);
    
        if (subpatchResult_6)
            return subpatchResult_6;
    
        auto subpatchResult_7 = this->p_18->resolveTag(tag);
    
        if (subpatchResult_7)
            return subpatchResult_7;
    
        auto subpatchResult_8 = this->p_19->resolveTag(tag);
    
        if (subpatchResult_8)
            return subpatchResult_8;
    
        auto subpatchResult_9 = this->p_20->resolveTag(tag);
    
        if (subpatchResult_9)
            return subpatchResult_9;
    
        auto subpatchResult_10 = this->p_21->resolveTag(tag);
    
        if (subpatchResult_10)
            return subpatchResult_10;
    
        auto subpatchResult_11 = this->p_22->resolveTag(tag);
    
        if (subpatchResult_11)
            return subpatchResult_11;
    
        auto subpatchResult_12 = this->p_23->resolveTag(tag);
    
        if (subpatchResult_12)
            return subpatchResult_12;
    
        auto subpatchResult_13 = this->p_24->resolveTag(tag);
    
        if (subpatchResult_13)
            return subpatchResult_13;
    
        auto subpatchResult_14 = this->p_25->resolveTag(tag);
    
        if (subpatchResult_14)
            return subpatchResult_14;
    
        auto subpatchResult_15 = this->p_26->resolveTag(tag);
    
        if (subpatchResult_15)
            return subpatchResult_15;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            return nullptr;
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->p_11->processDataViewUpdate(index, time);
        this->p_12->processDataViewUpdate(index, time);
        this->p_13->processDataViewUpdate(index, time);
        this->p_14->processDataViewUpdate(index, time);
        this->p_15->processDataViewUpdate(index, time);
        this->p_16->processDataViewUpdate(index, time);
        this->p_17->processDataViewUpdate(index, time);
        this->p_18->processDataViewUpdate(index, time);
        this->p_19->processDataViewUpdate(index, time);
        this->p_20->processDataViewUpdate(index, time);
        this->p_21->processDataViewUpdate(index, time);
        this->p_22->processDataViewUpdate(index, time);
        this->p_23->processDataViewUpdate(index, time);
        this->p_24->processDataViewUpdate(index, time);
        this->p_25->processDataViewUpdate(index, time);
        this->p_26->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void message_17_bangval_bang() {
        this->sendParameter(0, true);
        this->message_17_out_set({0});
    }
    
    void numberobj_31_format_set(number v) {
        if (v == 0) {
            this->numberobj_31_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_31_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_31_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_31_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_31_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_31_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_31_currentFormat = 6;
        }
    }
    
    void numberobj_32_format_set(number v) {
        if (v == 0) {
            this->numberobj_32_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_32_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_32_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_32_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_32_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_32_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_32_currentFormat = 6;
        }
    }
    
    void numberobj_33_format_set(number v) {
        if (v == 0) {
            this->numberobj_33_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_33_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_33_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_33_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_33_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_33_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_33_currentFormat = 6;
        }
    }
    
    void numberobj_34_format_set(number v) {
        if (v == 0) {
            this->numberobj_34_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_34_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_34_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_34_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_34_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_34_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_34_currentFormat = 6;
        }
    }
    
    void numberobj_35_format_set(number v) {
        if (v == 0) {
            this->numberobj_35_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_35_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_35_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_35_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_35_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_35_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_35_currentFormat = 6;
        }
    }
    
    void numberobj_36_format_set(number v) {
        if (v == 0) {
            this->numberobj_36_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_36_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_36_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_36_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_36_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_36_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_36_currentFormat = 6;
        }
    }
    
    void numberobj_37_format_set(number v) {
        if (v == 0) {
            this->numberobj_37_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_37_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_37_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_37_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_37_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_37_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_37_currentFormat = 6;
        }
    }
    
    void numberobj_38_format_set(number v) {
        if (v == 0) {
            this->numberobj_38_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_38_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_38_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_38_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_38_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_38_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_38_currentFormat = 6;
        }
    }
    
    void numberobj_39_format_set(number v) {
        if (v == 0) {
            this->numberobj_39_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_39_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_39_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_39_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_39_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_39_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_39_currentFormat = 6;
        }
    }
    
    void numberobj_40_format_set(number v) {
        if (v == 0) {
            this->numberobj_40_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_40_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_40_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_40_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_40_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_40_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_40_currentFormat = 6;
        }
    }
    
    void numberobj_41_format_set(number v) {
        if (v == 0) {
            this->numberobj_41_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_41_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_41_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_41_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_41_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_41_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_41_currentFormat = 6;
        }
    }
    
    void numberobj_42_format_set(number v) {
        if (v == 0) {
            this->numberobj_42_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_42_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_42_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_42_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_42_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_42_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_42_currentFormat = 6;
        }
    }
    
    void numberobj_43_format_set(number v) {
        if (v == 0) {
            this->numberobj_43_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_43_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_43_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_43_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_43_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_43_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_43_currentFormat = 6;
        }
    }
    
    void numberobj_44_format_set(number v) {
        if (v == 0) {
            this->numberobj_44_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_44_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_44_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_44_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_44_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_44_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_44_currentFormat = 6;
        }
    }
    
    void numberobj_45_format_set(number v) {
        if (v == 0) {
            this->numberobj_45_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_45_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_45_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_45_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_45_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_45_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_45_currentFormat = 6;
        }
    }
    
    void numberobj_46_format_set(number v) {
        if (v == 0) {
            this->numberobj_46_currentFormat = 0;
        } else if (v == 1) {
            this->numberobj_46_currentFormat = 1;
        } else if (v == 2) {
            this->numberobj_46_currentFormat = 2;
        } else if (v == 3) {
            this->numberobj_46_currentFormat = 3;
        } else if (v == 4) {
            this->numberobj_46_currentFormat = 4;
        } else if (v == 5) {
            this->numberobj_46_currentFormat = 5;
        } else if (v == 6) {
            this->numberobj_46_currentFormat = 6;
        }
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->numberobj_31_init();
        this->numberobj_32_init();
        this->numberobj_33_init();
        this->numberobj_34_init();
        this->numberobj_35_init();
        this->numberobj_36_init();
        this->numberobj_37_init();
        this->numberobj_38_init();
        this->numberobj_39_init();
        this->numberobj_40_init();
        this->numberobj_41_init();
        this->numberobj_42_init();
        this->numberobj_43_init();
        this->numberobj_44_init();
        this->numberobj_45_init();
        this->numberobj_46_init();
        this->p_11->initializeObjects();
        this->p_12->initializeObjects();
        this->p_13->initializeObjects();
        this->p_14->initializeObjects();
        this->p_15->initializeObjects();
        this->p_16->initializeObjects();
        this->p_17->initializeObjects();
        this->p_18->initializeObjects();
        this->p_19->initializeObjects();
        this->p_20->initializeObjects();
        this->p_21->initializeObjects();
        this->p_22->initializeObjects();
        this->p_23->initializeObjects();
        this->p_24->initializeObjects();
        this->p_25->initializeObjects();
        this->p_26->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_11->startup();
        this->p_12->startup();
        this->p_13->startup();
        this->p_14->startup();
        this->p_15->startup();
        this->p_16->startup();
        this->p_17->startup();
        this->p_18->startup();
        this->p_19->startup();
        this->p_20->startup();
        this->p_21->startup();
        this->p_22->startup();
        this->p_23->startup();
        this->p_24->startup();
        this->p_25->startup();
        this->p_26->startup();
    }
    
    void allocateDataRefs() {
        this->p_11->allocateDataRefs();
        this->p_12->allocateDataRefs();
        this->p_13->allocateDataRefs();
        this->p_14->allocateDataRefs();
        this->p_15->allocateDataRefs();
        this->p_16->allocateDataRefs();
        this->p_17->allocateDataRefs();
        this->p_18->allocateDataRefs();
        this->p_19->allocateDataRefs();
        this->p_20->allocateDataRefs();
        this->p_21->allocateDataRefs();
        this->p_22->allocateDataRefs();
        this->p_23->allocateDataRefs();
        this->p_24->allocateDataRefs();
        this->p_25->allocateDataRefs();
        this->p_26->allocateDataRefs();
    }
    
    void print_07_input_bang_bang() {
        {
            console->log("unknown", "bang");
        }
    }
    
    void route_69_nomatch_bang_bang() {
        this->print_07_input_bang_bang();
    }
    
    void route_69_input_bang_bang() {
        this->route_69_nomatch_bang_bang();
    }
    
    void eventinlet_37_out1_bang_bang() {
        this->route_69_input_bang_bang();
    }
    
    void gate_24_onoff_set(number v) {
        this->gate_24_onoff = v;
    }
    
    void eventoutlet_72_in1_bang_bang() {
        ;
        this->getPatcher()->p_33_out4_bang_bang();
    }
    
    void button_09_bangval_bang() {
        this->sendParameter(20, true);
        this->eventoutlet_72_in1_bang_bang();
    }
    
    void receive_24_output_bang_bang() {
        this->button_09_bangval_bang();
    }
    
    void send_61_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_26_out4_bang_bang() {
        this->send_61_input_bang_bang();
    }
    
    void receive_24_output_number_set(number v) {
        this->receive_24_output_number = v;
        this->button_09_bangval_bang();
    }
    
    void send_61_input_number_set(number v) {
        this->send_61_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_26_out4_number_set(number v) {
        this->send_61_input_number_set(v);
    }
    
    void receive_24_output_list_set(const list& v) {
        this->receive_24_output_list = jsCreateListCopy(v);
        this->button_09_bangval_bang();
    }
    
    void send_61_input_list_set(const list& v) {
        this->send_61_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_26_out4_list_set(const list& v) {
        this->send_61_input_list_set(v);
    }
    
    void eventoutlet_71_in1_bang_bang() {
        ;
        this->getPatcher()->p_33_out3_bang_bang();
    }
    
    void button_07_bangval_bang() {
        this->sendParameter(15, true);
        this->eventoutlet_71_in1_bang_bang();
    }
    
    void receive_22_output_bang_bang() {
        this->button_07_bangval_bang();
    }
    
    void send_62_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_26_out3_bang_bang() {
        this->send_62_input_bang_bang();
    }
    
    void receive_22_output_number_set(number v) {
        this->receive_22_output_number = v;
        this->button_07_bangval_bang();
    }
    
    void send_62_input_number_set(number v) {
        this->send_62_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_26_out3_number_set(number v) {
        this->send_62_input_number_set(v);
    }
    
    void receive_22_output_list_set(const list& v) {
        this->receive_22_output_list = jsCreateListCopy(v);
        this->button_07_bangval_bang();
    }
    
    void send_62_input_list_set(const list& v) {
        this->send_62_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_26_out3_list_set(const list& v) {
        this->send_62_input_list_set(v);
    }
    
    void eventoutlet_70_in1_bang_bang() {
        ;
        this->getPatcher()->p_33_out2_bang_bang();
    }
    
    void button_05_bangval_bang() {
        this->sendParameter(10, true);
        this->eventoutlet_70_in1_bang_bang();
    }
    
    void receive_20_output_bang_bang() {
        this->button_05_bangval_bang();
    }
    
    void send_63_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_26_out2_bang_bang() {
        this->send_63_input_bang_bang();
    }
    
    void receive_20_output_number_set(number v) {
        this->receive_20_output_number = v;
        this->button_05_bangval_bang();
    }
    
    void send_63_input_number_set(number v) {
        this->send_63_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_26_out2_number_set(number v) {
        this->send_63_input_number_set(v);
    }
    
    void receive_20_output_list_set(const list& v) {
        this->receive_20_output_list = jsCreateListCopy(v);
        this->button_05_bangval_bang();
    }
    
    void send_63_input_list_set(const list& v) {
        this->send_63_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_26_out2_list_set(const list& v) {
        this->send_63_input_list_set(v);
    }
    
    void eventoutlet_69_in1_bang_bang() {
        ;
        this->getPatcher()->p_33_out1_bang_bang();
    }
    
    void button_04_bangval_bang() {
        this->sendParameter(8, true);
        this->eventoutlet_69_in1_bang_bang();
    }
    
    void receive_18_output_bang_bang() {
        this->button_04_bangval_bang();
    }
    
    void send_64_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_26_out1_bang_bang() {
        this->send_64_input_bang_bang();
    }
    
    void receive_18_output_number_set(number v) {
        this->receive_18_output_number = v;
        this->button_04_bangval_bang();
    }
    
    void send_64_input_number_set(number v) {
        this->send_64_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_26_out1_number_set(number v) {
        this->send_64_input_number_set(v);
    }
    
    void receive_18_output_list_set(const list& v) {
        this->receive_18_output_list = jsCreateListCopy(v);
        this->button_04_bangval_bang();
    }
    
    void send_64_input_list_set(const list& v) {
        this->send_64_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_26_out1_list_set(const list& v) {
        this->send_64_input_list_set(v);
    }
    
    void p_26_in1_number_set(number v) {
        this->p_26->updateTime(this->_currentTime);
        this->p_26->eventinlet_36_out1_number_set(v);
    }
    
    void gate_24_out1_number_set(number v) {
        this->gate_24_out1_number = v;
        this->p_26_in1_number_set(v);
    }
    
    void gate_24_input_number_set(number v) {
        if (this->gate_24_onoff == 1)
            this->gate_24_out1_number_set(v);
    }
    
    void message_48_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_24_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_24_onoff_set(converted);
        }
    }
    
    void message_48_bangval_bang() {
        this->sendParameter(66, true);
        this->message_48_out_set({1});
    }
    
    void numberobj_46_output_set(number v) {
        this->gate_24_input_number_set(v);
    }
    
    void numberobj_46_value_bang() {
        number v = this->numberobj_46_value;
        this->sendParameter(67, false);
        this->numberobj_46_output_set(v);
    }
    
    void button_21_bangval_bang() {
        this->sendParameter(65, true);
        this->message_48_bangval_bang();
        this->numberobj_46_value_bang();
    }
    
    void route_69_match16_bang_bang() {
        this->button_21_bangval_bang();
    }
    
    void route_69_match16_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_21_bangval_bang();
    }
    
    void route_69_match16_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_21_bangval_bang();
    }
    
    void gate_23_onoff_set(number v) {
        this->gate_23_onoff = v;
    }
    
    void send_57_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_25_out4_bang_bang() {
        this->send_57_input_bang_bang();
    }
    
    void send_57_input_number_set(number v) {
        this->send_57_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_25_out4_number_set(number v) {
        this->send_57_input_number_set(v);
    }
    
    void send_57_input_list_set(const list& v) {
        this->send_57_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_25_out4_list_set(const list& v) {
        this->send_57_input_list_set(v);
    }
    
    void send_58_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_25_out3_bang_bang() {
        this->send_58_input_bang_bang();
    }
    
    void send_58_input_number_set(number v) {
        this->send_58_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_25_out3_number_set(number v) {
        this->send_58_input_number_set(v);
    }
    
    void send_58_input_list_set(const list& v) {
        this->send_58_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_25_out3_list_set(const list& v) {
        this->send_58_input_list_set(v);
    }
    
    void send_59_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_25_out2_bang_bang() {
        this->send_59_input_bang_bang();
    }
    
    void send_59_input_number_set(number v) {
        this->send_59_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_25_out2_number_set(number v) {
        this->send_59_input_number_set(v);
    }
    
    void send_59_input_list_set(const list& v) {
        this->send_59_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_25_out2_list_set(const list& v) {
        this->send_59_input_list_set(v);
    }
    
    void send_60_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_25_out1_bang_bang() {
        this->send_60_input_bang_bang();
    }
    
    void send_60_input_number_set(number v) {
        this->send_60_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_25_out1_number_set(number v) {
        this->send_60_input_number_set(v);
    }
    
    void send_60_input_list_set(const list& v) {
        this->send_60_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_25_out1_list_set(const list& v) {
        this->send_60_input_list_set(v);
    }
    
    void p_25_in1_number_set(number v) {
        this->p_25->updateTime(this->_currentTime);
        this->p_25->eventinlet_35_out1_number_set(v);
    }
    
    void gate_23_out1_number_set(number v) {
        this->gate_23_out1_number = v;
        this->p_25_in1_number_set(v);
    }
    
    void gate_23_input_number_set(number v) {
        if (this->gate_23_onoff == 1)
            this->gate_23_out1_number_set(v);
    }
    
    void message_46_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_23_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_23_onoff_set(converted);
        }
    }
    
    void message_46_bangval_bang() {
        this->sendParameter(62, true);
        this->message_46_out_set({1});
    }
    
    void numberobj_45_output_set(number v) {
        this->gate_23_input_number_set(v);
    }
    
    void numberobj_45_value_bang() {
        number v = this->numberobj_45_value;
        this->sendParameter(63, false);
        this->numberobj_45_output_set(v);
    }
    
    void button_20_bangval_bang() {
        this->sendParameter(61, true);
        this->message_46_bangval_bang();
        this->numberobj_45_value_bang();
    }
    
    void route_69_match15_bang_bang() {
        this->button_20_bangval_bang();
    }
    
    void route_69_match15_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_20_bangval_bang();
    }
    
    void route_69_match15_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_20_bangval_bang();
    }
    
    void gate_22_onoff_set(number v) {
        this->gate_22_onoff = v;
    }
    
    void send_53_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_24_out4_bang_bang() {
        this->send_53_input_bang_bang();
    }
    
    void send_53_input_number_set(number v) {
        this->send_53_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_24_out4_number_set(number v) {
        this->send_53_input_number_set(v);
    }
    
    void send_53_input_list_set(const list& v) {
        this->send_53_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_24_out4_list_set(const list& v) {
        this->send_53_input_list_set(v);
    }
    
    void send_54_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_24_out3_bang_bang() {
        this->send_54_input_bang_bang();
    }
    
    void send_54_input_number_set(number v) {
        this->send_54_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_24_out3_number_set(number v) {
        this->send_54_input_number_set(v);
    }
    
    void send_54_input_list_set(const list& v) {
        this->send_54_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_24_out3_list_set(const list& v) {
        this->send_54_input_list_set(v);
    }
    
    void send_55_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_24_out2_bang_bang() {
        this->send_55_input_bang_bang();
    }
    
    void send_55_input_number_set(number v) {
        this->send_55_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_24_out2_number_set(number v) {
        this->send_55_input_number_set(v);
    }
    
    void send_55_input_list_set(const list& v) {
        this->send_55_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_24_out2_list_set(const list& v) {
        this->send_55_input_list_set(v);
    }
    
    void send_56_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_24_out1_bang_bang() {
        this->send_56_input_bang_bang();
    }
    
    void send_56_input_number_set(number v) {
        this->send_56_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_24_out1_number_set(number v) {
        this->send_56_input_number_set(v);
    }
    
    void send_56_input_list_set(const list& v) {
        this->send_56_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_24_out1_list_set(const list& v) {
        this->send_56_input_list_set(v);
    }
    
    void p_24_in1_number_set(number v) {
        this->p_24->updateTime(this->_currentTime);
        this->p_24->eventinlet_34_out1_number_set(v);
    }
    
    void gate_22_out1_number_set(number v) {
        this->gate_22_out1_number = v;
        this->p_24_in1_number_set(v);
    }
    
    void gate_22_input_number_set(number v) {
        if (this->gate_22_onoff == 1)
            this->gate_22_out1_number_set(v);
    }
    
    void message_44_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_22_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_22_onoff_set(converted);
        }
    }
    
    void message_44_bangval_bang() {
        this->sendParameter(59, true);
        this->message_44_out_set({1});
    }
    
    void numberobj_44_output_set(number v) {
        this->gate_22_input_number_set(v);
    }
    
    void numberobj_44_value_bang() {
        number v = this->numberobj_44_value;
        this->sendParameter(57, false);
        this->numberobj_44_output_set(v);
    }
    
    void button_19_bangval_bang() {
        this->sendParameter(58, true);
        this->message_44_bangval_bang();
        this->numberobj_44_value_bang();
    }
    
    void route_69_match14_bang_bang() {
        this->button_19_bangval_bang();
    }
    
    void route_69_match14_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_19_bangval_bang();
    }
    
    void route_69_match14_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_19_bangval_bang();
    }
    
    void gate_21_onoff_set(number v) {
        this->gate_21_onoff = v;
    }
    
    void send_49_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_23_out4_bang_bang() {
        this->send_49_input_bang_bang();
    }
    
    void send_49_input_number_set(number v) {
        this->send_49_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_23_out4_number_set(number v) {
        this->send_49_input_number_set(v);
    }
    
    void send_49_input_list_set(const list& v) {
        this->send_49_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_23_out4_list_set(const list& v) {
        this->send_49_input_list_set(v);
    }
    
    void send_50_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_23_out3_bang_bang() {
        this->send_50_input_bang_bang();
    }
    
    void send_50_input_number_set(number v) {
        this->send_50_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_23_out3_number_set(number v) {
        this->send_50_input_number_set(v);
    }
    
    void send_50_input_list_set(const list& v) {
        this->send_50_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_23_out3_list_set(const list& v) {
        this->send_50_input_list_set(v);
    }
    
    void send_51_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_23_out2_bang_bang() {
        this->send_51_input_bang_bang();
    }
    
    void send_51_input_number_set(number v) {
        this->send_51_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_23_out2_number_set(number v) {
        this->send_51_input_number_set(v);
    }
    
    void send_51_input_list_set(const list& v) {
        this->send_51_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_23_out2_list_set(const list& v) {
        this->send_51_input_list_set(v);
    }
    
    void send_52_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_23_out1_bang_bang() {
        this->send_52_input_bang_bang();
    }
    
    void send_52_input_number_set(number v) {
        this->send_52_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_23_out1_number_set(number v) {
        this->send_52_input_number_set(v);
    }
    
    void send_52_input_list_set(const list& v) {
        this->send_52_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_23_out1_list_set(const list& v) {
        this->send_52_input_list_set(v);
    }
    
    void p_23_in1_number_set(number v) {
        this->p_23->updateTime(this->_currentTime);
        this->p_23->eventinlet_33_out1_number_set(v);
    }
    
    void gate_21_out1_number_set(number v) {
        this->gate_21_out1_number = v;
        this->p_23_in1_number_set(v);
    }
    
    void gate_21_input_number_set(number v) {
        if (this->gate_21_onoff == 1)
            this->gate_21_out1_number_set(v);
    }
    
    void message_42_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_21_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_21_onoff_set(converted);
        }
    }
    
    void message_42_bangval_bang() {
        this->sendParameter(54, true);
        this->message_42_out_set({1});
    }
    
    void numberobj_43_output_set(number v) {
        this->gate_21_input_number_set(v);
    }
    
    void numberobj_43_value_bang() {
        number v = this->numberobj_43_value;
        this->sendParameter(55, false);
        this->numberobj_43_output_set(v);
    }
    
    void button_18_bangval_bang() {
        this->sendParameter(53, true);
        this->message_42_bangval_bang();
        this->numberobj_43_value_bang();
    }
    
    void route_69_match13_bang_bang() {
        this->button_18_bangval_bang();
    }
    
    void route_69_match13_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_18_bangval_bang();
    }
    
    void route_69_match13_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_18_bangval_bang();
    }
    
    void gate_20_onoff_set(number v) {
        this->gate_20_onoff = v;
    }
    
    void send_45_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_22_out4_bang_bang() {
        this->send_45_input_bang_bang();
    }
    
    void send_45_input_number_set(number v) {
        this->send_45_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_22_out4_number_set(number v) {
        this->send_45_input_number_set(v);
    }
    
    void send_45_input_list_set(const list& v) {
        this->send_45_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_22_out4_list_set(const list& v) {
        this->send_45_input_list_set(v);
    }
    
    void send_46_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_22_out3_bang_bang() {
        this->send_46_input_bang_bang();
    }
    
    void send_46_input_number_set(number v) {
        this->send_46_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_22_out3_number_set(number v) {
        this->send_46_input_number_set(v);
    }
    
    void send_46_input_list_set(const list& v) {
        this->send_46_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_22_out3_list_set(const list& v) {
        this->send_46_input_list_set(v);
    }
    
    void send_47_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_22_out2_bang_bang() {
        this->send_47_input_bang_bang();
    }
    
    void send_47_input_number_set(number v) {
        this->send_47_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_22_out2_number_set(number v) {
        this->send_47_input_number_set(v);
    }
    
    void send_47_input_list_set(const list& v) {
        this->send_47_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_22_out2_list_set(const list& v) {
        this->send_47_input_list_set(v);
    }
    
    void send_48_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_22_out1_bang_bang() {
        this->send_48_input_bang_bang();
    }
    
    void send_48_input_number_set(number v) {
        this->send_48_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_22_out1_number_set(number v) {
        this->send_48_input_number_set(v);
    }
    
    void send_48_input_list_set(const list& v) {
        this->send_48_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_22_out1_list_set(const list& v) {
        this->send_48_input_list_set(v);
    }
    
    void p_22_in1_number_set(number v) {
        this->p_22->updateTime(this->_currentTime);
        this->p_22->eventinlet_32_out1_number_set(v);
    }
    
    void gate_20_out1_number_set(number v) {
        this->gate_20_out1_number = v;
        this->p_22_in1_number_set(v);
    }
    
    void gate_20_input_number_set(number v) {
        if (this->gate_20_onoff == 1)
            this->gate_20_out1_number_set(v);
    }
    
    void message_40_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_20_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_20_onoff_set(converted);
        }
    }
    
    void message_40_bangval_bang() {
        this->sendParameter(50, true);
        this->message_40_out_set({1});
    }
    
    void numberobj_42_output_set(number v) {
        this->gate_20_input_number_set(v);
    }
    
    void numberobj_42_value_bang() {
        number v = this->numberobj_42_value;
        this->sendParameter(51, false);
        this->numberobj_42_output_set(v);
    }
    
    void button_17_bangval_bang() {
        this->sendParameter(49, true);
        this->message_40_bangval_bang();
        this->numberobj_42_value_bang();
    }
    
    void route_69_match12_bang_bang() {
        this->button_17_bangval_bang();
    }
    
    void route_69_match12_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_17_bangval_bang();
    }
    
    void route_69_match12_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_17_bangval_bang();
    }
    
    void gate_19_onoff_set(number v) {
        this->gate_19_onoff = v;
    }
    
    void send_41_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_21_out4_bang_bang() {
        this->send_41_input_bang_bang();
    }
    
    void send_41_input_number_set(number v) {
        this->send_41_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_21_out4_number_set(number v) {
        this->send_41_input_number_set(v);
    }
    
    void send_41_input_list_set(const list& v) {
        this->send_41_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_21_out4_list_set(const list& v) {
        this->send_41_input_list_set(v);
    }
    
    void send_42_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_21_out3_bang_bang() {
        this->send_42_input_bang_bang();
    }
    
    void send_42_input_number_set(number v) {
        this->send_42_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_21_out3_number_set(number v) {
        this->send_42_input_number_set(v);
    }
    
    void send_42_input_list_set(const list& v) {
        this->send_42_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_21_out3_list_set(const list& v) {
        this->send_42_input_list_set(v);
    }
    
    void send_43_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_21_out2_bang_bang() {
        this->send_43_input_bang_bang();
    }
    
    void send_43_input_number_set(number v) {
        this->send_43_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_21_out2_number_set(number v) {
        this->send_43_input_number_set(v);
    }
    
    void send_43_input_list_set(const list& v) {
        this->send_43_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_21_out2_list_set(const list& v) {
        this->send_43_input_list_set(v);
    }
    
    void send_44_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_21_out1_bang_bang() {
        this->send_44_input_bang_bang();
    }
    
    void send_44_input_number_set(number v) {
        this->send_44_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_21_out1_number_set(number v) {
        this->send_44_input_number_set(v);
    }
    
    void send_44_input_list_set(const list& v) {
        this->send_44_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_21_out1_list_set(const list& v) {
        this->send_44_input_list_set(v);
    }
    
    void p_21_in1_number_set(number v) {
        this->p_21->updateTime(this->_currentTime);
        this->p_21->eventinlet_31_out1_number_set(v);
    }
    
    void gate_19_out1_number_set(number v) {
        this->gate_19_out1_number = v;
        this->p_21_in1_number_set(v);
    }
    
    void gate_19_input_number_set(number v) {
        if (this->gate_19_onoff == 1)
            this->gate_19_out1_number_set(v);
    }
    
    void message_38_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_19_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_19_onoff_set(converted);
        }
    }
    
    void message_38_bangval_bang() {
        this->sendParameter(46, true);
        this->message_38_out_set({1});
    }
    
    void numberobj_41_output_set(number v) {
        this->gate_19_input_number_set(v);
    }
    
    void numberobj_41_value_bang() {
        number v = this->numberobj_41_value;
        this->sendParameter(47, false);
        this->numberobj_41_output_set(v);
    }
    
    void button_16_bangval_bang() {
        this->sendParameter(45, true);
        this->message_38_bangval_bang();
        this->numberobj_41_value_bang();
    }
    
    void route_69_match11_bang_bang() {
        this->button_16_bangval_bang();
    }
    
    void route_69_match11_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_16_bangval_bang();
    }
    
    void route_69_match11_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_16_bangval_bang();
    }
    
    void gate_18_onoff_set(number v) {
        this->gate_18_onoff = v;
    }
    
    void send_37_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_20_out4_bang_bang() {
        this->send_37_input_bang_bang();
    }
    
    void send_37_input_number_set(number v) {
        this->send_37_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_20_out4_number_set(number v) {
        this->send_37_input_number_set(v);
    }
    
    void send_37_input_list_set(const list& v) {
        this->send_37_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_20_out4_list_set(const list& v) {
        this->send_37_input_list_set(v);
    }
    
    void send_38_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_20_out3_bang_bang() {
        this->send_38_input_bang_bang();
    }
    
    void send_38_input_number_set(number v) {
        this->send_38_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_20_out3_number_set(number v) {
        this->send_38_input_number_set(v);
    }
    
    void send_38_input_list_set(const list& v) {
        this->send_38_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_20_out3_list_set(const list& v) {
        this->send_38_input_list_set(v);
    }
    
    void send_39_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_20_out2_bang_bang() {
        this->send_39_input_bang_bang();
    }
    
    void send_39_input_number_set(number v) {
        this->send_39_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_20_out2_number_set(number v) {
        this->send_39_input_number_set(v);
    }
    
    void send_39_input_list_set(const list& v) {
        this->send_39_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_20_out2_list_set(const list& v) {
        this->send_39_input_list_set(v);
    }
    
    void send_40_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_20_out1_bang_bang() {
        this->send_40_input_bang_bang();
    }
    
    void send_40_input_number_set(number v) {
        this->send_40_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_20_out1_number_set(number v) {
        this->send_40_input_number_set(v);
    }
    
    void send_40_input_list_set(const list& v) {
        this->send_40_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_20_out1_list_set(const list& v) {
        this->send_40_input_list_set(v);
    }
    
    void p_20_in1_number_set(number v) {
        this->p_20->updateTime(this->_currentTime);
        this->p_20->eventinlet_30_out1_number_set(v);
    }
    
    void gate_18_out1_number_set(number v) {
        this->gate_18_out1_number = v;
        this->p_20_in1_number_set(v);
    }
    
    void gate_18_input_number_set(number v) {
        if (this->gate_18_onoff == 1)
            this->gate_18_out1_number_set(v);
    }
    
    void message_36_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_18_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_18_onoff_set(converted);
        }
    }
    
    void message_36_bangval_bang() {
        this->sendParameter(42, true);
        this->message_36_out_set({1});
    }
    
    void numberobj_40_output_set(number v) {
        this->gate_18_input_number_set(v);
    }
    
    void numberobj_40_value_bang() {
        number v = this->numberobj_40_value;
        this->sendParameter(43, false);
        this->numberobj_40_output_set(v);
    }
    
    void button_15_bangval_bang() {
        this->sendParameter(41, true);
        this->message_36_bangval_bang();
        this->numberobj_40_value_bang();
    }
    
    void route_69_match10_bang_bang() {
        this->button_15_bangval_bang();
    }
    
    void route_69_match10_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_15_bangval_bang();
    }
    
    void route_69_match10_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_15_bangval_bang();
    }
    
    void gate_17_onoff_set(number v) {
        this->gate_17_onoff = v;
    }
    
    void send_33_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_19_out4_bang_bang() {
        this->send_33_input_bang_bang();
    }
    
    void send_33_input_number_set(number v) {
        this->send_33_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_19_out4_number_set(number v) {
        this->send_33_input_number_set(v);
    }
    
    void send_33_input_list_set(const list& v) {
        this->send_33_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_19_out4_list_set(const list& v) {
        this->send_33_input_list_set(v);
    }
    
    void send_34_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_19_out3_bang_bang() {
        this->send_34_input_bang_bang();
    }
    
    void send_34_input_number_set(number v) {
        this->send_34_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_19_out3_number_set(number v) {
        this->send_34_input_number_set(v);
    }
    
    void send_34_input_list_set(const list& v) {
        this->send_34_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_19_out3_list_set(const list& v) {
        this->send_34_input_list_set(v);
    }
    
    void send_35_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_19_out2_bang_bang() {
        this->send_35_input_bang_bang();
    }
    
    void send_35_input_number_set(number v) {
        this->send_35_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_19_out2_number_set(number v) {
        this->send_35_input_number_set(v);
    }
    
    void send_35_input_list_set(const list& v) {
        this->send_35_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_19_out2_list_set(const list& v) {
        this->send_35_input_list_set(v);
    }
    
    void send_36_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_19_out1_bang_bang() {
        this->send_36_input_bang_bang();
    }
    
    void send_36_input_number_set(number v) {
        this->send_36_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_19_out1_number_set(number v) {
        this->send_36_input_number_set(v);
    }
    
    void send_36_input_list_set(const list& v) {
        this->send_36_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_19_out1_list_set(const list& v) {
        this->send_36_input_list_set(v);
    }
    
    void p_19_in1_number_set(number v) {
        this->p_19->updateTime(this->_currentTime);
        this->p_19->eventinlet_29_out1_number_set(v);
    }
    
    void gate_17_out1_number_set(number v) {
        this->gate_17_out1_number = v;
        this->p_19_in1_number_set(v);
    }
    
    void gate_17_input_number_set(number v) {
        if (this->gate_17_onoff == 1)
            this->gate_17_out1_number_set(v);
    }
    
    void message_34_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_17_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_17_onoff_set(converted);
        }
    }
    
    void message_34_bangval_bang() {
        this->sendParameter(38, true);
        this->message_34_out_set({1});
    }
    
    void numberobj_39_output_set(number v) {
        this->gate_17_input_number_set(v);
    }
    
    void numberobj_39_value_bang() {
        number v = this->numberobj_39_value;
        this->sendParameter(39, false);
        this->numberobj_39_output_set(v);
    }
    
    void button_14_bangval_bang() {
        this->sendParameter(37, true);
        this->message_34_bangval_bang();
        this->numberobj_39_value_bang();
    }
    
    void route_69_match9_bang_bang() {
        this->button_14_bangval_bang();
    }
    
    void route_69_match9_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_14_bangval_bang();
    }
    
    void route_69_match9_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_14_bangval_bang();
    }
    
    void gate_16_onoff_set(number v) {
        this->gate_16_onoff = v;
    }
    
    void send_29_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_18_out4_bang_bang() {
        this->send_29_input_bang_bang();
    }
    
    void send_29_input_number_set(number v) {
        this->send_29_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_18_out4_number_set(number v) {
        this->send_29_input_number_set(v);
    }
    
    void send_29_input_list_set(const list& v) {
        this->send_29_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_18_out4_list_set(const list& v) {
        this->send_29_input_list_set(v);
    }
    
    void send_30_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_18_out3_bang_bang() {
        this->send_30_input_bang_bang();
    }
    
    void send_30_input_number_set(number v) {
        this->send_30_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_18_out3_number_set(number v) {
        this->send_30_input_number_set(v);
    }
    
    void send_30_input_list_set(const list& v) {
        this->send_30_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_18_out3_list_set(const list& v) {
        this->send_30_input_list_set(v);
    }
    
    void send_31_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_18_out2_bang_bang() {
        this->send_31_input_bang_bang();
    }
    
    void send_31_input_number_set(number v) {
        this->send_31_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_18_out2_number_set(number v) {
        this->send_31_input_number_set(v);
    }
    
    void send_31_input_list_set(const list& v) {
        this->send_31_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_18_out2_list_set(const list& v) {
        this->send_31_input_list_set(v);
    }
    
    void send_32_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_18_out1_bang_bang() {
        this->send_32_input_bang_bang();
    }
    
    void send_32_input_number_set(number v) {
        this->send_32_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_18_out1_number_set(number v) {
        this->send_32_input_number_set(v);
    }
    
    void send_32_input_list_set(const list& v) {
        this->send_32_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_18_out1_list_set(const list& v) {
        this->send_32_input_list_set(v);
    }
    
    void p_18_in1_number_set(number v) {
        this->p_18->updateTime(this->_currentTime);
        this->p_18->eventinlet_28_out1_number_set(v);
    }
    
    void gate_16_out1_number_set(number v) {
        this->gate_16_out1_number = v;
        this->p_18_in1_number_set(v);
    }
    
    void gate_16_input_number_set(number v) {
        if (this->gate_16_onoff == 1)
            this->gate_16_out1_number_set(v);
    }
    
    void message_32_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_16_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_16_onoff_set(converted);
        }
    }
    
    void message_32_bangval_bang() {
        this->sendParameter(34, true);
        this->message_32_out_set({1});
    }
    
    void numberobj_38_output_set(number v) {
        this->gate_16_input_number_set(v);
    }
    
    void numberobj_38_value_bang() {
        number v = this->numberobj_38_value;
        this->sendParameter(35, false);
        this->numberobj_38_output_set(v);
    }
    
    void button_13_bangval_bang() {
        this->sendParameter(33, true);
        this->message_32_bangval_bang();
        this->numberobj_38_value_bang();
    }
    
    void route_69_match8_bang_bang() {
        this->button_13_bangval_bang();
    }
    
    void route_69_match8_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_13_bangval_bang();
    }
    
    void route_69_match8_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_13_bangval_bang();
    }
    
    void gate_15_onoff_set(number v) {
        this->gate_15_onoff = v;
    }
    
    void send_25_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_17_out4_bang_bang() {
        this->send_25_input_bang_bang();
    }
    
    void send_25_input_number_set(number v) {
        this->send_25_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_17_out4_number_set(number v) {
        this->send_25_input_number_set(v);
    }
    
    void send_25_input_list_set(const list& v) {
        this->send_25_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_17_out4_list_set(const list& v) {
        this->send_25_input_list_set(v);
    }
    
    void send_26_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_17_out3_bang_bang() {
        this->send_26_input_bang_bang();
    }
    
    void send_26_input_number_set(number v) {
        this->send_26_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_17_out3_number_set(number v) {
        this->send_26_input_number_set(v);
    }
    
    void send_26_input_list_set(const list& v) {
        this->send_26_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_17_out3_list_set(const list& v) {
        this->send_26_input_list_set(v);
    }
    
    void send_27_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_17_out2_bang_bang() {
        this->send_27_input_bang_bang();
    }
    
    void send_27_input_number_set(number v) {
        this->send_27_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_17_out2_number_set(number v) {
        this->send_27_input_number_set(v);
    }
    
    void send_27_input_list_set(const list& v) {
        this->send_27_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_17_out2_list_set(const list& v) {
        this->send_27_input_list_set(v);
    }
    
    void send_28_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_17_out1_bang_bang() {
        this->send_28_input_bang_bang();
    }
    
    void send_28_input_number_set(number v) {
        this->send_28_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_17_out1_number_set(number v) {
        this->send_28_input_number_set(v);
    }
    
    void send_28_input_list_set(const list& v) {
        this->send_28_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_17_out1_list_set(const list& v) {
        this->send_28_input_list_set(v);
    }
    
    void p_17_in1_number_set(number v) {
        this->p_17->updateTime(this->_currentTime);
        this->p_17->eventinlet_27_out1_number_set(v);
    }
    
    void gate_15_out1_number_set(number v) {
        this->gate_15_out1_number = v;
        this->p_17_in1_number_set(v);
    }
    
    void gate_15_input_number_set(number v) {
        if (this->gate_15_onoff == 1)
            this->gate_15_out1_number_set(v);
    }
    
    void message_30_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_15_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_15_onoff_set(converted);
        }
    }
    
    void message_30_bangval_bang() {
        this->sendParameter(31, true);
        this->message_30_out_set({1});
    }
    
    void numberobj_37_output_set(number v) {
        this->gate_15_input_number_set(v);
    }
    
    void numberobj_37_value_bang() {
        number v = this->numberobj_37_value;
        this->sendParameter(29, false);
        this->numberobj_37_output_set(v);
    }
    
    void button_12_bangval_bang() {
        this->sendParameter(30, true);
        this->message_30_bangval_bang();
        this->numberobj_37_value_bang();
    }
    
    void route_69_match7_bang_bang() {
        this->button_12_bangval_bang();
    }
    
    void route_69_match7_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_12_bangval_bang();
    }
    
    void route_69_match7_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_12_bangval_bang();
    }
    
    void gate_14_onoff_set(number v) {
        this->gate_14_onoff = v;
    }
    
    void send_21_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_16_out4_bang_bang() {
        this->send_21_input_bang_bang();
    }
    
    void send_21_input_number_set(number v) {
        this->send_21_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_16_out4_number_set(number v) {
        this->send_21_input_number_set(v);
    }
    
    void send_21_input_list_set(const list& v) {
        this->send_21_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_16_out4_list_set(const list& v) {
        this->send_21_input_list_set(v);
    }
    
    void send_22_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_16_out3_bang_bang() {
        this->send_22_input_bang_bang();
    }
    
    void send_22_input_number_set(number v) {
        this->send_22_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_16_out3_number_set(number v) {
        this->send_22_input_number_set(v);
    }
    
    void send_22_input_list_set(const list& v) {
        this->send_22_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_16_out3_list_set(const list& v) {
        this->send_22_input_list_set(v);
    }
    
    void send_23_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_16_out2_bang_bang() {
        this->send_23_input_bang_bang();
    }
    
    void send_23_input_number_set(number v) {
        this->send_23_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_16_out2_number_set(number v) {
        this->send_23_input_number_set(v);
    }
    
    void send_23_input_list_set(const list& v) {
        this->send_23_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_16_out2_list_set(const list& v) {
        this->send_23_input_list_set(v);
    }
    
    void send_24_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_16_out1_bang_bang() {
        this->send_24_input_bang_bang();
    }
    
    void send_24_input_number_set(number v) {
        this->send_24_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_16_out1_number_set(number v) {
        this->send_24_input_number_set(v);
    }
    
    void send_24_input_list_set(const list& v) {
        this->send_24_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_16_out1_list_set(const list& v) {
        this->send_24_input_list_set(v);
    }
    
    void p_16_in1_number_set(number v) {
        this->p_16->updateTime(this->_currentTime);
        this->p_16->eventinlet_26_out1_number_set(v);
    }
    
    void gate_14_out1_number_set(number v) {
        this->gate_14_out1_number = v;
        this->p_16_in1_number_set(v);
    }
    
    void gate_14_input_number_set(number v) {
        if (this->gate_14_onoff == 1)
            this->gate_14_out1_number_set(v);
    }
    
    void message_28_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_14_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_14_onoff_set(converted);
        }
    }
    
    void message_28_bangval_bang() {
        this->sendParameter(26, true);
        this->message_28_out_set({1});
    }
    
    void numberobj_36_output_set(number v) {
        this->gate_14_input_number_set(v);
    }
    
    void numberobj_36_value_bang() {
        number v = this->numberobj_36_value;
        this->sendParameter(27, false);
        this->numberobj_36_output_set(v);
    }
    
    void button_11_bangval_bang() {
        this->sendParameter(25, true);
        this->message_28_bangval_bang();
        this->numberobj_36_value_bang();
    }
    
    void route_69_match6_bang_bang() {
        this->button_11_bangval_bang();
    }
    
    void route_69_match6_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_11_bangval_bang();
    }
    
    void route_69_match6_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_11_bangval_bang();
    }
    
    void gate_13_onoff_set(number v) {
        this->gate_13_onoff = v;
    }
    
    void send_17_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_15_out4_bang_bang() {
        this->send_17_input_bang_bang();
    }
    
    void send_17_input_number_set(number v) {
        this->send_17_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_15_out4_number_set(number v) {
        this->send_17_input_number_set(v);
    }
    
    void send_17_input_list_set(const list& v) {
        this->send_17_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_15_out4_list_set(const list& v) {
        this->send_17_input_list_set(v);
    }
    
    void send_18_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_15_out3_bang_bang() {
        this->send_18_input_bang_bang();
    }
    
    void send_18_input_number_set(number v) {
        this->send_18_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_15_out3_number_set(number v) {
        this->send_18_input_number_set(v);
    }
    
    void send_18_input_list_set(const list& v) {
        this->send_18_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_15_out3_list_set(const list& v) {
        this->send_18_input_list_set(v);
    }
    
    void send_19_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_15_out2_bang_bang() {
        this->send_19_input_bang_bang();
    }
    
    void send_19_input_number_set(number v) {
        this->send_19_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_15_out2_number_set(number v) {
        this->send_19_input_number_set(v);
    }
    
    void send_19_input_list_set(const list& v) {
        this->send_19_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_15_out2_list_set(const list& v) {
        this->send_19_input_list_set(v);
    }
    
    void send_20_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_15_out1_bang_bang() {
        this->send_20_input_bang_bang();
    }
    
    void send_20_input_number_set(number v) {
        this->send_20_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_15_out1_number_set(number v) {
        this->send_20_input_number_set(v);
    }
    
    void send_20_input_list_set(const list& v) {
        this->send_20_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_15_out1_list_set(const list& v) {
        this->send_20_input_list_set(v);
    }
    
    void p_15_in1_number_set(number v) {
        this->p_15->updateTime(this->_currentTime);
        this->p_15->eventinlet_25_out1_number_set(v);
    }
    
    void gate_13_out1_number_set(number v) {
        this->gate_13_out1_number = v;
        this->p_15_in1_number_set(v);
    }
    
    void gate_13_input_number_set(number v) {
        if (this->gate_13_onoff == 1)
            this->gate_13_out1_number_set(v);
    }
    
    void message_26_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_13_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_13_onoff_set(converted);
        }
    }
    
    void message_26_bangval_bang() {
        this->sendParameter(22, true);
        this->message_26_out_set({1});
    }
    
    void numberobj_35_output_set(number v) {
        this->gate_13_input_number_set(v);
    }
    
    void numberobj_35_value_bang() {
        number v = this->numberobj_35_value;
        this->sendParameter(23, false);
        this->numberobj_35_output_set(v);
    }
    
    void button_10_bangval_bang() {
        this->sendParameter(21, true);
        this->message_26_bangval_bang();
        this->numberobj_35_value_bang();
    }
    
    void route_69_match5_bang_bang() {
        this->button_10_bangval_bang();
    }
    
    void route_69_match5_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_10_bangval_bang();
    }
    
    void route_69_match5_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_10_bangval_bang();
    }
    
    void gate_12_onoff_set(number v) {
        this->gate_12_onoff = v;
    }
    
    void send_13_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_14_out4_bang_bang() {
        this->send_13_input_bang_bang();
    }
    
    void send_13_input_number_set(number v) {
        this->send_13_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_14_out4_number_set(number v) {
        this->send_13_input_number_set(v);
    }
    
    void send_13_input_list_set(const list& v) {
        this->send_13_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_14_out4_list_set(const list& v) {
        this->send_13_input_list_set(v);
    }
    
    void send_14_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_14_out3_bang_bang() {
        this->send_14_input_bang_bang();
    }
    
    void send_14_input_number_set(number v) {
        this->send_14_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_14_out3_number_set(number v) {
        this->send_14_input_number_set(v);
    }
    
    void send_14_input_list_set(const list& v) {
        this->send_14_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_14_out3_list_set(const list& v) {
        this->send_14_input_list_set(v);
    }
    
    void send_15_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_14_out2_bang_bang() {
        this->send_15_input_bang_bang();
    }
    
    void send_15_input_number_set(number v) {
        this->send_15_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_14_out2_number_set(number v) {
        this->send_15_input_number_set(v);
    }
    
    void send_15_input_list_set(const list& v) {
        this->send_15_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_14_out2_list_set(const list& v) {
        this->send_15_input_list_set(v);
    }
    
    void send_16_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_14_out1_bang_bang() {
        this->send_16_input_bang_bang();
    }
    
    void send_16_input_number_set(number v) {
        this->send_16_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_14_out1_number_set(number v) {
        this->send_16_input_number_set(v);
    }
    
    void send_16_input_list_set(const list& v) {
        this->send_16_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_14_out1_list_set(const list& v) {
        this->send_16_input_list_set(v);
    }
    
    void p_14_in1_number_set(number v) {
        this->p_14->updateTime(this->_currentTime);
        this->p_14->eventinlet_24_out1_number_set(v);
    }
    
    void gate_12_out1_number_set(number v) {
        this->gate_12_out1_number = v;
        this->p_14_in1_number_set(v);
    }
    
    void gate_12_input_number_set(number v) {
        if (this->gate_12_onoff == 1)
            this->gate_12_out1_number_set(v);
    }
    
    void message_24_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_12_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_12_onoff_set(converted);
        }
    }
    
    void message_24_bangval_bang() {
        this->sendParameter(17, true);
        this->message_24_out_set({1});
    }
    
    void numberobj_34_output_set(number v) {
        this->gate_12_input_number_set(v);
    }
    
    void numberobj_34_value_bang() {
        number v = this->numberobj_34_value;
        this->sendParameter(18, false);
        this->numberobj_34_output_set(v);
    }
    
    void button_08_bangval_bang() {
        this->sendParameter(16, true);
        this->message_24_bangval_bang();
        this->numberobj_34_value_bang();
    }
    
    void route_69_match4_bang_bang() {
        this->button_08_bangval_bang();
    }
    
    void route_69_match4_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_08_bangval_bang();
    }
    
    void route_69_match4_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_08_bangval_bang();
    }
    
    void gate_11_onoff_set(number v) {
        this->gate_11_onoff = v;
    }
    
    void send_09_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_13_out4_bang_bang() {
        this->send_09_input_bang_bang();
    }
    
    void send_09_input_number_set(number v) {
        this->send_09_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_13_out4_number_set(number v) {
        this->send_09_input_number_set(v);
    }
    
    void send_09_input_list_set(const list& v) {
        this->send_09_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_13_out4_list_set(const list& v) {
        this->send_09_input_list_set(v);
    }
    
    void send_10_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_13_out3_bang_bang() {
        this->send_10_input_bang_bang();
    }
    
    void send_10_input_number_set(number v) {
        this->send_10_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_13_out3_number_set(number v) {
        this->send_10_input_number_set(v);
    }
    
    void send_10_input_list_set(const list& v) {
        this->send_10_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_13_out3_list_set(const list& v) {
        this->send_10_input_list_set(v);
    }
    
    void send_11_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_13_out2_bang_bang() {
        this->send_11_input_bang_bang();
    }
    
    void send_11_input_number_set(number v) {
        this->send_11_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_13_out2_number_set(number v) {
        this->send_11_input_number_set(v);
    }
    
    void send_11_input_list_set(const list& v) {
        this->send_11_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_13_out2_list_set(const list& v) {
        this->send_11_input_list_set(v);
    }
    
    void send_12_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_13_out1_bang_bang() {
        this->send_12_input_bang_bang();
    }
    
    void send_12_input_number_set(number v) {
        this->send_12_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_13_out1_number_set(number v) {
        this->send_12_input_number_set(v);
    }
    
    void send_12_input_list_set(const list& v) {
        this->send_12_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_13_out1_list_set(const list& v) {
        this->send_12_input_list_set(v);
    }
    
    void p_13_in1_number_set(number v) {
        this->p_13->updateTime(this->_currentTime);
        this->p_13->eventinlet_23_out1_number_set(v);
    }
    
    void gate_11_out1_number_set(number v) {
        this->gate_11_out1_number = v;
        this->p_13_in1_number_set(v);
    }
    
    void gate_11_input_number_set(number v) {
        if (this->gate_11_onoff == 1)
            this->gate_11_out1_number_set(v);
    }
    
    void message_22_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_11_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_11_onoff_set(converted);
        }
    }
    
    void message_22_bangval_bang() {
        this->sendParameter(12, true);
        this->message_22_out_set({1});
    }
    
    void numberobj_33_output_set(number v) {
        this->gate_11_input_number_set(v);
    }
    
    void numberobj_33_value_bang() {
        number v = this->numberobj_33_value;
        this->sendParameter(13, false);
        this->numberobj_33_output_set(v);
    }
    
    void button_06_bangval_bang() {
        this->sendParameter(11, true);
        this->message_22_bangval_bang();
        this->numberobj_33_value_bang();
    }
    
    void route_69_match3_bang_bang() {
        this->button_06_bangval_bang();
    }
    
    void route_69_match3_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_06_bangval_bang();
    }
    
    void route_69_match3_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_06_bangval_bang();
    }
    
    void gate_10_onoff_set(number v) {
        this->gate_10_onoff = v;
    }
    
    void send_05_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_12_out4_bang_bang() {
        this->send_05_input_bang_bang();
    }
    
    void send_05_input_number_set(number v) {
        this->send_05_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_12_out4_number_set(number v) {
        this->send_05_input_number_set(v);
    }
    
    void send_05_input_list_set(const list& v) {
        this->send_05_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_12_out4_list_set(const list& v) {
        this->send_05_input_list_set(v);
    }
    
    void send_06_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_12_out3_bang_bang() {
        this->send_06_input_bang_bang();
    }
    
    void send_06_input_number_set(number v) {
        this->send_06_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_12_out3_number_set(number v) {
        this->send_06_input_number_set(v);
    }
    
    void send_06_input_list_set(const list& v) {
        this->send_06_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_12_out3_list_set(const list& v) {
        this->send_06_input_list_set(v);
    }
    
    void send_07_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_12_out2_bang_bang() {
        this->send_07_input_bang_bang();
    }
    
    void send_07_input_number_set(number v) {
        this->send_07_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_12_out2_number_set(number v) {
        this->send_07_input_number_set(v);
    }
    
    void send_07_input_list_set(const list& v) {
        this->send_07_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_12_out2_list_set(const list& v) {
        this->send_07_input_list_set(v);
    }
    
    void send_08_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_12_out1_bang_bang() {
        this->send_08_input_bang_bang();
    }
    
    void send_08_input_number_set(number v) {
        this->send_08_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_12_out1_number_set(number v) {
        this->send_08_input_number_set(v);
    }
    
    void send_08_input_list_set(const list& v) {
        this->send_08_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_12_out1_list_set(const list& v) {
        this->send_08_input_list_set(v);
    }
    
    void p_12_in1_number_set(number v) {
        this->p_12->updateTime(this->_currentTime);
        this->p_12->eventinlet_22_out1_number_set(v);
    }
    
    void gate_10_out1_number_set(number v) {
        this->gate_10_out1_number = v;
        this->p_12_in1_number_set(v);
    }
    
    void gate_10_input_number_set(number v) {
        if (this->gate_10_onoff == 1)
            this->gate_10_out1_number_set(v);
    }
    
    void message_20_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_10_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_10_onoff_set(converted);
        }
    }
    
    void message_20_bangval_bang() {
        this->sendParameter(7, true);
        this->message_20_out_set({1});
    }
    
    void numberobj_32_output_set(number v) {
        this->gate_10_input_number_set(v);
    }
    
    void numberobj_32_value_bang() {
        number v = this->numberobj_32_value;
        this->sendParameter(5, false);
        this->numberobj_32_output_set(v);
    }
    
    void button_03_bangval_bang() {
        this->sendParameter(6, true);
        this->message_20_bangval_bang();
        this->numberobj_32_value_bang();
    }
    
    void route_69_match2_bang_bang() {
        this->button_03_bangval_bang();
    }
    
    void route_69_match2_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_03_bangval_bang();
    }
    
    void route_69_match2_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_03_bangval_bang();
    }
    
    void gate_09_onoff_set(number v) {
        this->gate_09_onoff = v;
    }
    
    void send_01_input_bang_bang() {
        this->receive_24_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_4_bang_bang();
    }
    
    void p_11_out4_bang_bang() {
        this->send_01_input_bang_bang();
    }
    
    void send_01_input_number_set(number v) {
        this->send_01_input_number = v;
        this->receive_24_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_4_number_set(v);
    }
    
    void p_11_out4_number_set(number v) {
        this->send_01_input_number_set(v);
    }
    
    void send_01_input_list_set(const list& v) {
        this->send_01_input_list = jsCreateListCopy(v);
        this->receive_24_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_4_list_set(v);
    }
    
    void p_11_out4_list_set(const list& v) {
        this->send_01_input_list_set(v);
    }
    
    void send_02_input_bang_bang() {
        this->receive_22_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_3_bang_bang();
    }
    
    void p_11_out3_bang_bang() {
        this->send_02_input_bang_bang();
    }
    
    void send_02_input_number_set(number v) {
        this->send_02_input_number = v;
        this->receive_22_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_3_number_set(v);
    }
    
    void p_11_out3_number_set(number v) {
        this->send_02_input_number_set(v);
    }
    
    void send_02_input_list_set(const list& v) {
        this->send_02_input_list = jsCreateListCopy(v);
        this->receive_22_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_3_list_set(v);
    }
    
    void p_11_out3_list_set(const list& v) {
        this->send_02_input_list_set(v);
    }
    
    void send_03_input_bang_bang() {
        this->receive_20_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_2_bang_bang();
    }
    
    void p_11_out2_bang_bang() {
        this->send_03_input_bang_bang();
    }
    
    void send_03_input_number_set(number v) {
        this->send_03_input_number = v;
        this->receive_20_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_2_number_set(v);
    }
    
    void p_11_out2_number_set(number v) {
        this->send_03_input_number_set(v);
    }
    
    void send_03_input_list_set(const list& v) {
        this->send_03_input_list = jsCreateListCopy(v);
        this->receive_20_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_2_list_set(v);
    }
    
    void p_11_out2_list_set(const list& v) {
        this->send_03_input_list_set(v);
    }
    
    void send_04_input_bang_bang() {
        this->receive_18_output_bang_bang();
        this->getPatcher()->p_33_source_t_drum_1_bang_bang();
    }
    
    void p_11_out1_bang_bang() {
        this->send_04_input_bang_bang();
    }
    
    void send_04_input_number_set(number v) {
        this->send_04_input_number = v;
        this->receive_18_output_number_set(v);
        this->getPatcher()->p_33_source_t_drum_1_number_set(v);
    }
    
    void p_11_out1_number_set(number v) {
        this->send_04_input_number_set(v);
    }
    
    void send_04_input_list_set(const list& v) {
        this->send_04_input_list = jsCreateListCopy(v);
        this->receive_18_output_list_set(v);
        this->getPatcher()->p_33_source_t_drum_1_list_set(v);
    }
    
    void p_11_out1_list_set(const list& v) {
        this->send_04_input_list_set(v);
    }
    
    void p_11_in1_number_set(number v) {
        this->p_11->updateTime(this->_currentTime);
        this->p_11->eventinlet_21_out1_number_set(v);
    }
    
    void gate_09_out1_number_set(number v) {
        this->gate_09_out1_number = v;
        this->p_11_in1_number_set(v);
    }
    
    void gate_09_input_number_set(number v) {
        if (this->gate_09_onoff == 1)
            this->gate_09_out1_number_set(v);
    }
    
    void message_18_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_09_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_09_onoff_set(converted);
        }
    }
    
    void message_18_bangval_bang() {
        this->sendParameter(3, true);
        this->message_18_out_set({1});
    }
    
    void numberobj_31_output_set(number v) {
        this->gate_09_input_number_set(v);
    }
    
    void numberobj_31_value_bang() {
        number v = this->numberobj_31_value;
        this->sendParameter(1, false);
        this->numberobj_31_output_set(v);
    }
    
    void button_02_bangval_bang() {
        this->sendParameter(2, true);
        this->message_18_bangval_bang();
        this->numberobj_31_value_bang();
    }
    
    void route_69_match1_bang_bang() {
        this->button_02_bangval_bang();
    }
    
    void route_69_match1_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_02_bangval_bang();
    }
    
    void route_69_match1_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->button_02_bangval_bang();
    }
    
    void print_07_input_number_set(number v) {
        {
            console->log("unknown", v);
        }
    }
    
    void route_69_nomatch_number_set(number v) {
        this->print_07_input_number_set(v);
    }
    
    void print_07_input_list_set(const list& v) {
        {
            console->log("unknown", v);
        }
    }
    
    void route_69_nomatch_list_set(const list& v) {
        this->print_07_input_list_set(v);
    }
    
    void route_69_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_69_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_69_selector16) {
                if (input->length == 0)
                    this->route_69_match16_bang_bang();
                else if (input->length == 1)
                    this->route_69_match16_number_set(input[0]);
                else
                    this->route_69_match16_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector15) {
                if (input->length == 0)
                    this->route_69_match15_bang_bang();
                else if (input->length == 1)
                    this->route_69_match15_number_set(input[0]);
                else
                    this->route_69_match15_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector14) {
                if (input->length == 0)
                    this->route_69_match14_bang_bang();
                else if (input->length == 1)
                    this->route_69_match14_number_set(input[0]);
                else
                    this->route_69_match14_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector13) {
                if (input->length == 0)
                    this->route_69_match13_bang_bang();
                else if (input->length == 1)
                    this->route_69_match13_number_set(input[0]);
                else
                    this->route_69_match13_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector12) {
                if (input->length == 0)
                    this->route_69_match12_bang_bang();
                else if (input->length == 1)
                    this->route_69_match12_number_set(input[0]);
                else
                    this->route_69_match12_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector11) {
                if (input->length == 0)
                    this->route_69_match11_bang_bang();
                else if (input->length == 1)
                    this->route_69_match11_number_set(input[0]);
                else
                    this->route_69_match11_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector10) {
                if (input->length == 0)
                    this->route_69_match10_bang_bang();
                else if (input->length == 1)
                    this->route_69_match10_number_set(input[0]);
                else
                    this->route_69_match10_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector9) {
                if (input->length == 0)
                    this->route_69_match9_bang_bang();
                else if (input->length == 1)
                    this->route_69_match9_number_set(input[0]);
                else
                    this->route_69_match9_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector8) {
                if (input->length == 0)
                    this->route_69_match8_bang_bang();
                else if (input->length == 1)
                    this->route_69_match8_number_set(input[0]);
                else
                    this->route_69_match8_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector7) {
                if (input->length == 0)
                    this->route_69_match7_bang_bang();
                else if (input->length == 1)
                    this->route_69_match7_number_set(input[0]);
                else
                    this->route_69_match7_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector6) {
                if (input->length == 0)
                    this->route_69_match6_bang_bang();
                else if (input->length == 1)
                    this->route_69_match6_number_set(input[0]);
                else
                    this->route_69_match6_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector5) {
                if (input->length == 0)
                    this->route_69_match5_bang_bang();
                else if (input->length == 1)
                    this->route_69_match5_number_set(input[0]);
                else
                    this->route_69_match5_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector4) {
                if (input->length == 0)
                    this->route_69_match4_bang_bang();
                else if (input->length == 1)
                    this->route_69_match4_number_set(input[0]);
                else
                    this->route_69_match4_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector3) {
                if (input->length == 0)
                    this->route_69_match3_bang_bang();
                else if (input->length == 1)
                    this->route_69_match3_number_set(input[0]);
                else
                    this->route_69_match3_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector2) {
                if (input->length == 0)
                    this->route_69_match2_bang_bang();
                else if (input->length == 1)
                    this->route_69_match2_number_set(input[0]);
                else
                    this->route_69_match2_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_69_selector1) {
                if (input->length == 0)
                    this->route_69_match1_bang_bang();
                else if (input->length == 1)
                    this->route_69_match1_number_set(input[0]);
                else
                    this->route_69_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_69_nomatch_number_set(v[0]);
                } else {
                    this->route_69_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_69_input_number_set(number v) {
        this->route_69_input_list_set({v});
    }
    
    void eventinlet_37_out1_number_set(number v) {
        this->route_69_input_number_set(v);
    }
    
    void eventinlet_37_out1_list_set(const list& v) {
        this->route_69_input_list_set(v);
    }
    
    void message_35_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_17_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_17_onoff_set(converted);
        }
    }
    
    void message_35_bangval_bang() {
        this->sendParameter(40, true);
        this->message_35_out_set({0});
    }
    
    void numberobj_39_value_set(number v) {
        this->numberobj_39_value_setter(v);
        v = this->numberobj_39_value;
        this->sendParameter(39, false);
        this->numberobj_39_output_set(v);
    }
    
    void receive_29_output_number_set(number v) {
        this->receive_29_output_number = v;
        this->message_35_bangval_bang();
        this->numberobj_39_value_set(v);
    }
    
    void message_19_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_09_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_09_onoff_set(converted);
        }
    }
    
    void message_19_bangval_bang() {
        this->sendParameter(4, true);
        this->message_19_out_set({0});
    }
    
    void numberobj_31_value_set(number v) {
        this->numberobj_31_value_setter(v);
        v = this->numberobj_31_value;
        this->sendParameter(1, false);
        this->numberobj_31_output_set(v);
    }
    
    void receive_17_output_number_set(number v) {
        this->receive_17_output_number = v;
        this->message_19_bangval_bang();
        this->numberobj_31_value_set(v);
    }
    
    void message_37_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_18_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_18_onoff_set(converted);
        }
    }
    
    void message_37_bangval_bang() {
        this->sendParameter(44, true);
        this->message_37_out_set({0});
    }
    
    void numberobj_40_value_set(number v) {
        this->numberobj_40_value_setter(v);
        v = this->numberobj_40_value;
        this->sendParameter(43, false);
        this->numberobj_40_output_set(v);
    }
    
    void receive_30_output_number_set(number v) {
        this->receive_30_output_number = v;
        this->message_37_bangval_bang();
        this->numberobj_40_value_set(v);
    }
    
    void message_21_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_10_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_10_onoff_set(converted);
        }
    }
    
    void message_21_bangval_bang() {
        this->sendParameter(9, true);
        this->message_21_out_set({0});
    }
    
    void numberobj_32_value_set(number v) {
        this->numberobj_32_value_setter(v);
        v = this->numberobj_32_value;
        this->sendParameter(5, false);
        this->numberobj_32_output_set(v);
    }
    
    void receive_19_output_number_set(number v) {
        this->receive_19_output_number = v;
        this->message_21_bangval_bang();
        this->numberobj_32_value_set(v);
    }
    
    void message_39_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_19_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_19_onoff_set(converted);
        }
    }
    
    void message_39_bangval_bang() {
        this->sendParameter(48, true);
        this->message_39_out_set({0});
    }
    
    void numberobj_41_value_set(number v) {
        this->numberobj_41_value_setter(v);
        v = this->numberobj_41_value;
        this->sendParameter(47, false);
        this->numberobj_41_output_set(v);
    }
    
    void receive_31_output_number_set(number v) {
        this->receive_31_output_number = v;
        this->message_39_bangval_bang();
        this->numberobj_41_value_set(v);
    }
    
    void message_23_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_11_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_11_onoff_set(converted);
        }
    }
    
    void message_23_bangval_bang() {
        this->sendParameter(14, true);
        this->message_23_out_set({0});
    }
    
    void numberobj_33_value_set(number v) {
        this->numberobj_33_value_setter(v);
        v = this->numberobj_33_value;
        this->sendParameter(13, false);
        this->numberobj_33_output_set(v);
    }
    
    void receive_21_output_number_set(number v) {
        this->receive_21_output_number = v;
        this->message_23_bangval_bang();
        this->numberobj_33_value_set(v);
    }
    
    void message_41_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_20_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_20_onoff_set(converted);
        }
    }
    
    void message_41_bangval_bang() {
        this->sendParameter(52, true);
        this->message_41_out_set({0});
    }
    
    void numberobj_42_value_set(number v) {
        this->numberobj_42_value_setter(v);
        v = this->numberobj_42_value;
        this->sendParameter(51, false);
        this->numberobj_42_output_set(v);
    }
    
    void receive_32_output_number_set(number v) {
        this->receive_32_output_number = v;
        this->message_41_bangval_bang();
        this->numberobj_42_value_set(v);
    }
    
    void message_25_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_12_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_12_onoff_set(converted);
        }
    }
    
    void message_25_bangval_bang() {
        this->sendParameter(19, true);
        this->message_25_out_set({0});
    }
    
    void numberobj_34_value_set(number v) {
        this->numberobj_34_value_setter(v);
        v = this->numberobj_34_value;
        this->sendParameter(18, false);
        this->numberobj_34_output_set(v);
    }
    
    void receive_23_output_number_set(number v) {
        this->receive_23_output_number = v;
        this->message_25_bangval_bang();
        this->numberobj_34_value_set(v);
    }
    
    void message_43_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_21_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_21_onoff_set(converted);
        }
    }
    
    void message_43_bangval_bang() {
        this->sendParameter(56, true);
        this->message_43_out_set({0});
    }
    
    void numberobj_43_value_set(number v) {
        this->numberobj_43_value_setter(v);
        v = this->numberobj_43_value;
        this->sendParameter(55, false);
        this->numberobj_43_output_set(v);
    }
    
    void receive_33_output_number_set(number v) {
        this->receive_33_output_number = v;
        this->message_43_bangval_bang();
        this->numberobj_43_value_set(v);
    }
    
    void message_27_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_13_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_13_onoff_set(converted);
        }
    }
    
    void message_27_bangval_bang() {
        this->sendParameter(24, true);
        this->message_27_out_set({0});
    }
    
    void numberobj_35_value_set(number v) {
        this->numberobj_35_value_setter(v);
        v = this->numberobj_35_value;
        this->sendParameter(23, false);
        this->numberobj_35_output_set(v);
    }
    
    void receive_25_output_number_set(number v) {
        this->receive_25_output_number = v;
        this->message_27_bangval_bang();
        this->numberobj_35_value_set(v);
    }
    
    void message_45_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_22_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_22_onoff_set(converted);
        }
    }
    
    void message_45_bangval_bang() {
        this->sendParameter(60, true);
        this->message_45_out_set({0});
    }
    
    void numberobj_44_value_set(number v) {
        this->numberobj_44_value_setter(v);
        v = this->numberobj_44_value;
        this->sendParameter(57, false);
        this->numberobj_44_output_set(v);
    }
    
    void receive_34_output_number_set(number v) {
        this->receive_34_output_number = v;
        this->message_45_bangval_bang();
        this->numberobj_44_value_set(v);
    }
    
    void message_29_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_14_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_14_onoff_set(converted);
        }
    }
    
    void message_29_bangval_bang() {
        this->sendParameter(28, true);
        this->message_29_out_set({0});
    }
    
    void numberobj_36_value_set(number v) {
        this->numberobj_36_value_setter(v);
        v = this->numberobj_36_value;
        this->sendParameter(27, false);
        this->numberobj_36_output_set(v);
    }
    
    void receive_26_output_number_set(number v) {
        this->receive_26_output_number = v;
        this->message_29_bangval_bang();
        this->numberobj_36_value_set(v);
    }
    
    void message_47_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_23_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_23_onoff_set(converted);
        }
    }
    
    void message_47_bangval_bang() {
        this->sendParameter(64, true);
        this->message_47_out_set({0});
    }
    
    void numberobj_45_value_set(number v) {
        this->numberobj_45_value_setter(v);
        v = this->numberobj_45_value;
        this->sendParameter(63, false);
        this->numberobj_45_output_set(v);
    }
    
    void receive_35_output_number_set(number v) {
        this->receive_35_output_number = v;
        this->message_47_bangval_bang();
        this->numberobj_45_value_set(v);
    }
    
    void message_31_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_15_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_15_onoff_set(converted);
        }
    }
    
    void message_31_bangval_bang() {
        this->sendParameter(32, true);
        this->message_31_out_set({0});
    }
    
    void numberobj_37_value_set(number v) {
        this->numberobj_37_value_setter(v);
        v = this->numberobj_37_value;
        this->sendParameter(29, false);
        this->numberobj_37_output_set(v);
    }
    
    void receive_27_output_number_set(number v) {
        this->receive_27_output_number = v;
        this->message_31_bangval_bang();
        this->numberobj_37_value_set(v);
    }
    
    void message_49_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_24_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_24_onoff_set(converted);
        }
    }
    
    void message_49_bangval_bang() {
        this->sendParameter(68, true);
        this->message_49_out_set({0});
    }
    
    void numberobj_46_value_set(number v) {
        this->numberobj_46_value_setter(v);
        v = this->numberobj_46_value;
        this->sendParameter(67, false);
        this->numberobj_46_output_set(v);
    }
    
    void receive_36_output_number_set(number v) {
        this->receive_36_output_number = v;
        this->message_49_bangval_bang();
        this->numberobj_46_value_set(v);
    }
    
    void message_33_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_16_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_16_onoff_set(converted);
        }
    }
    
    void message_33_bangval_bang() {
        this->sendParameter(36, true);
        this->message_33_out_set({0});
    }
    
    void numberobj_38_value_set(number v) {
        this->numberobj_38_value_setter(v);
        v = this->numberobj_38_value;
        this->sendParameter(35, false);
        this->numberobj_38_output_set(v);
    }
    
    void receive_28_output_number_set(number v) {
        this->receive_28_output_number = v;
        this->message_33_bangval_bang();
        this->numberobj_38_value_set(v);
    }
    
    void message_17_out_set(const list& ) {}
    
    void p_11_perform(Index n) {
        // subpatcher: decode
        this->p_11->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_12_perform(Index n) {
        // subpatcher: decode
        this->p_12->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_13_perform(Index n) {
        // subpatcher: decode
        this->p_13->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_14_perform(Index n) {
        // subpatcher: decode
        this->p_14->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_15_perform(Index n) {
        // subpatcher: decode
        this->p_15->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_16_perform(Index n) {
        // subpatcher: decode
        this->p_16->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_17_perform(Index n) {
        // subpatcher: decode
        this->p_17->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_18_perform(Index n) {
        // subpatcher: decode
        this->p_18->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_19_perform(Index n) {
        // subpatcher: decode
        this->p_19->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_20_perform(Index n) {
        // subpatcher: decode
        this->p_20->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_21_perform(Index n) {
        // subpatcher: decode
        this->p_21->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_22_perform(Index n) {
        // subpatcher: decode
        this->p_22->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_23_perform(Index n) {
        // subpatcher: decode
        this->p_23->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_24_perform(Index n) {
        // subpatcher: decode
        this->p_24->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_25_perform(Index n) {
        // subpatcher: decode
        this->p_25->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_26_perform(Index n) {
        // subpatcher: decode
        this->p_26->process(nullptr, 0, nullptr, 0, n);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_31_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_31_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_31_value = localvalue;
    }
    
    void numberobj_32_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_32_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_32_value = localvalue;
    }
    
    void numberobj_33_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_33_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_33_value = localvalue;
    }
    
    void numberobj_34_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_34_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_34_value = localvalue;
    }
    
    void numberobj_35_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_35_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_35_value = localvalue;
    }
    
    void numberobj_36_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_36_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_36_value = localvalue;
    }
    
    void numberobj_37_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_37_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_37_value = localvalue;
    }
    
    void numberobj_38_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_38_value = localvalue;
    }
    
    void numberobj_39_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_39_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_39_value = localvalue;
    }
    
    void numberobj_40_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_40_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_40_value = localvalue;
    }
    
    void numberobj_41_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_41_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_41_value = localvalue;
    }
    
    void numberobj_42_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_42_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_42_value = localvalue;
    }
    
    void numberobj_43_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_43_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_43_value = localvalue;
    }
    
    void numberobj_44_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_44_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_44_value = localvalue;
    }
    
    void numberobj_45_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_45_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_45_value = localvalue;
    }
    
    void numberobj_46_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_46_currentFormat != 6) {
            localvalue = rnbo_trunc(localvalue);
        }
    
        this->numberobj_46_value = localvalue;
    }
    
    void numberobj_31_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-12"), 1, this->_currentTime);
    }
    
    void numberobj_31_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_31_value;
    }
    
    void numberobj_31_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_31_value_set(preset["value"]);
    }
    
    void numberobj_32_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-16"), 1, this->_currentTime);
    }
    
    void numberobj_32_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_32_value;
    }
    
    void numberobj_32_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_32_value_set(preset["value"]);
    }
    
    void numberobj_33_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-18"), 1, this->_currentTime);
    }
    
    void numberobj_33_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_33_value;
    }
    
    void numberobj_33_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_33_value_set(preset["value"]);
    }
    
    void numberobj_34_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-79"), 1, this->_currentTime);
    }
    
    void numberobj_34_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_34_value;
    }
    
    void numberobj_34_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_34_value_set(preset["value"]);
    }
    
    void numberobj_35_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-103"), 1, this->_currentTime);
    }
    
    void numberobj_35_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_35_value;
    }
    
    void numberobj_35_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_35_value_set(preset["value"]);
    }
    
    void numberobj_36_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-107"), 1, this->_currentTime);
    }
    
    void numberobj_36_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_36_value;
    }
    
    void numberobj_36_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_36_value_set(preset["value"]);
    }
    
    void numberobj_37_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-119"), 1, this->_currentTime);
    }
    
    void numberobj_37_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_37_value;
    }
    
    void numberobj_37_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_37_value_set(preset["value"]);
    }
    
    void numberobj_38_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-125"), 1, this->_currentTime);
    }
    
    void numberobj_38_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_38_value;
    }
    
    void numberobj_38_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_38_value_set(preset["value"]);
    }
    
    void numberobj_39_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-127"), 1, this->_currentTime);
    }
    
    void numberobj_39_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_39_value;
    }
    
    void numberobj_39_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_39_value_set(preset["value"]);
    }
    
    void numberobj_40_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-129"), 1, this->_currentTime);
    }
    
    void numberobj_40_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_40_value;
    }
    
    void numberobj_40_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_40_value_set(preset["value"]);
    }
    
    void numberobj_41_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-131"), 1, this->_currentTime);
    }
    
    void numberobj_41_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_41_value;
    }
    
    void numberobj_41_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_41_value_set(preset["value"]);
    }
    
    void numberobj_42_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-134"), 1, this->_currentTime);
    }
    
    void numberobj_42_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_42_value;
    }
    
    void numberobj_42_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_42_value_set(preset["value"]);
    }
    
    void numberobj_43_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-136"), 1, this->_currentTime);
    }
    
    void numberobj_43_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_43_value;
    }
    
    void numberobj_43_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_43_value_set(preset["value"]);
    }
    
    void numberobj_44_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-138"), 1, this->_currentTime);
    }
    
    void numberobj_44_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_44_value;
    }
    
    void numberobj_44_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_44_value_set(preset["value"]);
    }
    
    void numberobj_45_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-140"), 1, this->_currentTime);
    }
    
    void numberobj_45_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_45_value;
    }
    
    void numberobj_45_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_45_value_set(preset["value"]);
    }
    
    void numberobj_46_init() {
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("p_obj-193/number_obj-142"), 1, this->_currentTime);
    }
    
    void numberobj_46_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_46_value;
    }
    
    void numberobj_46_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_46_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        route_69_selector1 = 1;
        route_69_selector2 = 2;
        route_69_selector3 = 3;
        route_69_selector4 = 4;
        route_69_selector5 = 5;
        route_69_selector6 = 6;
        route_69_selector7 = 7;
        route_69_selector8 = 8;
        route_69_selector9 = 9;
        route_69_selector10 = 10;
        route_69_selector11 = 11;
        route_69_selector12 = 12;
        route_69_selector13 = 13;
        route_69_selector14 = 14;
        route_69_selector15 = 15;
        route_69_selector16 = 16;
        numberobj_31_value = 0;
        numberobj_31_value_setter(numberobj_31_value);
        gate_09_onoff = 0;
        gate_09_out1_number = 0;
        send_01_input_number = 0;
        send_02_input_number = 0;
        send_03_input_number = 0;
        send_04_input_number = 0;
        p_11_target = 0;
        receive_17_output_number = 0;
        receive_18_output_number = 0;
        numberobj_32_value = 0;
        numberobj_32_value_setter(numberobj_32_value);
        gate_10_onoff = 0;
        gate_10_out1_number = 0;
        send_05_input_number = 0;
        send_06_input_number = 0;
        send_07_input_number = 0;
        send_08_input_number = 0;
        p_12_target = 0;
        receive_19_output_number = 0;
        receive_20_output_number = 0;
        numberobj_33_value = 0;
        numberobj_33_value_setter(numberobj_33_value);
        gate_11_onoff = 0;
        gate_11_out1_number = 0;
        send_09_input_number = 0;
        send_10_input_number = 0;
        send_11_input_number = 0;
        send_12_input_number = 0;
        p_13_target = 0;
        receive_21_output_number = 0;
        receive_22_output_number = 0;
        send_13_input_number = 0;
        send_14_input_number = 0;
        send_15_input_number = 0;
        send_16_input_number = 0;
        p_14_target = 0;
        numberobj_34_value = 0;
        numberobj_34_value_setter(numberobj_34_value);
        gate_12_onoff = 0;
        gate_12_out1_number = 0;
        receive_23_output_number = 0;
        receive_24_output_number = 0;
        numberobj_35_value = 0;
        numberobj_35_value_setter(numberobj_35_value);
        gate_13_onoff = 0;
        gate_13_out1_number = 0;
        send_17_input_number = 0;
        send_18_input_number = 0;
        send_19_input_number = 0;
        send_20_input_number = 0;
        p_15_target = 0;
        receive_25_output_number = 0;
        numberobj_36_value = 0;
        numberobj_36_value_setter(numberobj_36_value);
        gate_14_onoff = 0;
        gate_14_out1_number = 0;
        send_21_input_number = 0;
        send_22_input_number = 0;
        send_23_input_number = 0;
        send_24_input_number = 0;
        p_16_target = 0;
        receive_26_output_number = 0;
        numberobj_37_value = 0;
        numberobj_37_value_setter(numberobj_37_value);
        gate_15_onoff = 0;
        gate_15_out1_number = 0;
        send_25_input_number = 0;
        send_26_input_number = 0;
        send_27_input_number = 0;
        send_28_input_number = 0;
        p_17_target = 0;
        receive_27_output_number = 0;
        send_29_input_number = 0;
        send_30_input_number = 0;
        send_31_input_number = 0;
        send_32_input_number = 0;
        p_18_target = 0;
        numberobj_38_value = 0;
        numberobj_38_value_setter(numberobj_38_value);
        gate_16_onoff = 0;
        gate_16_out1_number = 0;
        receive_28_output_number = 0;
        numberobj_39_value = 0;
        numberobj_39_value_setter(numberobj_39_value);
        gate_17_onoff = 0;
        gate_17_out1_number = 0;
        send_33_input_number = 0;
        send_34_input_number = 0;
        send_35_input_number = 0;
        send_36_input_number = 0;
        p_19_target = 0;
        receive_29_output_number = 0;
        numberobj_40_value = 0;
        numberobj_40_value_setter(numberobj_40_value);
        gate_18_onoff = 0;
        gate_18_out1_number = 0;
        send_37_input_number = 0;
        send_38_input_number = 0;
        send_39_input_number = 0;
        send_40_input_number = 0;
        p_20_target = 0;
        receive_30_output_number = 0;
        numberobj_41_value = 0;
        numberobj_41_value_setter(numberobj_41_value);
        gate_19_onoff = 0;
        gate_19_out1_number = 0;
        send_41_input_number = 0;
        send_42_input_number = 0;
        send_43_input_number = 0;
        send_44_input_number = 0;
        p_21_target = 0;
        receive_31_output_number = 0;
        send_45_input_number = 0;
        send_46_input_number = 0;
        send_47_input_number = 0;
        send_48_input_number = 0;
        p_22_target = 0;
        numberobj_42_value = 0;
        numberobj_42_value_setter(numberobj_42_value);
        gate_20_onoff = 0;
        gate_20_out1_number = 0;
        receive_32_output_number = 0;
        numberobj_43_value = 0;
        numberobj_43_value_setter(numberobj_43_value);
        gate_21_onoff = 0;
        gate_21_out1_number = 0;
        send_49_input_number = 0;
        send_50_input_number = 0;
        send_51_input_number = 0;
        send_52_input_number = 0;
        p_23_target = 0;
        receive_33_output_number = 0;
        numberobj_44_value = 0;
        numberobj_44_value_setter(numberobj_44_value);
        gate_22_onoff = 0;
        gate_22_out1_number = 0;
        send_53_input_number = 0;
        send_54_input_number = 0;
        send_55_input_number = 0;
        send_56_input_number = 0;
        p_24_target = 0;
        receive_34_output_number = 0;
        numberobj_45_value = 0;
        numberobj_45_value_setter(numberobj_45_value);
        gate_23_onoff = 0;
        gate_23_out1_number = 0;
        send_57_input_number = 0;
        send_58_input_number = 0;
        send_59_input_number = 0;
        send_60_input_number = 0;
        p_25_target = 0;
        receive_35_output_number = 0;
        send_61_input_number = 0;
        send_62_input_number = 0;
        send_63_input_number = 0;
        send_64_input_number = 0;
        p_26_target = 0;
        numberobj_46_value = 0;
        numberobj_46_value_setter(numberobj_46_value);
        gate_24_onoff = 0;
        gate_24_out1_number = 0;
        receive_36_output_number = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_31_currentFormat = 6;
        numberobj_31_lastValue = 0;
        numberobj_32_currentFormat = 6;
        numberobj_32_lastValue = 0;
        numberobj_33_currentFormat = 6;
        numberobj_33_lastValue = 0;
        numberobj_34_currentFormat = 6;
        numberobj_34_lastValue = 0;
        numberobj_35_currentFormat = 6;
        numberobj_35_lastValue = 0;
        numberobj_36_currentFormat = 6;
        numberobj_36_lastValue = 0;
        numberobj_37_currentFormat = 6;
        numberobj_37_lastValue = 0;
        numberobj_38_currentFormat = 6;
        numberobj_38_lastValue = 0;
        numberobj_39_currentFormat = 6;
        numberobj_39_lastValue = 0;
        numberobj_40_currentFormat = 6;
        numberobj_40_lastValue = 0;
        numberobj_41_currentFormat = 6;
        numberobj_41_lastValue = 0;
        numberobj_42_currentFormat = 6;
        numberobj_42_lastValue = 0;
        numberobj_43_currentFormat = 6;
        numberobj_43_lastValue = 0;
        numberobj_44_currentFormat = 6;
        numberobj_44_lastValue = 0;
        numberobj_45_currentFormat = 6;
        numberobj_45_lastValue = 0;
        numberobj_46_currentFormat = 6;
        numberobj_46_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number route_69_selector1;
        number route_69_selector2;
        number route_69_selector3;
        number route_69_selector4;
        number route_69_selector5;
        number route_69_selector6;
        number route_69_selector7;
        number route_69_selector8;
        number route_69_selector9;
        number route_69_selector10;
        number route_69_selector11;
        number route_69_selector12;
        number route_69_selector13;
        number route_69_selector14;
        number route_69_selector15;
        number route_69_selector16;
        number numberobj_31_value;
        number gate_09_onoff;
        number gate_09_out1_number;
        list gate_09_out1_list;
        number send_01_input_number;
        list send_01_input_list;
        number send_02_input_number;
        list send_02_input_list;
        number send_03_input_number;
        list send_03_input_list;
        number send_04_input_number;
        list send_04_input_list;
        number p_11_target;
        number receive_17_output_number;
        list receive_17_output_list;
        number receive_18_output_number;
        list receive_18_output_list;
        number numberobj_32_value;
        number gate_10_onoff;
        number gate_10_out1_number;
        list gate_10_out1_list;
        number send_05_input_number;
        list send_05_input_list;
        number send_06_input_number;
        list send_06_input_list;
        number send_07_input_number;
        list send_07_input_list;
        number send_08_input_number;
        list send_08_input_list;
        number p_12_target;
        number receive_19_output_number;
        list receive_19_output_list;
        number receive_20_output_number;
        list receive_20_output_list;
        number numberobj_33_value;
        number gate_11_onoff;
        number gate_11_out1_number;
        list gate_11_out1_list;
        number send_09_input_number;
        list send_09_input_list;
        number send_10_input_number;
        list send_10_input_list;
        number send_11_input_number;
        list send_11_input_list;
        number send_12_input_number;
        list send_12_input_list;
        number p_13_target;
        number receive_21_output_number;
        list receive_21_output_list;
        number receive_22_output_number;
        list receive_22_output_list;
        number send_13_input_number;
        list send_13_input_list;
        number send_14_input_number;
        list send_14_input_list;
        number send_15_input_number;
        list send_15_input_list;
        number send_16_input_number;
        list send_16_input_list;
        number p_14_target;
        number numberobj_34_value;
        number gate_12_onoff;
        number gate_12_out1_number;
        list gate_12_out1_list;
        number receive_23_output_number;
        list receive_23_output_list;
        number receive_24_output_number;
        list receive_24_output_list;
        number numberobj_35_value;
        number gate_13_onoff;
        number gate_13_out1_number;
        list gate_13_out1_list;
        number send_17_input_number;
        list send_17_input_list;
        number send_18_input_number;
        list send_18_input_list;
        number send_19_input_number;
        list send_19_input_list;
        number send_20_input_number;
        list send_20_input_list;
        number p_15_target;
        number receive_25_output_number;
        list receive_25_output_list;
        number numberobj_36_value;
        number gate_14_onoff;
        number gate_14_out1_number;
        list gate_14_out1_list;
        number send_21_input_number;
        list send_21_input_list;
        number send_22_input_number;
        list send_22_input_list;
        number send_23_input_number;
        list send_23_input_list;
        number send_24_input_number;
        list send_24_input_list;
        number p_16_target;
        number receive_26_output_number;
        list receive_26_output_list;
        number numberobj_37_value;
        number gate_15_onoff;
        number gate_15_out1_number;
        list gate_15_out1_list;
        number send_25_input_number;
        list send_25_input_list;
        number send_26_input_number;
        list send_26_input_list;
        number send_27_input_number;
        list send_27_input_list;
        number send_28_input_number;
        list send_28_input_list;
        number p_17_target;
        number receive_27_output_number;
        list receive_27_output_list;
        number send_29_input_number;
        list send_29_input_list;
        number send_30_input_number;
        list send_30_input_list;
        number send_31_input_number;
        list send_31_input_list;
        number send_32_input_number;
        list send_32_input_list;
        number p_18_target;
        number numberobj_38_value;
        number gate_16_onoff;
        number gate_16_out1_number;
        list gate_16_out1_list;
        number receive_28_output_number;
        list receive_28_output_list;
        number numberobj_39_value;
        number gate_17_onoff;
        number gate_17_out1_number;
        list gate_17_out1_list;
        number send_33_input_number;
        list send_33_input_list;
        number send_34_input_number;
        list send_34_input_list;
        number send_35_input_number;
        list send_35_input_list;
        number send_36_input_number;
        list send_36_input_list;
        number p_19_target;
        number receive_29_output_number;
        list receive_29_output_list;
        number numberobj_40_value;
        number gate_18_onoff;
        number gate_18_out1_number;
        list gate_18_out1_list;
        number send_37_input_number;
        list send_37_input_list;
        number send_38_input_number;
        list send_38_input_list;
        number send_39_input_number;
        list send_39_input_list;
        number send_40_input_number;
        list send_40_input_list;
        number p_20_target;
        number receive_30_output_number;
        list receive_30_output_list;
        number numberobj_41_value;
        number gate_19_onoff;
        number gate_19_out1_number;
        list gate_19_out1_list;
        number send_41_input_number;
        list send_41_input_list;
        number send_42_input_number;
        list send_42_input_list;
        number send_43_input_number;
        list send_43_input_list;
        number send_44_input_number;
        list send_44_input_list;
        number p_21_target;
        number receive_31_output_number;
        list receive_31_output_list;
        number send_45_input_number;
        list send_45_input_list;
        number send_46_input_number;
        list send_46_input_list;
        number send_47_input_number;
        list send_47_input_list;
        number send_48_input_number;
        list send_48_input_list;
        number p_22_target;
        number numberobj_42_value;
        number gate_20_onoff;
        number gate_20_out1_number;
        list gate_20_out1_list;
        number receive_32_output_number;
        list receive_32_output_list;
        number numberobj_43_value;
        number gate_21_onoff;
        number gate_21_out1_number;
        list gate_21_out1_list;
        number send_49_input_number;
        list send_49_input_list;
        number send_50_input_number;
        list send_50_input_list;
        number send_51_input_number;
        list send_51_input_list;
        number send_52_input_number;
        list send_52_input_list;
        number p_23_target;
        number receive_33_output_number;
        list receive_33_output_list;
        number numberobj_44_value;
        number gate_22_onoff;
        number gate_22_out1_number;
        list gate_22_out1_list;
        number send_53_input_number;
        list send_53_input_list;
        number send_54_input_number;
        list send_54_input_list;
        number send_55_input_number;
        list send_55_input_list;
        number send_56_input_number;
        list send_56_input_list;
        number p_24_target;
        number receive_34_output_number;
        list receive_34_output_list;
        number numberobj_45_value;
        number gate_23_onoff;
        number gate_23_out1_number;
        list gate_23_out1_list;
        number send_57_input_number;
        list send_57_input_list;
        number send_58_input_number;
        list send_58_input_list;
        number send_59_input_number;
        list send_59_input_list;
        number send_60_input_number;
        list send_60_input_list;
        number p_25_target;
        number receive_35_output_number;
        list receive_35_output_list;
        number send_61_input_number;
        list send_61_input_list;
        number send_62_input_number;
        list send_62_input_list;
        number send_63_input_number;
        list send_63_input_list;
        number send_64_input_number;
        list send_64_input_list;
        number p_26_target;
        number numberobj_46_value;
        number gate_24_onoff;
        number gate_24_out1_number;
        list gate_24_out1_list;
        number receive_36_output_number;
        list receive_36_output_list;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Int numberobj_31_currentFormat;
        number numberobj_31_lastValue;
        Int numberobj_32_currentFormat;
        number numberobj_32_lastValue;
        Int numberobj_33_currentFormat;
        number numberobj_33_lastValue;
        Int numberobj_34_currentFormat;
        number numberobj_34_lastValue;
        Int numberobj_35_currentFormat;
        number numberobj_35_lastValue;
        Int numberobj_36_currentFormat;
        number numberobj_36_lastValue;
        Int numberobj_37_currentFormat;
        number numberobj_37_lastValue;
        Int numberobj_38_currentFormat;
        number numberobj_38_lastValue;
        Int numberobj_39_currentFormat;
        number numberobj_39_lastValue;
        Int numberobj_40_currentFormat;
        number numberobj_40_lastValue;
        Int numberobj_41_currentFormat;
        number numberobj_41_lastValue;
        Int numberobj_42_currentFormat;
        number numberobj_42_lastValue;
        Int numberobj_43_currentFormat;
        number numberobj_43_lastValue;
        Int numberobj_44_currentFormat;
        number numberobj_44_lastValue;
        Int numberobj_45_currentFormat;
        number numberobj_45_lastValue;
        Int numberobj_46_currentFormat;
        number numberobj_46_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_1035* p_11;
        RNBOSubpatcher_1036* p_12;
        RNBOSubpatcher_1037* p_13;
        RNBOSubpatcher_1038* p_14;
        RNBOSubpatcher_1039* p_15;
        RNBOSubpatcher_1040* p_16;
        RNBOSubpatcher_1041* p_17;
        RNBOSubpatcher_1042* p_18;
        RNBOSubpatcher_1043* p_19;
        RNBOSubpatcher_1044* p_20;
        RNBOSubpatcher_1045* p_21;
        RNBOSubpatcher_1046* p_22;
        RNBOSubpatcher_1047* p_23;
        RNBOSubpatcher_1048* p_24;
        RNBOSubpatcher_1049* p_25;
        RNBOSubpatcher_1050* p_26;
    
};

class RNBOSubpatcher_1059 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_1059()
    {
    }
    
    ~RNBOSubpatcher_1059()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    number samplerate() {
        return this->sr;
    }
    
    Index vectorsize() {
        return this->vs;
    }
    
    ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
        RNBO_UNUSED(paramid);
        return INVALID_INDEX;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        SampleValue ** inputs,
        Index numInputs,
        SampleValue ** outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->data_01_dspsetup(forceDSPSetup);
        this->data_02_dspsetup(forceDSPSetup);
        this->data_03_dspsetup(forceDSPSetup);
        this->data_04_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            this->setProbingIndex(-1);
            break;
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            return 0;
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            return "bogus";
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            return "bogus";
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            return value;
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            return value;
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            return value;
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
    
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            return nullptr;
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 2) {
            this->data_01_buffer = new Float32Buffer(this->getPatcher()->snare);
            this->data_01_bufferUpdated();
        }
    
        if (index == 1) {
            this->data_02_buffer = new Float32Buffer(this->getPatcher()->perc);
            this->data_02_bufferUpdated();
        }
    
        if (index == 3) {
            this->data_03_buffer = new Float32Buffer(this->getPatcher()->kick);
            this->data_03_bufferUpdated();
        }
    
        if (index == 4) {
            this->data_04_buffer = new Float32Buffer(this->getPatcher()->hat);
            this->data_04_bufferUpdated();
        }
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->data_01_buffer = new Float32Buffer(this->getPatcher()->snare);
        this->data_02_buffer = new Float32Buffer(this->getPatcher()->perc);
        this->data_03_buffer = new Float32Buffer(this->getPatcher()->kick);
        this->data_04_buffer = new Float32Buffer(this->getPatcher()->hat);
    }
    
    protected:
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->data_01_init();
        this->data_02_init();
        this->data_03_init();
        this->data_04_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {
        this->data_01_buffer = this->data_01_buffer->allocateIfNeeded();
        this->data_02_buffer = this->data_02_buffer->allocateIfNeeded();
        this->data_03_buffer = this->data_03_buffer->allocateIfNeeded();
        this->data_04_buffer = this->data_04_buffer->allocateIfNeeded();
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void data_01_sizeout_set(number v) {
        this->data_01_sizeout = v;
    }
    
    void data_01_chanout_set(number ) {}
    
    void data_01_srout_set(number ) {}
    
    void data_02_sizeout_set(number v) {
        this->data_02_sizeout = v;
    }
    
    void data_02_chanout_set(number ) {}
    
    void data_02_srout_set(number ) {}
    
    void data_03_sizeout_set(number v) {
        this->data_03_sizeout = v;
    }
    
    void data_03_chanout_set(number ) {}
    
    void data_03_srout_set(number ) {}
    
    void data_04_sizeout_set(number v) {
        this->data_04_sizeout = v;
    }
    
    void data_04_chanout_set(number ) {}
    
    void data_04_srout_set(number ) {}
    
    void data_01_init() {
        this->data_01_buffer->setWantsFill(true);
    }
    
    Index data_01_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        number size = 0;
        return (Index)(size);
    }
    
    void data_01_dspsetup(bool force) {
        if ((bool)(this->data_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        if (this->data_01_sizemode == 2) {
            this->data_01_buffer = this->data_01_buffer->setSize((Index)(this->mstosamps(this->data_01_sizems)));
            updateDataRef(this, this->data_01_buffer);
        } else if (this->data_01_sizemode == 3) {
            this->data_01_buffer = this->data_01_buffer->setSize(this->data_01_evaluateSizeExpr(this->samplerate(), this->vectorsize()));
            updateDataRef(this, this->data_01_buffer);
        }
    
        this->data_01_setupDone = true;
    }
    
    void data_01_bufferUpdated() {
        this->data_01_report();
    }
    
    void data_01_report() {
        this->data_01_sizeout_set(this->data_01_buffer->getSize());
        this->data_01_chanout_set(this->data_01_buffer->getChannels());
        this->data_01_srout_set(this->data_01_buffer->getSampleRate());
    }
    
    void data_02_init() {
        this->data_02_buffer->setWantsFill(true);
    }
    
    Index data_02_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        number size = 0;
        return (Index)(size);
    }
    
    void data_02_dspsetup(bool force) {
        if ((bool)(this->data_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        if (this->data_02_sizemode == 2) {
            this->data_02_buffer = this->data_02_buffer->setSize((Index)(this->mstosamps(this->data_02_sizems)));
            updateDataRef(this, this->data_02_buffer);
        } else if (this->data_02_sizemode == 3) {
            this->data_02_buffer = this->data_02_buffer->setSize(this->data_02_evaluateSizeExpr(this->samplerate(), this->vectorsize()));
            updateDataRef(this, this->data_02_buffer);
        }
    
        this->data_02_setupDone = true;
    }
    
    void data_02_bufferUpdated() {
        this->data_02_report();
    }
    
    void data_02_report() {
        this->data_02_sizeout_set(this->data_02_buffer->getSize());
        this->data_02_chanout_set(this->data_02_buffer->getChannels());
        this->data_02_srout_set(this->data_02_buffer->getSampleRate());
    }
    
    void data_03_init() {
        this->data_03_buffer->setWantsFill(true);
    }
    
    Index data_03_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        number size = 0;
        return (Index)(size);
    }
    
    void data_03_dspsetup(bool force) {
        if ((bool)(this->data_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        if (this->data_03_sizemode == 2) {
            this->data_03_buffer = this->data_03_buffer->setSize((Index)(this->mstosamps(this->data_03_sizems)));
            updateDataRef(this, this->data_03_buffer);
        } else if (this->data_03_sizemode == 3) {
            this->data_03_buffer = this->data_03_buffer->setSize(this->data_03_evaluateSizeExpr(this->samplerate(), this->vectorsize()));
            updateDataRef(this, this->data_03_buffer);
        }
    
        this->data_03_setupDone = true;
    }
    
    void data_03_bufferUpdated() {
        this->data_03_report();
    }
    
    void data_03_report() {
        this->data_03_sizeout_set(this->data_03_buffer->getSize());
        this->data_03_chanout_set(this->data_03_buffer->getChannels());
        this->data_03_srout_set(this->data_03_buffer->getSampleRate());
    }
    
    void data_04_init() {
        this->data_04_buffer->setWantsFill(true);
    }
    
    Index data_04_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        number size = 0;
        return (Index)(size);
    }
    
    void data_04_dspsetup(bool force) {
        if ((bool)(this->data_04_setupDone) && (bool)(!(bool)(force)))
            return;
    
        if (this->data_04_sizemode == 2) {
            this->data_04_buffer = this->data_04_buffer->setSize((Index)(this->mstosamps(this->data_04_sizems)));
            updateDataRef(this, this->data_04_buffer);
        } else if (this->data_04_sizemode == 3) {
            this->data_04_buffer = this->data_04_buffer->setSize(this->data_04_evaluateSizeExpr(this->samplerate(), this->vectorsize()));
            updateDataRef(this, this->data_04_buffer);
        }
    
        this->data_04_setupDone = true;
    }
    
    void data_04_bufferUpdated() {
        this->data_04_report();
    }
    
    void data_04_report() {
        this->data_04_sizeout_set(this->data_04_buffer->getSize());
        this->data_04_chanout_set(this->data_04_buffer->getChannels());
        this->data_04_srout_set(this->data_04_buffer->getSampleRate());
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        data_01_sizeout = 0;
        data_01_size = 0;
        data_01_sizems = 0;
        data_01_channels = 2;
        data_02_sizeout = 0;
        data_02_size = 0;
        data_02_sizems = 0;
        data_02_channels = 2;
        data_03_sizeout = 0;
        data_03_size = 0;
        data_03_sizems = 0;
        data_03_channels = 2;
        data_04_sizeout = 0;
        data_04_size = 0;
        data_04_sizems = 0;
        data_04_channels = 2;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        data_01_sizemode = 0;
        data_01_setupDone = false;
        data_02_sizemode = 0;
        data_02_setupDone = false;
        data_03_sizemode = 0;
        data_03_setupDone = false;
        data_04_sizemode = 0;
        data_04_setupDone = false;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number data_01_sizeout;
        number data_01_size;
        number data_01_sizems;
        number data_01_channels;
        number data_02_sizeout;
        number data_02_size;
        number data_02_sizems;
        number data_02_channels;
        number data_03_sizeout;
        number data_03_size;
        number data_03_sizems;
        number data_03_channels;
        number data_04_sizeout;
        number data_04_size;
        number data_04_sizems;
        number data_04_channels;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Float32BufferRef data_01_buffer;
        Int data_01_sizemode;
        bool data_01_setupDone;
        Float32BufferRef data_02_buffer;
        Int data_02_sizemode;
        bool data_02_setupDone;
        Float32BufferRef data_03_buffer;
        Int data_03_sizemode;
        bool data_03_setupDone;
        Float32BufferRef data_04_buffer;
        Int data_04_sizemode;
        bool data_04_setupDone;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

rnbomatic()
{
}

~rnbomatic()
{
    delete this->patcher_01;
    delete this->p_27;
    delete this->p_28;
    delete this->p_29;
    for (int i = 0; i < 4; i++) {
        delete p_30[i];
    }
    delete this->p_31;
    delete this->p_32;
    delete this->p_33;
    delete this->p_34;
}

rnbomatic* getTopLevelPatcher() {
    return this;
}

void cancelClockEvents()
{
    getEngine()->flushClockEvents(this, -1987572531, false);
    getEngine()->flushClockEvents(this, -834257525, false);
    getEngine()->flushClockEvents(this, 892732297, false);
    getEngine()->flushClockEvents(this, 29237386, false);
    getEngine()->flushClockEvents(this, 1935387534, false);
}

template <typename T> void listquicksort(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    if (l < h) {
        Int p = (Int)(this->listpartition(arr, sortindices, l, h, ascending));
        this->listquicksort(arr, sortindices, l, p - 1, ascending);
        this->listquicksort(arr, sortindices, p + 1, h, ascending);
    }
}

template <typename T> Int listpartition(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    number x = arr[(Index)h];
    Int i = (Int)(l - 1);

    for (Int j = (Int)(l); j <= h - 1; j++) {
        bool asc = (bool)((bool)(ascending) && arr[(Index)j] <= x);
        bool desc = (bool)((bool)(!(bool)(ascending)) && arr[(Index)j] >= x);

        if ((bool)(asc) || (bool)(desc)) {
            i++;
            this->listswapelements(arr, i, j);
            this->listswapelements(sortindices, i, j);
        }
    }

    i++;
    this->listswapelements(arr, i, h);
    this->listswapelements(sortindices, i, h);
    return i;
}

template <typename T> void listswapelements(T& arr, Int a, Int b) {
    auto tmp = arr[(Index)a];
    arr[(Index)a] = arr[(Index)b];
    arr[(Index)b] = tmp;
}

number samplerate() {
    return this->sr;
}

number minimum(number x, number y) {
    return (y < x ? y : x);
}

number maximum(number x, number y) {
    return (x < y ? y : x);
}

number mstosamps(MillisecondTime ms) {
    return ms * this->sr * 0.001;
}

MillisecondTime currenttime() {
    return this->_currentTime;
}

number tempo() {
    return this->getTopLevelPatcher()->globaltransport_getTempo();
}

number mstobeats(number ms) {
    return ms * this->tempo() * 0.008 / (number)480;
}

MillisecondTime sampstoms(number samps) {
    return samps * 1000 / this->sr;
}

ParameterIndex getParameterIndexForID(ConstCharPointer paramid) const {
    if (!stringCompare(paramid, "playing")) {
        return 0;
    }

    if (!stringCompare(paramid, "bitcrushing")) {
        return 1;
    }

    if (!stringCompare(paramid, "drum9")) {
        return 2;
    }

    if (!stringCompare(paramid, "drum1")) {
        return 3;
    }

    if (!stringCompare(paramid, "key_offset")) {
        return 4;
    }

    if (!stringCompare(paramid, "current_beat")) {
        return 5;
    }

    if (!stringCompare(paramid, "drum10")) {
        return 6;
    }

    if (!stringCompare(paramid, "drum2")) {
        return 7;
    }

    if (!stringCompare(paramid, "drum11")) {
        return 8;
    }

    if (!stringCompare(paramid, "drum3")) {
        return 9;
    }

    if (!stringCompare(paramid, "tempo")) {
        return 10;
    }

    if (!stringCompare(paramid, "drum12")) {
        return 11;
    }

    if (!stringCompare(paramid, "drum4")) {
        return 12;
    }

    if (!stringCompare(paramid, "octave")) {
        return 13;
    }

    if (!stringCompare(paramid, "reverb_mix")) {
        return 14;
    }

    if (!stringCompare(paramid, "drum13")) {
        return 15;
    }

    if (!stringCompare(paramid, "drum5")) {
        return 16;
    }

    if (!stringCompare(paramid, "chord_1")) {
        return 17;
    }

    if (!stringCompare(paramid, "drum14")) {
        return 18;
    }

    if (!stringCompare(paramid, "drum6")) {
        return 19;
    }

    if (!stringCompare(paramid, "chord_2")) {
        return 20;
    }

    if (!stringCompare(paramid, "drum15")) {
        return 21;
    }

    if (!stringCompare(paramid, "drum7")) {
        return 22;
    }

    if (!stringCompare(paramid, "drum16")) {
        return 23;
    }

    if (!stringCompare(paramid, "drum8")) {
        return 24;
    }

    if (!stringCompare(paramid, "chord_3")) {
        return 25;
    }

    if (!stringCompare(paramid, "chord_4")) {
        return 26;
    }

    if (!stringCompare(paramid, "message_obj-242/bangval")) {
        return 27;
    }

    if (!stringCompare(paramid, "number_obj-36/value")) {
        return 28;
    }

    if (!stringCompare(paramid, "toggle_obj-55/value")) {
        return 29;
    }

    return INVALID_INDEX;
}

Index getNumMidiInputPorts() const {
    return 1;
}

void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
    this->updateTime(time);
    this->patcher_01_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
}

Index getNumMidiOutputPorts() const {
    return 0;
}

void process(
    SampleValue ** inputs,
    Index numInputs,
    SampleValue ** outputs,
    Index numOutputs,
    Index n
) {
    RNBO_UNUSED(numInputs);
    RNBO_UNUSED(inputs);
    this->vs = n;
    this->updateTime(this->getEngine()->getCurrentTime());
    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
    this->p_27_perform(n);
    this->p_28_perform(n);
    this->p_30_perform(this->signals[0], n);
    this->p_29_perform(this->signals[0], this->zeroBuffer, this->signals[1], this->dummyBuffer, n);
    this->limi_01_perform(this->signals[1], this->signals[0], n);
    this->signalsend_06_perform(this->signals[0], this->signals[1], n);
    this->signalreceive_08_perform(this->signals[1], this->signals[0], n);
    this->dspexpr_69_perform(this->signals[0], this->dspexpr_69_in2, this->signals[1], n);

    this->patcher_01_perform(
        this->signals[1],
        this->signals[1],
        this->dummyBuffer,
        this->dummyBuffer,
        this->dummyBuffer,
        this->dummyBuffer,
        this->dummyBuffer,
        this->signals[0],
        this->signals[2],
        n
    );

    this->p_31_perform(n);
    this->p_32_perform(n);

    this->groove_01_perform(
        this->groove_01_rate_auto,
        this->groove_01_begin,
        this->groove_01_end,
        this->signals[1],
        this->signals[3],
        this->dummyBuffer,
        n
    );

    this->groove_02_perform(
        this->groove_02_rate_auto,
        this->groove_02_begin,
        this->groove_02_end,
        this->signals[4],
        this->signals[5],
        this->dummyBuffer,
        n
    );

    this->groove_03_perform(
        this->groove_03_rate_auto,
        this->groove_03_begin,
        this->groove_03_end,
        this->signals[6],
        this->signals[7],
        this->dummyBuffer,
        n
    );

    this->groove_04_perform(
        this->groove_04_rate_auto,
        this->groove_04_begin,
        this->groove_04_end,
        this->signals[8],
        this->signals[9],
        this->dummyBuffer,
        n
    );

    this->signaladder_01_perform(
        this->signals[1],
        this->signals[4],
        this->signals[6],
        this->signals[8],
        this->signals[8],
        n
    );

    this->signalsend_07_perform(this->signals[8], this->signals[10], n);
    this->signalreceive_07_perform(this->signals[10], this->signals[6], n);
    this->signaladder_02_perform(this->signals[6], this->signals[0], out1, n);

    this->signaladder_03_perform(
        this->signals[3],
        this->signals[5],
        this->signals[7],
        this->signals[9],
        this->signals[9],
        n
    );

    this->signalsend_08_perform(this->signals[9], this->signals[0], n);
    this->signalreceive_09_perform(this->signals[0], this->signals[7], n);
    this->signaladder_04_perform(this->signals[7], this->signals[2], out2, n);
    this->p_33_perform(n);
    this->p_34_perform(n);
    this->stackprotect_perform(n);
    this->globaltransport_advance();
    this->audioProcessSampleCount += this->vs;
}

void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
        Index i;

        for (i = 0; i < 11; i++) {
            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
        }

        this->globaltransport_tempo = resizeSignal(this->globaltransport_tempo, this->maxvs, maxBlockSize);
        this->globaltransport_state = resizeSignal(this->globaltransport_state, this->maxvs, maxBlockSize);
        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
        this->didAllocateSignals = true;
    }

    const bool sampleRateChanged = sampleRate != this->sr;
    const bool maxvsChanged = maxBlockSize != this->maxvs;
    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;

    if (sampleRateChanged || maxvsChanged) {
        this->vs = maxBlockSize;
        this->maxvs = maxBlockSize;
        this->sr = sampleRate;
        this->invsr = 1 / sampleRate;
    }

    this->limi_01_dspsetup(forceDSPSetup);
    this->groove_01_dspsetup(forceDSPSetup);
    this->groove_02_dspsetup(forceDSPSetup);
    this->groove_03_dspsetup(forceDSPSetup);
    this->groove_04_dspsetup(forceDSPSetup);
    this->globaltransport_dspsetup(forceDSPSetup);
    this->patcher_01->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_27->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_28->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_29->prepareToProcess(sampleRate, maxBlockSize, force);

    for (Index i = 0; i < 4; i++) {
        this->p_30[i]->prepareToProcess(sampleRate, maxBlockSize, force);
    }

    this->p_31->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_32->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_33->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_34->prepareToProcess(sampleRate, maxBlockSize, force);

    if (sampleRateChanged)
        this->onSampleRateChanged(sampleRate);
}

void setProbingTarget(MessageTag id) {
    switch (id) {
    default:
        this->setProbingIndex(-1);
        break;
    }
}

void setProbingIndex(ProbingIndex ) {}

Index getProbingChannels(MessageTag outletId) const {
    RNBO_UNUSED(outletId);
    return 0;
}

DataRef* getDataRef(DataRefIndex index)  {
    switch (index) {
    case 0:
        return addressOf(this->RNBODefaultMtofLookupTable256);
        break;
    case 1:
        return addressOf(this->perc);
        break;
    case 2:
        return addressOf(this->snare);
        break;
    case 3:
        return addressOf(this->kick);
        break;
    case 4:
        return addressOf(this->hat);
        break;
    default:
        return nullptr;
    }
}

DataRefIndex getNumDataRefs() const {
    return 5;
}

void fillRNBODefaultMtofLookupTable256(DataRef& ref) {
    Float64BufferRef buffer;
    buffer = new Float64Buffer(ref);
    number bufsize = buffer->getSize();

    for (Index i = 0; i < bufsize; i++) {
        number midivalue = -256. + (number)512. / (bufsize - 1) * i;
        buffer[i] = rnbo_exp(.057762265 * (midivalue - 69.0));
    }
}

void fillDataRef(DataRefIndex index, DataRef& ref) {
    switch (index) {
    case 0:
        this->fillRNBODefaultMtofLookupTable256(ref);
        break;
    }
}

void zeroDataRef(DataRef& ref) {
    ref->setZero();
}

void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
    this->updateTime(time);

    if (index == 1) {
        this->groove_01_buffer = new Float32Buffer(this->perc);
    }

    if (index == 2) {
        this->groove_02_buffer = new Float32Buffer(this->snare);
    }

    if (index == 3) {
        this->groove_03_buffer = new Float32Buffer(this->kick);
    }

    if (index == 4) {
        this->groove_04_buffer = new Float32Buffer(this->hat);
    }

    this->patcher_01->processDataViewUpdate(index, time);
    this->p_27->processDataViewUpdate(index, time);
    this->p_28->processDataViewUpdate(index, time);
    this->p_29->processDataViewUpdate(index, time);

    for (Index i = 0; i < 4; i++) {
        this->p_30[i]->processDataViewUpdate(index, time);
    }

    this->p_31->processDataViewUpdate(index, time);
    this->p_32->processDataViewUpdate(index, time);
    this->p_33->processDataViewUpdate(index, time);
    this->p_34->processDataViewUpdate(index, time);
}

void initialize() {
    this->RNBODefaultMtofLookupTable256 = initDataRef("RNBODefaultMtofLookupTable256", true, nullptr);

    this->perc = initDataRef(
        "perc",
        false,
        "/Users/williamozeas/Documents/GitHub/CMUCapstone/Samples/SD_SEISMIC_perc_hiya.wav"
    );

    this->snare = initDataRef(
        "snare",
        false,
        "/Users/williamozeas/Documents/GitHub/CMUCapstone/Samples/SD_SEISMIC_snare_clucky.wav"
    );

    this->kick = initDataRef(
        "kick",
        false,
        "/Users/williamozeas/Documents/GitHub/CMUCapstone/Samples/SD_SEISMIC_kick_cleaner.wav"
    );

    this->hat = initDataRef(
        "hat",
        false,
        "/Users/williamozeas/Documents/GitHub/CMUCapstone/Samples/SD_SEISMIC_hat_perfect.wav"
    );

    this->assign_defaults();
    this->setState();
    this->RNBODefaultMtofLookupTable256->setIndex(0);
    this->perc->setIndex(1);
    this->groove_01_buffer = new Float32Buffer(this->perc);
    this->snare->setIndex(2);
    this->groove_02_buffer = new Float32Buffer(this->snare);
    this->kick->setIndex(3);
    this->groove_03_buffer = new Float32Buffer(this->kick);
    this->hat->setIndex(4);
    this->groove_04_buffer = new Float32Buffer(this->hat);
    this->initializeObjects();
    this->allocateDataRefs();
    this->startup();
}

Index getIsMuted()  {
    return this->isMuted;
}

void setIsMuted(Index v)  {
    this->isMuted = v;
}

Index getPatcherSerial() const {
    return 0;
}

void getState(PatcherStateInterface& ) {}

void setState() {
    this->patcher_01 = new RNBOSubpatcher_1051();
    this->patcher_01->setEngineAndPatcher(this->getEngine(), this);
    this->patcher_01->initialize();
    this->patcher_01->setParameterOffset(this->getParameterOffset(this->patcher_01));
    this->p_27 = new RNBOSubpatcher_1052();
    this->p_27->setEngineAndPatcher(this->getEngine(), this);
    this->p_27->initialize();
    this->p_27->setParameterOffset(this->getParameterOffset(this->p_27));
    this->p_28 = new RNBOSubpatcher_1053();
    this->p_28->setEngineAndPatcher(this->getEngine(), this);
    this->p_28->initialize();
    this->p_28->setParameterOffset(this->getParameterOffset(this->p_28));
    this->p_29 = new RNBOSubpatcher_1054();
    this->p_29->setEngineAndPatcher(this->getEngine(), this);
    this->p_29->initialize();
    this->p_29->setParameterOffset(this->getParameterOffset(this->p_29));

    for (Index i = 0; i < 4; i++) {
        this->p_30[(Index)i] = new RNBOSubpatcher_1055();
        this->p_30[(Index)i]->setEngineAndPatcher(this->getEngine(), this);
        this->p_30[(Index)i]->initialize();
        this->p_30[(Index)i]->setParameterOffset(this->getParameterOffset(this->p_30[0]));
        this->p_30[(Index)i]->setVoiceIndex(i + 1);
    }

    this->p_31 = new RNBOSubpatcher_1056();
    this->p_31->setEngineAndPatcher(this->getEngine(), this);
    this->p_31->initialize();
    this->p_31->setParameterOffset(this->getParameterOffset(this->p_31));
    this->p_32 = new RNBOSubpatcher_1057();
    this->p_32->setEngineAndPatcher(this->getEngine(), this);
    this->p_32->initialize();
    this->p_32->setParameterOffset(this->getParameterOffset(this->p_32));
    this->p_33 = new RNBOSubpatcher_1058();
    this->p_33->setEngineAndPatcher(this->getEngine(), this);
    this->p_33->initialize();
    this->p_33->setParameterOffset(this->getParameterOffset(this->p_33));
    this->p_34 = new RNBOSubpatcher_1059();
    this->p_34->setEngineAndPatcher(this->getEngine(), this);
    this->p_34->initialize();
    this->p_34->setParameterOffset(this->getParameterOffset(this->p_34));
}

void getPreset(PatcherStateInterface& preset) {
    preset["__presetid"] = "rnbo";
    this->param_13_getPresetValue(getSubState(preset, "playing"));
    this->param_14_getPresetValue(getSubState(preset, "bitcrushing"));
    this->param_15_getPresetValue(getSubState(preset, "drum9"));
    this->param_16_getPresetValue(getSubState(preset, "drum1"));
    this->param_17_getPresetValue(getSubState(preset, "key_offset"));
    this->param_18_getPresetValue(getSubState(preset, "current_beat"));
    this->param_19_getPresetValue(getSubState(preset, "drum10"));
    this->param_20_getPresetValue(getSubState(preset, "drum2"));
    this->param_21_getPresetValue(getSubState(preset, "drum11"));
    this->param_22_getPresetValue(getSubState(preset, "drum3"));
    this->param_23_getPresetValue(getSubState(preset, "tempo"));
    this->param_24_getPresetValue(getSubState(preset, "drum12"));
    this->param_25_getPresetValue(getSubState(preset, "drum4"));
    this->param_26_getPresetValue(getSubState(preset, "octave"));
    this->param_27_getPresetValue(getSubState(preset, "reverb_mix"));
    this->param_28_getPresetValue(getSubState(preset, "drum13"));
    this->param_29_getPresetValue(getSubState(preset, "drum5"));
    this->param_30_getPresetValue(getSubState(preset, "chord_1"));
    this->param_31_getPresetValue(getSubState(preset, "drum14"));
    this->param_32_getPresetValue(getSubState(preset, "drum6"));
    this->param_33_getPresetValue(getSubState(preset, "chord_2"));
    this->param_34_getPresetValue(getSubState(preset, "drum15"));
    this->param_35_getPresetValue(getSubState(preset, "drum7"));
    this->param_36_getPresetValue(getSubState(preset, "drum16"));
    this->param_37_getPresetValue(getSubState(preset, "drum8"));
    this->param_38_getPresetValue(getSubState(preset, "chord_3"));
    this->param_39_getPresetValue(getSubState(preset, "chord_4"));
    this->patcher_01->getPreset(getSubState(getSubState(preset, "__sps"), "patcher_obj-15"));
    this->p_27->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-10"));
    this->p_28->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-19"));
    this->p_29->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-45"));

    for (Index i = 0; i < 4; i++)
        this->p_30[i]->getPreset(getSubStateAt(getSubState(preset, "__sps"), "p_obj-38", i));

    this->p_31->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-44"));
    this->p_32->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-52"));
    this->p_33->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-193"));
    this->p_34->getPreset(getSubState(getSubState(preset, "__sps"), "p_obj-200"));
}

void setPreset(MillisecondTime time, PatcherStateInterface& preset) {
    this->updateTime(time);
    this->param_13_setPresetValue(getSubState(preset, "playing"));
    this->param_14_setPresetValue(getSubState(preset, "bitcrushing"));
    this->param_15_setPresetValue(getSubState(preset, "drum9"));
    this->param_16_setPresetValue(getSubState(preset, "drum1"));
    this->param_17_setPresetValue(getSubState(preset, "key_offset"));
    this->param_18_setPresetValue(getSubState(preset, "current_beat"));
    this->param_19_setPresetValue(getSubState(preset, "drum10"));
    this->param_20_setPresetValue(getSubState(preset, "drum2"));
    this->param_21_setPresetValue(getSubState(preset, "drum11"));
    this->param_22_setPresetValue(getSubState(preset, "drum3"));
    this->param_23_setPresetValue(getSubState(preset, "tempo"));
    this->param_24_setPresetValue(getSubState(preset, "drum12"));
    this->param_25_setPresetValue(getSubState(preset, "drum4"));
    this->param_26_setPresetValue(getSubState(preset, "octave"));
    this->param_27_setPresetValue(getSubState(preset, "reverb_mix"));
    this->param_28_setPresetValue(getSubState(preset, "drum13"));
    this->param_29_setPresetValue(getSubState(preset, "drum5"));
    this->param_30_setPresetValue(getSubState(preset, "chord_1"));
    this->param_31_setPresetValue(getSubState(preset, "drum14"));
    this->param_32_setPresetValue(getSubState(preset, "drum6"));
    this->param_33_setPresetValue(getSubState(preset, "chord_2"));
    this->param_34_setPresetValue(getSubState(preset, "drum15"));
    this->param_35_setPresetValue(getSubState(preset, "drum7"));
    this->param_36_setPresetValue(getSubState(preset, "drum16"));
    this->param_37_setPresetValue(getSubState(preset, "drum8"));
    this->param_38_setPresetValue(getSubState(preset, "chord_3"));
    this->param_39_setPresetValue(getSubState(preset, "chord_4"));

    this->p_29->param_07_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "p_obj-45"), "release")
    );

    this->p_29->param_08_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "p_obj-45"), "attack")
    );

    this->p_29->param_09_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "p_obj-45"), "ratio")
    );

    this->p_29->param_10_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "p_obj-45"), "threshold")
    );

    this->p_29->param_11_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "p_obj-45"), "input_gain")
    );

    this->p_29->param_12_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "p_obj-45"), "parallel_mix")
    );

    this->patcher_01->param_04_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "patcher_obj-15"), "damp")
    );

    this->patcher_01->param_06_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "patcher_obj-15"), "diff")
    );

    this->patcher_01->param_05_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "patcher_obj-15"), "size")
    );

    this->patcher_01->param_01_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "patcher_obj-15"), "decay")
    );

    this->patcher_01->param_03_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "patcher_obj-15"), "jitter")
    );

    this->patcher_01->param_02_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "patcher_obj-15"), "mix")
    );
}

void processTempoEvent(MillisecondTime time, Tempo tempo) {
    this->updateTime(time);

    if (this->globaltransport_setTempo(tempo, false)) {
        this->patcher_01->processTempoEvent(time, tempo);
        this->p_27->processTempoEvent(time, tempo);
        this->p_28->processTempoEvent(time, tempo);
        this->p_29->processTempoEvent(time, tempo);

        for (Index i = 0; i < 4; i++) {
            this->p_30[i]->processTempoEvent(time, tempo);
        }

        this->p_31->processTempoEvent(time, tempo);
        this->p_32->processTempoEvent(time, tempo);
        this->p_33->processTempoEvent(time, tempo);
        this->p_34->processTempoEvent(time, tempo);
    }
}

void processTransportEvent(MillisecondTime time, TransportState state) {
    this->updateTime(time);

    if (this->globaltransport_setState(state, false)) {
        this->patcher_01->processTransportEvent(time, state);
        this->p_27->processTransportEvent(time, state);
        this->p_28->processTransportEvent(time, state);
        this->p_29->processTransportEvent(time, state);

        for (Index i = 0; i < 4; i++) {
            this->p_30[i]->processTransportEvent(time, state);
        }

        this->p_31->processTransportEvent(time, state);
        this->p_32->processTransportEvent(time, state);
        this->p_33->processTransportEvent(time, state);
        this->p_34->processTransportEvent(time, state);
        this->metro_01_onTransportChanged(state);
        this->metro_02_onTransportChanged(state);
    }
}

void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
    this->updateTime(time);

    if (this->globaltransport_setBeatTime(beattime, false)) {
        this->patcher_01->processBeatTimeEvent(time, beattime);
        this->p_27->processBeatTimeEvent(time, beattime);
        this->p_28->processBeatTimeEvent(time, beattime);
        this->p_29->processBeatTimeEvent(time, beattime);

        for (Index i = 0; i < 4; i++) {
            this->p_30[i]->processBeatTimeEvent(time, beattime);
        }

        this->p_31->processBeatTimeEvent(time, beattime);
        this->p_32->processBeatTimeEvent(time, beattime);
        this->p_33->processBeatTimeEvent(time, beattime);
        this->p_34->processBeatTimeEvent(time, beattime);
        this->metro_01_onBeatTimeChanged(beattime);
        this->metro_02_onBeatTimeChanged(beattime);
    }
}

void onSampleRateChanged(double ) {}

void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
    this->updateTime(time);

    if (this->globaltransport_setTimeSignature(numerator, denominator, false)) {
        this->patcher_01->processTimeSignatureEvent(time, numerator, denominator);
        this->p_27->processTimeSignatureEvent(time, numerator, denominator);
        this->p_28->processTimeSignatureEvent(time, numerator, denominator);
        this->p_29->processTimeSignatureEvent(time, numerator, denominator);

        for (Index i = 0; i < 4; i++) {
            this->p_30[i]->processTimeSignatureEvent(time, numerator, denominator);
        }

        this->p_31->processTimeSignatureEvent(time, numerator, denominator);
        this->p_32->processTimeSignatureEvent(time, numerator, denominator);
        this->p_33->processTimeSignatureEvent(time, numerator, denominator);
        this->p_34->processTimeSignatureEvent(time, numerator, denominator);
    }
}

void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
    this->updateTime(time);

    switch (index) {
    case 0:
        this->param_13_value_set(v);
        break;
    case 1:
        this->param_14_value_set(v);
        break;
    case 2:
        this->param_15_value_set(v);
        break;
    case 3:
        this->param_16_value_set(v);
        break;
    case 4:
        this->param_17_value_set(v);
        break;
    case 5:
        this->param_18_value_set(v);
        break;
    case 6:
        this->param_19_value_set(v);
        break;
    case 7:
        this->param_20_value_set(v);
        break;
    case 8:
        this->param_21_value_set(v);
        break;
    case 9:
        this->param_22_value_set(v);
        break;
    case 10:
        this->param_23_value_set(v);
        break;
    case 11:
        this->param_24_value_set(v);
        break;
    case 12:
        this->param_25_value_set(v);
        break;
    case 13:
        this->param_26_value_set(v);
        break;
    case 14:
        this->param_27_value_set(v);
        break;
    case 15:
        this->param_28_value_set(v);
        break;
    case 16:
        this->param_29_value_set(v);
        break;
    case 17:
        this->param_30_value_set(v);
        break;
    case 18:
        this->param_31_value_set(v);
        break;
    case 19:
        this->param_32_value_set(v);
        break;
    case 20:
        this->param_33_value_set(v);
        break;
    case 21:
        this->param_34_value_set(v);
        break;
    case 22:
        this->param_35_value_set(v);
        break;
    case 23:
        this->param_36_value_set(v);
        break;
    case 24:
        this->param_37_value_set(v);
        break;
    case 25:
        this->param_38_value_set(v);
        break;
    case 26:
        this->param_39_value_set(v);
        break;
    case 27:
        this->message_50_bangval_bang();
        break;
    case 28:
        this->numberobj_47_value_set(v);
        break;
    case 29:
        this->toggle_01_value_set(v);
        break;
    default:
        index -= 30;

        if (index < this->patcher_01->getNumParameters())
            this->patcher_01->setParameterValue(index, v, time);

        index -= this->patcher_01->getNumParameters();

        if (index < this->p_27->getNumParameters())
            this->p_27->setParameterValue(index, v, time);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            this->p_28->setParameterValue(index, v, time);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29->getNumParameters())
            this->p_29->setParameterValue(index, v, time);

        index -= this->p_29->getNumParameters();

        if (index < this->p_30[0]->getNumParameters())
            this->p_30[0]->setPolyParameterValue((PatcherInterface**)this->p_30, index, v, time);

        index -= this->p_30[0]->getNumParameters();

        if (index < this->p_31->getNumParameters())
            this->p_31->setParameterValue(index, v, time);

        index -= this->p_31->getNumParameters();

        if (index < this->p_32->getNumParameters())
            this->p_32->setParameterValue(index, v, time);

        index -= this->p_32->getNumParameters();

        if (index < this->p_33->getNumParameters())
            this->p_33->setParameterValue(index, v, time);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            this->p_34->setParameterValue(index, v, time);

        break;
    }
}

void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValue(index, value, time);
}

void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValueNormalized(index, value, time);
}

ParameterValue getParameterValue(ParameterIndex index)  {
    switch (index) {
    case 0:
        return this->param_13_value;
    case 1:
        return this->param_14_value;
    case 2:
        return this->param_15_value;
    case 3:
        return this->param_16_value;
    case 4:
        return this->param_17_value;
    case 5:
        return this->param_18_value;
    case 6:
        return this->param_19_value;
    case 7:
        return this->param_20_value;
    case 8:
        return this->param_21_value;
    case 9:
        return this->param_22_value;
    case 10:
        return this->param_23_value;
    case 11:
        return this->param_24_value;
    case 12:
        return this->param_25_value;
    case 13:
        return this->param_26_value;
    case 14:
        return this->param_27_value;
    case 15:
        return this->param_28_value;
    case 16:
        return this->param_29_value;
    case 17:
        return this->param_30_value;
    case 18:
        return this->param_31_value;
    case 19:
        return this->param_32_value;
    case 20:
        return this->param_33_value;
    case 21:
        return this->param_34_value;
    case 22:
        return this->param_35_value;
    case 23:
        return this->param_36_value;
    case 24:
        return this->param_37_value;
    case 25:
        return this->param_38_value;
    case 26:
        return this->param_39_value;
    case 28:
        return this->numberobj_47_value;
    case 29:
        return this->toggle_01_value;
    default:
        index -= 30;

        if (index < this->patcher_01->getNumParameters())
            return this->patcher_01->getParameterValue(index);

        index -= this->patcher_01->getNumParameters();

        if (index < this->p_27->getNumParameters())
            return this->p_27->getParameterValue(index);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            return this->p_28->getParameterValue(index);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29->getNumParameters())
            return this->p_29->getParameterValue(index);

        index -= this->p_29->getNumParameters();

        if (index < this->p_30[0]->getNumParameters())
            return this->p_30[0]->getPolyParameterValue((PatcherInterface**)this->p_30, index);

        index -= this->p_30[0]->getNumParameters();

        if (index < this->p_31->getNumParameters())
            return this->p_31->getParameterValue(index);

        index -= this->p_31->getNumParameters();

        if (index < this->p_32->getNumParameters())
            return this->p_32->getParameterValue(index);

        index -= this->p_32->getNumParameters();

        if (index < this->p_33->getNumParameters())
            return this->p_33->getParameterValue(index);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            return this->p_34->getParameterValue(index);

        return 0;
    }
}

ParameterIndex getNumSignalInParameters() const {
    return 0;
}

ParameterIndex getNumSignalOutParameters() const {
    return 0;
}

ParameterIndex getNumParameters() const {
    return 30 + this->patcher_01->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters() + this->p_29->getNumParameters() + this->p_30[0]->getNumParameters() + this->p_31->getNumParameters() + this->p_32->getNumParameters() + this->p_33->getNumParameters() + this->p_34->getNumParameters();
}

ConstCharPointer getParameterName(ParameterIndex index) const {
    switch (index) {
    case 0:
        return "playing";
    case 1:
        return "bitcrushing";
    case 2:
        return "drum9";
    case 3:
        return "drum1";
    case 4:
        return "key_offset";
    case 5:
        return "current_beat";
    case 6:
        return "drum10";
    case 7:
        return "drum2";
    case 8:
        return "drum11";
    case 9:
        return "drum3";
    case 10:
        return "tempo";
    case 11:
        return "drum12";
    case 12:
        return "drum4";
    case 13:
        return "octave";
    case 14:
        return "reverb_mix";
    case 15:
        return "drum13";
    case 16:
        return "drum5";
    case 17:
        return "chord_1";
    case 18:
        return "drum14";
    case 19:
        return "drum6";
    case 20:
        return "chord_2";
    case 21:
        return "drum15";
    case 22:
        return "drum7";
    case 23:
        return "drum16";
    case 24:
        return "drum8";
    case 25:
        return "chord_3";
    case 26:
        return "chord_4";
    case 27:
        return "message_50_bangval";
    case 28:
        return "numberobj_47_value";
    case 29:
        return "toggle_01_value";
    default:
        index -= 30;

        if (index < this->patcher_01->getNumParameters())
            return this->patcher_01->getParameterName(index);

        index -= this->patcher_01->getNumParameters();

        if (index < this->p_27->getNumParameters())
            return this->p_27->getParameterName(index);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            return this->p_28->getParameterName(index);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29->getNumParameters())
            return this->p_29->getParameterName(index);

        index -= this->p_29->getNumParameters();

        if (index < this->p_30[0]->getNumParameters()) {
            {
                return this->p_30[0]->getParameterName(index);
            }
        }

        index -= this->p_30[0]->getNumParameters();

        if (index < this->p_31->getNumParameters())
            return this->p_31->getParameterName(index);

        index -= this->p_31->getNumParameters();

        if (index < this->p_32->getNumParameters())
            return this->p_32->getParameterName(index);

        index -= this->p_32->getNumParameters();

        if (index < this->p_33->getNumParameters())
            return this->p_33->getParameterName(index);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            return this->p_34->getParameterName(index);

        return "bogus";
    }
}

ConstCharPointer getParameterId(ParameterIndex index) const {
    switch (index) {
    case 0:
        return "playing";
    case 1:
        return "bitcrushing";
    case 2:
        return "drum9";
    case 3:
        return "drum1";
    case 4:
        return "key_offset";
    case 5:
        return "current_beat";
    case 6:
        return "drum10";
    case 7:
        return "drum2";
    case 8:
        return "drum11";
    case 9:
        return "drum3";
    case 10:
        return "tempo";
    case 11:
        return "drum12";
    case 12:
        return "drum4";
    case 13:
        return "octave";
    case 14:
        return "reverb_mix";
    case 15:
        return "drum13";
    case 16:
        return "drum5";
    case 17:
        return "chord_1";
    case 18:
        return "drum14";
    case 19:
        return "drum6";
    case 20:
        return "chord_2";
    case 21:
        return "drum15";
    case 22:
        return "drum7";
    case 23:
        return "drum16";
    case 24:
        return "drum8";
    case 25:
        return "chord_3";
    case 26:
        return "chord_4";
    case 27:
        return "message_obj-242/bangval";
    case 28:
        return "number_obj-36/value";
    case 29:
        return "toggle_obj-55/value";
    default:
        index -= 30;

        if (index < this->patcher_01->getNumParameters())
            return this->patcher_01->getParameterId(index);

        index -= this->patcher_01->getNumParameters();

        if (index < this->p_27->getNumParameters())
            return this->p_27->getParameterId(index);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            return this->p_28->getParameterId(index);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29->getNumParameters())
            return this->p_29->getParameterId(index);

        index -= this->p_29->getNumParameters();

        if (index < this->p_30[0]->getNumParameters()) {
            {
                return this->p_30[0]->getParameterId(index);
            }
        }

        index -= this->p_30[0]->getNumParameters();

        if (index < this->p_31->getNumParameters())
            return this->p_31->getParameterId(index);

        index -= this->p_31->getNumParameters();

        if (index < this->p_32->getNumParameters())
            return this->p_32->getParameterId(index);

        index -= this->p_32->getNumParameters();

        if (index < this->p_33->getNumParameters())
            return this->p_33->getParameterId(index);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            return this->p_34->getParameterId(index);

        return "bogus";
    }
}

void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
    {
        switch (index) {
        case 0:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 1:
            info->type = ParameterTypeNumber;
            info->initialValue = 0.01;
            info->min = 0.01;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 2:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 3:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 4:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 5:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 32;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 6:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 7:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 8:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 9:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 10:
            info->type = ParameterTypeNumber;
            info->initialValue = 110;
            info->min = 0;
            info->max = 200;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 11:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 12:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 13:
            info->type = ParameterTypeNumber;
            info->initialValue = 4;
            info->min = 0;
            info->max = 8;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 14:
            info->type = ParameterTypeNumber;
            info->initialValue = 50;
            info->min = 0;
            info->max = 100;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 15:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 16:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 17:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 4;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 18:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 19:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 20:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 4;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 21:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 22:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 23:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 24:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 15;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 25:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 4;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 26:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 4;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 27:
            info->type = ParameterTypeBang;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = false;
            info->visible = false;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 28:
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = false;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        case 29:
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = false;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
        default:
            index -= 30;

            if (index < this->patcher_01->getNumParameters())
                this->patcher_01->getParameterInfo(index, info);

            index -= this->patcher_01->getNumParameters();

            if (index < this->p_27->getNumParameters())
                this->p_27->getParameterInfo(index, info);

            index -= this->p_27->getNumParameters();

            if (index < this->p_28->getNumParameters())
                this->p_28->getParameterInfo(index, info);

            index -= this->p_28->getNumParameters();

            if (index < this->p_29->getNumParameters())
                this->p_29->getParameterInfo(index, info);

            index -= this->p_29->getNumParameters();

            if (index < this->p_30[0]->getNumParameters()) {
                for (Index i = 0; i < 4; i++) {
                    this->p_30[i]->getParameterInfo(index, info);
                }
            }

            index -= this->p_30[0]->getNumParameters();

            if (index < this->p_31->getNumParameters())
                this->p_31->getParameterInfo(index, info);

            index -= this->p_31->getNumParameters();

            if (index < this->p_32->getNumParameters())
                this->p_32->getParameterInfo(index, info);

            index -= this->p_32->getNumParameters();

            if (index < this->p_33->getNumParameters())
                this->p_33->getParameterInfo(index, info);

            index -= this->p_33->getNumParameters();

            if (index < this->p_34->getNumParameters())
                this->p_34->getParameterInfo(index, info);

            break;
        }
    }
}

void sendParameter(ParameterIndex index, bool ignoreValue) {
    this->getEngine()->notifyParameterValueChanged(index, (ignoreValue ? 0 : this->getParameterValue(index)), ignoreValue);
}

ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
    if (subpatcher == this->patcher_01)
        return 30;

    if (subpatcher == this->p_27)
        return 30 + this->patcher_01->getNumParameters();

    if (subpatcher == this->p_28)
        return 30 + this->patcher_01->getNumParameters() + this->p_27->getNumParameters();

    if (subpatcher == this->p_29)
        return 30 + this->patcher_01->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters();

    if (subpatcher == this->p_30[0])
        return 30 + this->patcher_01->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters() + this->p_29->getNumParameters();

    if (subpatcher == this->p_31)
        return 30 + this->patcher_01->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters() + this->p_29->getNumParameters() + this->p_30[0]->getNumParameters();

    if (subpatcher == this->p_32)
        return 30 + this->patcher_01->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters() + this->p_29->getNumParameters() + this->p_30[0]->getNumParameters() + this->p_31->getNumParameters();

    if (subpatcher == this->p_33)
        return 30 + this->patcher_01->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters() + this->p_29->getNumParameters() + this->p_30[0]->getNumParameters() + this->p_31->getNumParameters() + this->p_32->getNumParameters();

    if (subpatcher == this->p_34)
        return 30 + this->patcher_01->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters() + this->p_29->getNumParameters() + this->p_30[0]->getNumParameters() + this->p_31->getNumParameters() + this->p_32->getNumParameters() + this->p_33->getNumParameters();

    return 0;
}

ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
    if (steps == 1) {
        if (normalizedValue > 0) {
            normalizedValue = 1.;
        }
    } else {
        ParameterValue oneStep = (number)1. / (steps - 1);
        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
        normalizedValue = numberOfSteps * oneStep;
    }

    return normalizedValue;
}

ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
    case 4:
    case 28:
    case 29:
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0) / (1 - 0);
            return normalizedValue;
        }
    case 17:
    case 20:
    case 25:
    case 26:
        {
            value = (value < 0 ? 0 : (value > 4 ? 4 : value));
            ParameterValue normalizedValue = (value - 0) / (4 - 0);
            return normalizedValue;
        }
    case 13:
        {
            value = (value < 0 ? 0 : (value > 8 ? 8 : value));
            ParameterValue normalizedValue = (value - 0) / (8 - 0);
            return normalizedValue;
        }
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
        {
            value = (value < 0 ? 0 : (value > 15 ? 15 : value));
            ParameterValue normalizedValue = (value - 0) / (15 - 0);
            return normalizedValue;
        }
    case 14:
        {
            value = (value < 0 ? 0 : (value > 100 ? 100 : value));
            ParameterValue normalizedValue = (value - 0) / (100 - 0);
            return normalizedValue;
        }
    case 10:
        {
            value = (value < 0 ? 0 : (value > 200 ? 200 : value));
            ParameterValue normalizedValue = (value - 0) / (200 - 0);
            return normalizedValue;
        }
    case 5:
        {
            value = (value < 1 ? 1 : (value > 32 ? 32 : value));
            ParameterValue normalizedValue = (value - 1) / (32 - 1);
            return normalizedValue;
        }
    case 1:
        {
            value = (value < 0.01 ? 0.01 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0.01) / (1 - 0.01);
            return normalizedValue;
        }
    default:
        index -= 30;

        if (index < this->patcher_01->getNumParameters())
            return this->patcher_01->convertToNormalizedParameterValue(index, value);

        index -= this->patcher_01->getNumParameters();

        if (index < this->p_27->getNumParameters())
            return this->p_27->convertToNormalizedParameterValue(index, value);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            return this->p_28->convertToNormalizedParameterValue(index, value);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29->getNumParameters())
            return this->p_29->convertToNormalizedParameterValue(index, value);

        index -= this->p_29->getNumParameters();

        if (index < this->p_30[0]->getNumParameters()) {
            {
                return this->p_30[0]->convertToNormalizedParameterValue(index, value);
            }
        }

        index -= this->p_30[0]->getNumParameters();

        if (index < this->p_31->getNumParameters())
            return this->p_31->convertToNormalizedParameterValue(index, value);

        index -= this->p_31->getNumParameters();

        if (index < this->p_32->getNumParameters())
            return this->p_32->convertToNormalizedParameterValue(index, value);

        index -= this->p_32->getNumParameters();

        if (index < this->p_33->getNumParameters())
            return this->p_33->convertToNormalizedParameterValue(index, value);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            return this->p_34->convertToNormalizedParameterValue(index, value);

        return value;
    }
}

ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    value = (value < 0 ? 0 : (value > 1 ? 1 : value));

    switch (index) {
    case 0:
    case 4:
    case 28:
    case 29:
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (1 - 0);
            }
        }
    case 17:
    case 20:
    case 25:
    case 26:
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (4 - 0);
            }
        }
    case 13:
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (8 - 0);
            }
        }
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (15 - 0);
            }
        }
    case 14:
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (100 - 0);
            }
        }
    case 10:
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (200 - 0);
            }
        }
    case 5:
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 1 + value * (32 - 1);
            }
        }
    case 1:
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0.01 + value * (1 - 0.01);
            }
        }
    default:
        index -= 30;

        if (index < this->patcher_01->getNumParameters())
            return this->patcher_01->convertFromNormalizedParameterValue(index, value);

        index -= this->patcher_01->getNumParameters();

        if (index < this->p_27->getNumParameters())
            return this->p_27->convertFromNormalizedParameterValue(index, value);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            return this->p_28->convertFromNormalizedParameterValue(index, value);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29->getNumParameters())
            return this->p_29->convertFromNormalizedParameterValue(index, value);

        index -= this->p_29->getNumParameters();

        if (index < this->p_30[0]->getNumParameters()) {
            {
                return this->p_30[0]->convertFromNormalizedParameterValue(index, value);
            }
        }

        index -= this->p_30[0]->getNumParameters();

        if (index < this->p_31->getNumParameters())
            return this->p_31->convertFromNormalizedParameterValue(index, value);

        index -= this->p_31->getNumParameters();

        if (index < this->p_32->getNumParameters())
            return this->p_32->convertFromNormalizedParameterValue(index, value);

        index -= this->p_32->getNumParameters();

        if (index < this->p_33->getNumParameters())
            return this->p_33->convertFromNormalizedParameterValue(index, value);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            return this->p_34->convertFromNormalizedParameterValue(index, value);

        return value;
    }
}

ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
        return this->param_13_value_constrain(value);
    case 1:
        return this->param_14_value_constrain(value);
    case 2:
        return this->param_15_value_constrain(value);
    case 3:
        return this->param_16_value_constrain(value);
    case 4:
        return this->param_17_value_constrain(value);
    case 5:
        return this->param_18_value_constrain(value);
    case 6:
        return this->param_19_value_constrain(value);
    case 7:
        return this->param_20_value_constrain(value);
    case 8:
        return this->param_21_value_constrain(value);
    case 9:
        return this->param_22_value_constrain(value);
    case 10:
        return this->param_23_value_constrain(value);
    case 11:
        return this->param_24_value_constrain(value);
    case 12:
        return this->param_25_value_constrain(value);
    case 13:
        return this->param_26_value_constrain(value);
    case 14:
        return this->param_27_value_constrain(value);
    case 15:
        return this->param_28_value_constrain(value);
    case 16:
        return this->param_29_value_constrain(value);
    case 17:
        return this->param_30_value_constrain(value);
    case 18:
        return this->param_31_value_constrain(value);
    case 19:
        return this->param_32_value_constrain(value);
    case 20:
        return this->param_33_value_constrain(value);
    case 21:
        return this->param_34_value_constrain(value);
    case 22:
        return this->param_35_value_constrain(value);
    case 23:
        return this->param_36_value_constrain(value);
    case 24:
        return this->param_37_value_constrain(value);
    case 25:
        return this->param_38_value_constrain(value);
    case 26:
        return this->param_39_value_constrain(value);
    default:
        index -= 30;

        if (index < this->patcher_01->getNumParameters())
            return this->patcher_01->constrainParameterValue(index, value);

        index -= this->patcher_01->getNumParameters();

        if (index < this->p_27->getNumParameters())
            return this->p_27->constrainParameterValue(index, value);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            return this->p_28->constrainParameterValue(index, value);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29->getNumParameters())
            return this->p_29->constrainParameterValue(index, value);

        index -= this->p_29->getNumParameters();

        if (index < this->p_30[0]->getNumParameters()) {
            {
                return this->p_30[0]->constrainParameterValue(index, value);
            }
        }

        index -= this->p_30[0]->getNumParameters();

        if (index < this->p_31->getNumParameters())
            return this->p_31->constrainParameterValue(index, value);

        index -= this->p_31->getNumParameters();

        if (index < this->p_32->getNumParameters())
            return this->p_32->constrainParameterValue(index, value);

        index -= this->p_32->getNumParameters();

        if (index < this->p_33->getNumParameters())
            return this->p_33->constrainParameterValue(index, value);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            return this->p_34->constrainParameterValue(index, value);

        return value;
    }
}

void scheduleParamInit(ParameterIndex index, Index order) {
    this->paramInitIndices->push(index);
    this->paramInitOrder->push(order);
}

void processParamInitEvents() {
    this->listquicksort(
        this->paramInitOrder,
        this->paramInitIndices,
        0,
        (int)(this->paramInitOrder->length - 1),
        true
    );

    for (Index i = 0; i < this->paramInitOrder->length; i++) {
        this->getEngine()->scheduleParameterChange(
            this->paramInitIndices[i],
            this->getParameterValue(this->paramInitIndices[i]),
            0
        );
    }
}

void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
    RNBO_UNUSED(value);
    RNBO_UNUSED(hasValue);
    this->updateTime(time);

    switch (index) {
    case -1987572531:
        this->metro_01_tick_bang();
        break;
    case -834257525:
        this->loadmess_10_startupbang_bang();
        break;
    case 892732297:
        this->loadmess_11_startupbang_bang();
        break;
    case 29237386:
        this->loadmess_12_startupbang_bang();
        break;
    case 1935387534:
        this->metro_02_tick_bang();
        break;
    }
}

void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}

void processOutletEvent(
    EngineLink* sender,
    OutletIndex index,
    ParameterValue value,
    MillisecondTime time
) {
    this->updateTime(time);
    this->processOutletAtCurrentTime(sender, index, value);
}

void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
    this->updateTime(time);

    switch (tag) {
    case TAG("format"):
        if (TAG("number_obj-36") == objectId)
            this->numberobj_47_format_set(payload);

        break;
    }

    this->patcher_01->processNumMessage(tag, objectId, time, payload);
    this->p_27->processNumMessage(tag, objectId, time, payload);
    this->p_28->processNumMessage(tag, objectId, time, payload);
    this->p_29->processNumMessage(tag, objectId, time, payload);

    for (Index i = 0; i < 4; i++) {
        this->p_30[i]->processNumMessage(tag, objectId, time, payload);
    }

    this->p_31->processNumMessage(tag, objectId, time, payload);
    this->p_32->processNumMessage(tag, objectId, time, payload);
    this->p_33->processNumMessage(tag, objectId, time, payload);
    this->p_34->processNumMessage(tag, objectId, time, payload);
}

void processListMessage(
    MessageTag tag,
    MessageTag objectId,
    MillisecondTime time,
    const list& payload
) {
    RNBO_UNUSED(objectId);
    this->updateTime(time);
    this->patcher_01->processListMessage(tag, objectId, time, payload);
    this->p_27->processListMessage(tag, objectId, time, payload);
    this->p_28->processListMessage(tag, objectId, time, payload);
    this->p_29->processListMessage(tag, objectId, time, payload);

    for (Index i = 0; i < 4; i++) {
        this->p_30[i]->processListMessage(tag, objectId, time, payload);
    }

    this->p_31->processListMessage(tag, objectId, time, payload);
    this->p_32->processListMessage(tag, objectId, time, payload);
    this->p_33->processListMessage(tag, objectId, time, payload);
    this->p_34->processListMessage(tag, objectId, time, payload);
}

void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
    this->updateTime(time);

    switch (tag) {
    case TAG("startupbang"):
        if (TAG("loadmess_obj-28") == objectId)
            this->loadmess_10_startupbang_bang();

        if (TAG("loadmess_obj-47") == objectId)
            this->loadmess_11_startupbang_bang();

        if (TAG("loadmess_obj-14") == objectId)
            this->loadmess_12_startupbang_bang();

        break;
    }

    this->patcher_01->processBangMessage(tag, objectId, time);
    this->p_27->processBangMessage(tag, objectId, time);
    this->p_28->processBangMessage(tag, objectId, time);
    this->p_29->processBangMessage(tag, objectId, time);

    for (Index i = 0; i < 4; i++) {
        this->p_30[i]->processBangMessage(tag, objectId, time);
    }

    this->p_31->processBangMessage(tag, objectId, time);
    this->p_32->processBangMessage(tag, objectId, time);
    this->p_33->processBangMessage(tag, objectId, time);
    this->p_34->processBangMessage(tag, objectId, time);
}

MessageTagInfo resolveTag(MessageTag tag) const {
    switch (tag) {
    case TAG("setup"):
        return "setup";
    case TAG("number_obj-36"):
        return "number_obj-36";
    case TAG("startupbang"):
        return "startupbang";
    case TAG("loadmess_obj-28"):
        return "loadmess_obj-28";
    case TAG("loadmess_obj-47"):
        return "loadmess_obj-47";
    case TAG("format"):
        return "format";
    case TAG("loadmess_obj-14"):
        return "loadmess_obj-14";
    }

    auto subpatchResult_0 = this->patcher_01->resolveTag(tag);

    if (subpatchResult_0)
        return subpatchResult_0;

    auto subpatchResult_1 = this->p_27->resolveTag(tag);

    if (subpatchResult_1)
        return subpatchResult_1;

    auto subpatchResult_2 = this->p_28->resolveTag(tag);

    if (subpatchResult_2)
        return subpatchResult_2;

    auto subpatchResult_3 = this->p_29->resolveTag(tag);

    if (subpatchResult_3)
        return subpatchResult_3;

    auto subpatchResult_4 = this->p_30[0]->resolveTag(tag);

    if (subpatchResult_4)
        return subpatchResult_4;

    auto subpatchResult_5 = this->p_31->resolveTag(tag);

    if (subpatchResult_5)
        return subpatchResult_5;

    auto subpatchResult_6 = this->p_32->resolveTag(tag);

    if (subpatchResult_6)
        return subpatchResult_6;

    auto subpatchResult_7 = this->p_33->resolveTag(tag);

    if (subpatchResult_7)
        return subpatchResult_7;

    auto subpatchResult_8 = this->p_34->resolveTag(tag);

    if (subpatchResult_8)
        return subpatchResult_8;

    return "";
}

MessageIndex getNumMessages() const {
    return 1;
}

const MessageInfo& getMessageInfo(MessageIndex index) const {
    switch (index) {
    case 0:
        static const MessageInfo r0 = {
            "compression",
            Outport
        };

        return r0;
    }

    return NullMessageInfo;
}

protected:

void param_13_value_set(number v) {
    v = this->param_13_value_constrain(v);
    this->param_13_value = v;
    this->sendParameter(0, false);

    if (this->param_13_value != this->param_13_lastValue) {
        this->getEngine()->presetTouched();
        this->param_13_lastValue = this->param_13_value;
    }

    this->send_65_input_number_set(v);
}

void param_14_value_set(number v) {
    v = this->param_14_value_constrain(v);
    this->param_14_value = v;
    this->sendParameter(1, false);

    if (this->param_14_value != this->param_14_lastValue) {
        this->getEngine()->presetTouched();
        this->param_14_lastValue = this->param_14_value;
    }

    this->send_66_input_number_set(v);
}

void param_15_value_set(number v) {
    v = this->param_15_value_constrain(v);
    this->param_15_value = v;
    this->sendParameter(2, false);

    if (this->param_15_value != this->param_15_lastValue) {
        this->getEngine()->presetTouched();
        this->param_15_lastValue = this->param_15_value;
    }

    this->send_67_input_number_set(v);
}

void param_16_value_set(number v) {
    v = this->param_16_value_constrain(v);
    this->param_16_value = v;
    this->sendParameter(3, false);

    if (this->param_16_value != this->param_16_lastValue) {
        this->getEngine()->presetTouched();
        this->param_16_lastValue = this->param_16_value;
    }

    this->send_68_input_number_set(v);
}

void param_17_value_set(number v) {
    v = this->param_17_value_constrain(v);
    this->param_17_value = v;
    this->sendParameter(4, false);

    if (this->param_17_value != this->param_17_lastValue) {
        this->getEngine()->presetTouched();
        this->param_17_lastValue = this->param_17_value;
    }

    this->send_70_input_number_set(v);
}

void param_19_value_set(number v) {
    v = this->param_19_value_constrain(v);
    this->param_19_value = v;
    this->sendParameter(6, false);

    if (this->param_19_value != this->param_19_lastValue) {
        this->getEngine()->presetTouched();
        this->param_19_lastValue = this->param_19_value;
    }

    this->send_72_input_number_set(v);
}

void param_20_value_set(number v) {
    v = this->param_20_value_constrain(v);
    this->param_20_value = v;
    this->sendParameter(7, false);

    if (this->param_20_value != this->param_20_lastValue) {
        this->getEngine()->presetTouched();
        this->param_20_lastValue = this->param_20_value;
    }

    this->send_73_input_number_set(v);
}

void param_21_value_set(number v) {
    v = this->param_21_value_constrain(v);
    this->param_21_value = v;
    this->sendParameter(8, false);

    if (this->param_21_value != this->param_21_lastValue) {
        this->getEngine()->presetTouched();
        this->param_21_lastValue = this->param_21_value;
    }

    this->send_76_input_number_set(v);
}

void param_22_value_set(number v) {
    v = this->param_22_value_constrain(v);
    this->param_22_value = v;
    this->sendParameter(9, false);

    if (this->param_22_value != this->param_22_lastValue) {
        this->getEngine()->presetTouched();
        this->param_22_lastValue = this->param_22_value;
    }

    this->send_77_input_number_set(v);
}

void param_23_value_set(number v) {
    v = this->param_23_value_constrain(v);
    this->param_23_value = v;
    this->sendParameter(10, false);

    if (this->param_23_value != this->param_23_lastValue) {
        this->getEngine()->presetTouched();
        this->param_23_lastValue = this->param_23_value;
    }

    this->expr_252_in1_set(v);
}

void param_24_value_set(number v) {
    v = this->param_24_value_constrain(v);
    this->param_24_value = v;
    this->sendParameter(11, false);

    if (this->param_24_value != this->param_24_lastValue) {
        this->getEngine()->presetTouched();
        this->param_24_lastValue = this->param_24_value;
    }

    this->send_82_input_number_set(v);
}

void param_25_value_set(number v) {
    v = this->param_25_value_constrain(v);
    this->param_25_value = v;
    this->sendParameter(12, false);

    if (this->param_25_value != this->param_25_lastValue) {
        this->getEngine()->presetTouched();
        this->param_25_lastValue = this->param_25_value;
    }

    this->send_83_input_number_set(v);
}

void param_26_value_set(number v) {
    v = this->param_26_value_constrain(v);
    this->param_26_value = v;
    this->sendParameter(13, false);

    if (this->param_26_value != this->param_26_lastValue) {
        this->getEngine()->presetTouched();
        this->param_26_lastValue = this->param_26_value;
    }

    this->expr_254_in1_set(v);
}

void param_27_value_set(number v) {
    v = this->param_27_value_constrain(v);
    this->param_27_value = v;
    this->sendParameter(14, false);

    if (this->param_27_value != this->param_27_lastValue) {
        this->getEngine()->presetTouched();
        this->param_27_lastValue = this->param_27_value;
    }

    this->patcher_01_mix_set(v);
}

void param_28_value_set(number v) {
    v = this->param_28_value_constrain(v);
    this->param_28_value = v;
    this->sendParameter(15, false);

    if (this->param_28_value != this->param_28_lastValue) {
        this->getEngine()->presetTouched();
        this->param_28_lastValue = this->param_28_value;
    }

    this->send_86_input_number_set(v);
}

void param_29_value_set(number v) {
    v = this->param_29_value_constrain(v);
    this->param_29_value = v;
    this->sendParameter(16, false);

    if (this->param_29_value != this->param_29_lastValue) {
        this->getEngine()->presetTouched();
        this->param_29_lastValue = this->param_29_value;
    }

    this->send_87_input_number_set(v);
}

void param_30_value_set(number v) {
    v = this->param_30_value_constrain(v);
    this->param_30_value = v;
    this->sendParameter(17, false);

    if (this->param_30_value != this->param_30_lastValue) {
        this->getEngine()->presetTouched();
        this->param_30_lastValue = this->param_30_value;
    }

    this->p_27_in1_number_set(v);
}

void param_31_value_set(number v) {
    v = this->param_31_value_constrain(v);
    this->param_31_value = v;
    this->sendParameter(18, false);

    if (this->param_31_value != this->param_31_lastValue) {
        this->getEngine()->presetTouched();
        this->param_31_lastValue = this->param_31_value;
    }

    this->send_88_input_number_set(v);
}

void param_32_value_set(number v) {
    v = this->param_32_value_constrain(v);
    this->param_32_value = v;
    this->sendParameter(19, false);

    if (this->param_32_value != this->param_32_lastValue) {
        this->getEngine()->presetTouched();
        this->param_32_lastValue = this->param_32_value;
    }

    this->send_89_input_number_set(v);
}

void param_33_value_set(number v) {
    v = this->param_33_value_constrain(v);
    this->param_33_value = v;
    this->sendParameter(20, false);

    if (this->param_33_value != this->param_33_lastValue) {
        this->getEngine()->presetTouched();
        this->param_33_lastValue = this->param_33_value;
    }

    this->p_28_in1_number_set(v);
}

void param_34_value_set(number v) {
    v = this->param_34_value_constrain(v);
    this->param_34_value = v;
    this->sendParameter(21, false);

    if (this->param_34_value != this->param_34_lastValue) {
        this->getEngine()->presetTouched();
        this->param_34_lastValue = this->param_34_value;
    }

    this->send_90_input_number_set(v);
}

void param_35_value_set(number v) {
    v = this->param_35_value_constrain(v);
    this->param_35_value = v;
    this->sendParameter(22, false);

    if (this->param_35_value != this->param_35_lastValue) {
        this->getEngine()->presetTouched();
        this->param_35_lastValue = this->param_35_value;
    }

    this->send_91_input_number_set(v);
}

void param_36_value_set(number v) {
    v = this->param_36_value_constrain(v);
    this->param_36_value = v;
    this->sendParameter(23, false);

    if (this->param_36_value != this->param_36_lastValue) {
        this->getEngine()->presetTouched();
        this->param_36_lastValue = this->param_36_value;
    }

    this->send_92_input_number_set(v);
}

void param_37_value_set(number v) {
    v = this->param_37_value_constrain(v);
    this->param_37_value = v;
    this->sendParameter(24, false);

    if (this->param_37_value != this->param_37_lastValue) {
        this->getEngine()->presetTouched();
        this->param_37_lastValue = this->param_37_value;
    }

    this->send_93_input_number_set(v);
}

void param_38_value_set(number v) {
    v = this->param_38_value_constrain(v);
    this->param_38_value = v;
    this->sendParameter(25, false);

    if (this->param_38_value != this->param_38_lastValue) {
        this->getEngine()->presetTouched();
        this->param_38_lastValue = this->param_38_value;
    }

    this->p_31_in1_number_set(v);
}

void param_39_value_set(number v) {
    v = this->param_39_value_constrain(v);
    this->param_39_value = v;
    this->sendParameter(26, false);

    if (this->param_39_value != this->param_39_lastValue) {
        this->getEngine()->presetTouched();
        this->param_39_lastValue = this->param_39_value;
    }

    this->p_32_in1_number_set(v);
}

void metro_01_tick_bang() {
    this->metro_01_tickout_bang();
    this->getEngine()->flushClockEvents(this, -1987572531, false);;

    if ((bool)(this->metro_01_on)) {
        {
            this->getEngine()->scheduleClockEvent(this, -1987572531, this->metro_01_interval + this->_currentTime);;
        }
    }
}

void loadmess_10_startupbang_bang() {
    this->loadmess_10_message_bang();
}

void loadmess_11_startupbang_bang() {
    this->loadmess_11_message_bang();
}

void numberobj_47_value_set(number v) {
    this->numberobj_47_value_setter(v);
    v = this->numberobj_47_value;
    this->sendParameter(28, false);
    this->numberobj_47_output_set(v);
}

void numberobj_47_format_set(number v) {
    if (v == 0) {
        this->numberobj_47_currentFormat = 0;
    } else if (v == 1) {
        this->numberobj_47_currentFormat = 1;
    } else if (v == 2) {
        this->numberobj_47_currentFormat = 2;
    } else if (v == 3) {
        this->numberobj_47_currentFormat = 3;
    } else if (v == 4) {
        this->numberobj_47_currentFormat = 4;
    } else if (v == 5) {
        this->numberobj_47_currentFormat = 5;
    } else if (v == 6) {
        this->numberobj_47_currentFormat = 6;
    }
}

void loadmess_12_startupbang_bang() {
    this->loadmess_12_message_bang();
}

void metro_02_tick_bang() {
    this->metro_02_tickout_bang();
    this->getEngine()->flushClockEvents(this, 1935387534, false);;

    if ((bool)(this->metro_02_on)) {
        {
            this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_02_interval + this->_currentTime);;
        }
    }
}

number msToSamps(MillisecondTime ms, number sampleRate) {
    return ms * sampleRate * 0.001;
}

MillisecondTime sampsToMs(SampleIndex samps) {
    return samps * (this->invsr * 1000);
}

Index getMaxBlockSize() const {
    return this->maxvs;
}

number getSampleRate() const {
    return this->sr;
}

bool hasFixedVectorSize() const {
    return false;
}

Index getNumInputChannels() const {
    return 0;
}

Index getNumOutputChannels() const {
    return 2;
}

void allocateDataRefs() {
    this->patcher_01->allocateDataRefs();
    this->p_27->allocateDataRefs();
    this->p_28->allocateDataRefs();
    this->p_29->allocateDataRefs();

    for (Index i = 0; i < 4; i++) {
        this->p_30[i]->allocateDataRefs();
    }

    this->p_31->allocateDataRefs();
    this->p_32->allocateDataRefs();
    this->p_33->allocateDataRefs();
    this->p_34->allocateDataRefs();

    if (this->RNBODefaultMtofLookupTable256->hasRequestedSize()) {
        if (this->RNBODefaultMtofLookupTable256->wantsFill())
            this->fillRNBODefaultMtofLookupTable256(this->RNBODefaultMtofLookupTable256);

        this->getEngine()->sendDataRefUpdated(0);
    }

    this->groove_01_buffer = this->groove_01_buffer->allocateIfNeeded();

    if (this->perc->hasRequestedSize()) {
        if (this->perc->wantsFill())
            this->zeroDataRef(this->perc);

        this->getEngine()->sendDataRefUpdated(1);
    }

    this->groove_02_buffer = this->groove_02_buffer->allocateIfNeeded();

    if (this->snare->hasRequestedSize()) {
        if (this->snare->wantsFill())
            this->zeroDataRef(this->snare);

        this->getEngine()->sendDataRefUpdated(2);
    }

    this->groove_03_buffer = this->groove_03_buffer->allocateIfNeeded();

    if (this->kick->hasRequestedSize()) {
        if (this->kick->wantsFill())
            this->zeroDataRef(this->kick);

        this->getEngine()->sendDataRefUpdated(3);
    }

    this->groove_04_buffer = this->groove_04_buffer->allocateIfNeeded();

    if (this->hat->hasRequestedSize()) {
        if (this->hat->wantsFill())
            this->zeroDataRef(this->hat);

        this->getEngine()->sendDataRefUpdated(4);
    }
}

void initializeObjects() {
    this->numberobj_47_init();
    this->patcher_01->initializeObjects();
    this->p_27->initializeObjects();
    this->p_28->initializeObjects();
    this->p_29->initializeObjects();

    for (Index i = 0; i < 4; i++) {
        this->p_30[i]->initializeObjects();
    }

    this->p_31->initializeObjects();
    this->p_32->initializeObjects();
    this->p_33->initializeObjects();
    this->p_34->initializeObjects();
}

void sendOutlet(OutletIndex index, ParameterValue value) {
    this->getEngine()->sendOutlet(this, index, value);
}

void startup() {
    this->updateTime(this->getEngine()->getCurrentTime());
    this->patcher_01->startup();
    this->p_27->startup();
    this->p_28->startup();
    this->p_29->startup();

    for (Index i = 0; i < 4; i++) {
        this->p_30[i]->startup();
    }

    this->p_31->startup();
    this->p_32->startup();
    this->p_33->startup();
    this->p_34->startup();

    if ((bool)(this->metro_01_on))
        this->metro_01_on_set(1);

    this->getEngine()->scheduleClockEvent(this, -834257525, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, 29237386, 0 + this->_currentTime);;

    if ((bool)(this->metro_02_on))
        this->metro_02_on_set(1);

    {
        this->scheduleParamInit(0, 0);
    }

    {
        this->scheduleParamInit(1, 0);
    }

    {
        this->scheduleParamInit(2, 0);
    }

    {
        this->scheduleParamInit(3, 0);
    }

    {
        this->scheduleParamInit(4, 0);
    }

    {
        this->scheduleParamInit(5, 0);
    }

    {
        this->scheduleParamInit(6, 0);
    }

    {
        this->scheduleParamInit(7, 0);
    }

    {
        this->scheduleParamInit(8, 0);
    }

    {
        this->scheduleParamInit(9, 0);
    }

    {
        this->scheduleParamInit(10, 0);
    }

    {
        this->scheduleParamInit(11, 0);
    }

    {
        this->scheduleParamInit(12, 0);
    }

    {
        this->scheduleParamInit(13, 0);
    }

    {
        this->scheduleParamInit(14, 0);
    }

    {
        this->scheduleParamInit(15, 0);
    }

    {
        this->scheduleParamInit(16, 0);
    }

    {
        this->scheduleParamInit(17, 0);
    }

    {
        this->scheduleParamInit(18, 0);
    }

    {
        this->scheduleParamInit(19, 0);
    }

    {
        this->scheduleParamInit(20, 0);
    }

    {
        this->scheduleParamInit(21, 0);
    }

    {
        this->scheduleParamInit(22, 0);
    }

    {
        this->scheduleParamInit(23, 0);
    }

    {
        this->scheduleParamInit(24, 0);
    }

    {
        this->scheduleParamInit(25, 0);
    }

    {
        this->scheduleParamInit(26, 0);
    }

    this->processParamInitEvents();
}

static number param_13_value_constrain(number v) {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void expr_257_in2_set(number v) {
    this->expr_257_in2 = v;
}

void receive_49_output_number_set(number v) {
    this->receive_49_output_number = v;
    this->expr_257_in2_set(v);
}

void p_32_target_playing_number_set(number v) {
    this->p_32->receive_14_output_number_set(v);
}

void p_31_target_playing_number_set(number v) {
    this->p_31->receive_10_output_number_set(v);
}

void p_28_target_playing_number_set(number v) {
    this->p_28->receive_06_output_number_set(v);
}

void gate_26_onoff_set(number v) {
    this->gate_26_onoff = v;
}

void expr_256_out1_set(number v) {
    this->expr_256_out1 = v;
    this->gate_26_onoff_set(this->expr_256_out1);
}

void expr_256_in1_set(number in1) {
    this->expr_256_in1 = in1;
    this->expr_256_out1_set(this->expr_256_in1 + this->expr_256_in2);//#map:+_obj-69:1
}

void receive_43_output_number_set(number v) {
    this->receive_43_output_number = v;
    this->expr_256_in1_set(v);
}

void p_27_target_playing_number_set(number v) {
    this->p_27->receive_02_output_number_set(v);
}

void metro_01_on_set(number v) {
    this->metro_01_on = v;
    this->getEngine()->flushClockEvents(this, -1987572531, false);;

    if ((bool)(v)) {
        {
            this->getEngine()->scheduleClockEvent(this, -1987572531, 0 + this->_currentTime);;
        }
    }
}

void gate_25_onoff_bang() {}

void receive_40_output_bang_bang() {
    this->gate_25_onoff_bang();
}

void send_74_input_bang_bang() {
    this->receive_40_output_bang_bang();
}

void route_71_nomatch_bang_bang() {
    this->send_74_input_bang_bang();
}

void trigger_14_out2_bang() {}

void listqueue_01_reset_bang() {
    {
        list __value = list();
    };

    this->listqueue_01_queued = {};
}

void listsort_01_out2_set(const list& ) {}

void listqueue_01_size_set(number ) {}

void listqueue_01_input_list_set(const list& _v) {
    RNBO_UNUSED(_v);
    list v = createListCopy(_v);
    v->reverse();
    this->listqueue_01_queued = v->concat(this->listqueue_01_queued);
    this->listqueue_01_reportSize();
}

void listsort_01_out1_set(const list& v) {
    this->listqueue_01_input_list_set(v);
}

void listsort_01_input_set(const list& input) {
    this->listsort_01_input = jsCreateListCopy(input);
    auto order = this->listsort_01_order;
    array<list, 2> tmp = {};
    tmp[0] = jsCreateListCopy(input);
    tmp[1] = {};

    for (Index i = 0; i < tmp[0]->length; i++) {
        tmp[1]->push(i);
    }

    this->listquicksort(tmp[0], tmp[1], 0, (Int)(tmp[0]->length - 1), (order >= 0 ? 1 : 0));

    {
        array<list, 2> __tmp = tmp;
        this->listsort_01_out2_set(__tmp[1]);
        this->listsort_01_out1_set(__tmp[0]);
        return;
    }
}

void trigger_14_out1_set(const list& v) {
    this->listqueue_01_reset_bang();
    this->listsort_01_input_set(v);
}

void trigger_14_input_list_set(const list& v) {
    this->trigger_14_out2_bang();
    this->trigger_14_out1_set(v);
}

void gate_26_out1_list_set(const list& v) {
    this->gate_26_out1_list = jsCreateListCopy(v);
    this->trigger_14_input_list_set(v);
}

void trigger_15_out2_bang() {}

void p_30_in1_list_set(const list& v) {
    for (Index i = 0; i < 4; i++) {
        if (i + 1 == this->p_30_target || 0 == this->p_30_target) {
            this->p_30[(Index)i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 4; i++) {
        if (i + 1 == this->p_30_target || 0 == this->p_30_target) {
            this->p_30[i]->eventinlet_15_out1_list_set(v);
        }
    }
}

void p_30_target_set(number v) {
    this->p_30_target = v;
}

void expr_255_out1_set(number v) {
    this->expr_255_out1 = v;
    this->p_30_target_set(this->expr_255_out1);
}

void expr_255_in1_set(number in1) {
    this->expr_255_in1 = in1;
    this->expr_255_out1_set(this->expr_255_in1 + this->expr_255_in2);//#map:+_obj-18:1
}

void counter_09_output_set(number v) {
    this->counter_09_output = v;
    this->expr_255_in1_set(v);
}

void counter_09_overflow_bang_bang() {}

static number counter_09_overflow_number_constrain(number v) {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_09_overflow_number_set(number v) {
    v = this->counter_09_overflow_number_constrain(v);
    this->counter_09_overflow_number = v;
}

void counter_09_carry_set(number v) {
    this->counter_09_carry = v;
}

void counter_09_underflow_bang_bang() {}

static number counter_09_underflow_number_constrain(number v) {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_09_underflow_number_set(number v) {
    v = this->counter_09_underflow_number_constrain(v);
    this->counter_09_underflow_number = v;
}

void counter_09_input_bang() {
    this->counter_09_output_set(this->counter_09_count);
    this->counter_09_inc();

    if (this->counter_09_count > this->counter_09_maximum) {
        if (this->counter_09_direction == 2) {
            this->counter_09_phase = !(bool)(this->counter_09_phase);
            this->counter_09_count = this->counter_09_maximum;
            this->counter_09_inc();
        } else
            this->counter_09_count = this->counter_09_minimum;

        if ((bool)(!(bool)(this->counter_09_overflow_number))) {
            if (this->counter_09_carryflag == 1)
                this->counter_09_overflow_bang_bang();
            else
                this->counter_09_overflow_number_set(1);
        }

        this->counter_09_carry_set(this->counter_09_carry + 1);
    } else if ((bool)(this->counter_09_overflow_number) && this->counter_09_carryflag == 0)
        this->counter_09_overflow_number_set(0);

    if (this->counter_09_count < this->counter_09_minimum) {
        if (this->counter_09_direction == 2) {
            this->counter_09_phase = !(bool)(this->counter_09_phase);
            this->counter_09_count = this->counter_09_minimum;
            this->counter_09_inc();
        } else
            this->counter_09_count = this->counter_09_maximum;

        if ((bool)(!(bool)(this->counter_09_underflow_number))) {
            if (this->counter_09_carryflag == 1)
                this->counter_09_underflow_bang_bang();
            else
                this->counter_09_underflow_number_set(1);
        }

        this->counter_09_carry_set(this->counter_09_carry + 1);
    } else if ((bool)(this->counter_09_underflow_number) && this->counter_09_carryflag == 0)
        this->counter_09_underflow_number_set(0);
}

void trigger_15_out1_set(const list& v) {
    this->p_30_in1_list_set(v);
    this->counter_09_input_bang();
}

void trigger_15_input_list_set(const list& v) {
    this->trigger_15_out2_bang();
    this->trigger_15_out1_set(v);
}

void gate_26_out2_list_set(const list& v) {
    this->gate_26_out2_list = jsCreateListCopy(v);
    this->trigger_15_input_list_set(v);
}

void gate_26_input_list_set(const list& v) {
    if (this->gate_26_onoff == 1)
        this->gate_26_out1_list_set(v);
    else if (this->gate_26_onoff == 2)
        this->gate_26_out2_list_set(v);
}

void trigger_16_out1_set(const list& v) {
    this->gate_26_input_list_set(v);
}

void trigger_16_input_list_set(const list& v) {
    this->trigger_16_out1_set(v);
}

void p_32_out1_list_set(const list& v) {
    this->trigger_16_input_list_set(v);
}

void p_32_target_reset_counter_list_set(const list& v) {
    this->p_32->receive_16_output_list_set(v);
}

void p_31_out1_list_set(const list& v) {
    this->trigger_16_input_list_set(v);
}

void p_31_target_reset_counter_list_set(const list& v) {
    this->p_31->receive_12_output_list_set(v);
}

void counter_09_resetnow_set(number v) {
    this->counter_09_resetnow = v;
    this->counter_09_count = v;
    this->counter_09_input();
}

void receive_45_output_list_set(const list& v) {
    this->receive_45_output_list = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->counter_09_resetnow_set(converted);
    }
}

void p_28_out1_list_set(const list& v) {
    this->trigger_16_input_list_set(v);
}

void p_28_target_reset_counter_list_set(const list& v) {
    this->p_28->receive_08_output_list_set(v);
}

void p_27_out1_list_set(const list& v) {
    this->trigger_16_input_list_set(v);
}

void p_27_target_reset_counter_list_set(const list& v) {
    this->p_27->receive_04_output_list_set(v);
}

void send_85_input_number_set(number v) {
    this->send_85_input_number = v;
}

void gate_25_onoff_set(number v) {
    this->gate_25_onoff = v;
}

void counter_08_output_set(number v) {
    this->counter_08_output = v;
    this->send_85_input_number_set(v);
    this->gate_25_onoff_set(v);
}

void counter_08_overflow_bang_bang() {}

static number counter_08_overflow_number_constrain(number v) {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_08_overflow_number_set(number v) {
    v = this->counter_08_overflow_number_constrain(v);
    this->counter_08_overflow_number = v;
}

void counter_08_carry_set(number v) {
    this->counter_08_carry = v;
}

void counter_08_underflow_bang_bang() {}

static number counter_08_underflow_number_constrain(number v) {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_08_underflow_number_set(number v) {
    v = this->counter_08_underflow_number_constrain(v);
    this->counter_08_underflow_number = v;
}

void counter_08_resetnow_set(number v) {
    this->counter_08_resetnow = v;
    this->counter_08_count = v;
    this->counter_08_input();
}

void counter_07_resetnext_set(number v) {
    this->counter_07_resetnext = v;
    this->counter_07_count = v;
}

void expr_253_out1_set(number v) {
    this->expr_253_out1 = v;
    this->counter_08_resetnow_set(this->expr_253_out1);
    this->counter_07_resetnext_set(this->expr_253_out1);
}

void expr_253_in1_set(number in1) {
    this->expr_253_in1 = in1;
    this->expr_253_out1_set(this->expr_253_in1 + this->expr_253_in2);//#map:+_obj-88:1
}

void expr_253_in2_set(number v) {
    this->expr_253_in2 = v;
}

void receive_41_output_list_set(const list& v) {
    this->receive_41_output_list = jsCreateListCopy(v);

    {
        if (v->length > 1)
            this->expr_253_in2_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_253_in1_set(converted);
    }
}

void route_70_nomatch_bang_bang() {}

static number param_18_value_constrain(number v) {
    v = (v > 32 ? 32 : (v < 1 ? 1 : v));
    return v;
}

void p_33_in1_bang_bang() {
    this->p_33->updateTime(this->_currentTime);
    this->p_33->eventinlet_37_out1_bang_bang();
}

void route_72_nomatch_bang_bang() {
    this->p_33_in1_bang_bang();
}

void route_72_match1_bang_bang() {}

void route_72_match1_number_set(number ) {}

void route_72_match1_list_set(const list& ) {}

void groove_03_rate_bang_bang() {
    this->groove_03_changeIncomingInSamples = this->sampleOffsetIntoNextAudioBuffer + 1;
    this->groove_03_incomingChange = 1;
}

void p_33_out4_bang_bang() {
    this->groove_03_rate_bang_bang();
}

void p_33_target_t_drum_4_bang_bang() {
    this->p_33->receive_24_output_bang_bang();
}

void p_33_source_t_drum_4_bang_bang() {
    this->p_33_target_t_drum_4_bang_bang();
}

void p_33_target_t_drum_4_number_set(number v) {
    this->p_33->receive_24_output_number_set(v);
}

void p_33_source_t_drum_4_number_set(number v) {
    this->p_33_target_t_drum_4_number_set(v);
}

void p_33_target_t_drum_4_list_set(const list& v) {
    this->p_33->receive_24_output_list_set(v);
}

void p_33_source_t_drum_4_list_set(const list& v) {
    this->p_33_target_t_drum_4_list_set(v);
}

void groove_02_rate_bang_bang() {
    this->groove_02_changeIncomingInSamples = this->sampleOffsetIntoNextAudioBuffer + 1;
    this->groove_02_incomingChange = 1;
}

void p_33_out3_bang_bang() {
    this->groove_02_rate_bang_bang();
}

void p_33_target_t_drum_3_bang_bang() {
    this->p_33->receive_22_output_bang_bang();
}

void p_33_source_t_drum_3_bang_bang() {
    this->p_33_target_t_drum_3_bang_bang();
}

void p_33_target_t_drum_3_number_set(number v) {
    this->p_33->receive_22_output_number_set(v);
}

void p_33_source_t_drum_3_number_set(number v) {
    this->p_33_target_t_drum_3_number_set(v);
}

void p_33_target_t_drum_3_list_set(const list& v) {
    this->p_33->receive_22_output_list_set(v);
}

void p_33_source_t_drum_3_list_set(const list& v) {
    this->p_33_target_t_drum_3_list_set(v);
}

void groove_01_rate_bang_bang() {
    this->groove_01_changeIncomingInSamples = this->sampleOffsetIntoNextAudioBuffer + 1;
    this->groove_01_incomingChange = 1;
}

void p_33_out2_bang_bang() {
    this->groove_01_rate_bang_bang();
}

void p_33_target_t_drum_2_bang_bang() {
    this->p_33->receive_20_output_bang_bang();
}

void p_33_source_t_drum_2_bang_bang() {
    this->p_33_target_t_drum_2_bang_bang();
}

void p_33_target_t_drum_2_number_set(number v) {
    this->p_33->receive_20_output_number_set(v);
}

void p_33_source_t_drum_2_number_set(number v) {
    this->p_33_target_t_drum_2_number_set(v);
}

void p_33_target_t_drum_2_list_set(const list& v) {
    this->p_33->receive_20_output_list_set(v);
}

void p_33_source_t_drum_2_list_set(const list& v) {
    this->p_33_target_t_drum_2_list_set(v);
}

void groove_04_rate_bang_bang() {
    this->groove_04_changeIncomingInSamples = this->sampleOffsetIntoNextAudioBuffer + 1;
    this->groove_04_incomingChange = 1;
}

void p_33_out1_bang_bang() {
    this->groove_04_rate_bang_bang();
}

void p_33_target_t_drum_1_bang_bang() {
    this->p_33->receive_18_output_bang_bang();
}

void p_33_source_t_drum_1_bang_bang() {
    this->p_33_target_t_drum_1_bang_bang();
}

void p_33_target_t_drum_1_number_set(number v) {
    this->p_33->receive_18_output_number_set(v);
}

void p_33_source_t_drum_1_number_set(number v) {
    this->p_33_target_t_drum_1_number_set(v);
}

void p_33_target_t_drum_1_list_set(const list& v) {
    this->p_33->receive_18_output_list_set(v);
}

void p_33_source_t_drum_1_list_set(const list& v) {
    this->p_33_target_t_drum_1_list_set(v);
}

void p_33_in1_number_set(number v) {
    this->p_33->updateTime(this->_currentTime);
    this->p_33->eventinlet_37_out1_number_set(v);
}

void route_72_nomatch_number_set(number v) {
    this->p_33_in1_number_set(v);
}

void p_33_in1_list_set(const list& v) {
    this->p_33->updateTime(this->_currentTime);
    this->p_33->eventinlet_37_out1_list_set(v);
}

void route_72_nomatch_list_set(const list& v) {
    this->p_33_in1_list_set(v);
}

void route_72_input_list_set(const list& v) {
    if ((bool)(!(bool)(v->length)))
        this->route_72_nomatch_bang_bang();
    else {
        number check = v[0];
        list input = jsCreateListCopy(v);
        input->shift();
        bool nomatch = true;

        if (check == this->route_72_selector1) {
            if (input->length == 0)
                this->route_72_match1_bang_bang();
            else if (input->length == 1)
                this->route_72_match1_number_set(input[0]);
            else
                this->route_72_match1_list_set(input);

            nomatch = false;
        }

        if ((bool)(nomatch)) {
            if (v->length == 1) {
                this->route_72_nomatch_number_set(v[0]);
            } else {
                this->route_72_nomatch_list_set(v);
            }
        }
    }
}

void route_72_input_number_set(number v) {
    this->route_72_input_list_set({v});
}

void expr_257_out1_set(number v) {
    this->expr_257_out1 = v;
    this->route_72_input_number_set(this->expr_257_out1);
}

void expr_257_in1_set(number in1) {
    this->expr_257_in1 = in1;
    this->expr_257_out1_set(this->expr_257_in1 * this->expr_257_in2);//#map:*_obj-231:1
}

void receive_48_output_number_set(number v) {
    this->receive_48_output_number = v;
    this->expr_257_in1_set(v);
}

void send_71_input_number_set(number v) {
    this->send_71_input_number = v;
    this->receive_48_output_number_set(v);
}

void param_18_value_set(number v) {
    v = this->param_18_value_constrain(v);
    this->param_18_value = v;
    this->sendParameter(5, false);

    if (this->param_18_value != this->param_18_lastValue) {
        this->getEngine()->presetTouched();
        this->param_18_lastValue = this->param_18_value;
    }

    this->send_71_input_number_set(v);
}

void counter_05_output_set(number v) {
    this->counter_05_output = v;
    this->param_18_value_set(v);
}

void counter_05_overflow_bang_bang() {}

static number counter_05_overflow_number_constrain(number v) {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_05_overflow_number_set(number v) {
    v = this->counter_05_overflow_number_constrain(v);
    this->counter_05_overflow_number = v;
}

void counter_05_carry_set(number v) {
    this->counter_05_carry = v;
}

void counter_05_underflow_bang_bang() {}

static number counter_05_underflow_number_constrain(number v) {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_05_underflow_number_set(number v) {
    v = this->counter_05_underflow_number_constrain(v);
    this->counter_05_underflow_number = v;
}

void counter_05_input_bang() {
    this->counter_05_output_set(this->counter_05_count);
    this->counter_05_inc();

    if (this->counter_05_count > this->counter_05_maximum) {
        if (this->counter_05_direction == 2) {
            this->counter_05_phase = !(bool)(this->counter_05_phase);
            this->counter_05_count = this->counter_05_maximum;
            this->counter_05_inc();
        } else
            this->counter_05_count = this->counter_05_minimum;

        if ((bool)(!(bool)(this->counter_05_overflow_number))) {
            if (this->counter_05_carryflag == 1)
                this->counter_05_overflow_bang_bang();
            else
                this->counter_05_overflow_number_set(1);
        }

        this->counter_05_carry_set(this->counter_05_carry + 1);
    } else if ((bool)(this->counter_05_overflow_number) && this->counter_05_carryflag == 0)
        this->counter_05_overflow_number_set(0);

    if (this->counter_05_count < this->counter_05_minimum) {
        if (this->counter_05_direction == 2) {
            this->counter_05_phase = !(bool)(this->counter_05_phase);
            this->counter_05_count = this->counter_05_minimum;
            this->counter_05_inc();
        } else
            this->counter_05_count = this->counter_05_maximum;

        if ((bool)(!(bool)(this->counter_05_underflow_number))) {
            if (this->counter_05_carryflag == 1)
                this->counter_05_underflow_bang_bang();
            else
                this->counter_05_underflow_number_set(1);
        }

        this->counter_05_carry_set(this->counter_05_carry + 1);
    } else if ((bool)(this->counter_05_underflow_number) && this->counter_05_carryflag == 0)
        this->counter_05_underflow_number_set(0);
}

void route_70_match1_bang_bang() {
    this->counter_05_input_bang();
}

void route_70_match1_number_set(number v) {
    RNBO_UNUSED(v);
    this->counter_05_input_bang();
}

void route_70_match1_list_set(const list& v) {
    RNBO_UNUSED(v);
    this->counter_05_input_bang();
}

void route_70_nomatch_number_set(number ) {}

void route_70_nomatch_list_set(const list& ) {}

void route_70_input_list_set(const list& v) {
    if ((bool)(!(bool)(v->length)))
        this->route_70_nomatch_bang_bang();
    else {
        number check = v[0];
        list input = jsCreateListCopy(v);
        input->shift();
        bool nomatch = true;

        if (check == this->route_70_selector1) {
            if (input->length == 0)
                this->route_70_match1_bang_bang();
            else if (input->length == 1)
                this->route_70_match1_number_set(input[0]);
            else
                this->route_70_match1_list_set(input);

            nomatch = false;
        }

        if ((bool)(nomatch)) {
            if (v->length == 1) {
                this->route_70_nomatch_number_set(v[0]);
            } else {
                this->route_70_nomatch_list_set(v);
            }
        }
    }
}

void route_70_input_number_set(number v) {
    this->route_70_input_list_set({v});
}

void counter_06_output_set(number v) {
    this->counter_06_output = v;
    this->route_70_input_number_set(v);
}

void counter_06_overflow_bang_bang() {}

static number counter_06_overflow_number_constrain(number v) {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_06_overflow_number_set(number v) {
    v = this->counter_06_overflow_number_constrain(v);
    this->counter_06_overflow_number = v;
}

void counter_06_carry_set(number v) {
    this->counter_06_carry = v;
}

void counter_06_underflow_bang_bang() {}

static number counter_06_underflow_number_constrain(number v) {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_06_underflow_number_set(number v) {
    v = this->counter_06_underflow_number_constrain(v);
    this->counter_06_underflow_number = v;
}

void counter_06_resetnow_set(number v) {
    this->counter_06_resetnow = v;
    this->counter_06_count = v;
    this->counter_06_input();
}

void counter_05_resetnow_set(number v) {
    this->counter_05_resetnow = v;
    this->counter_05_count = v;
    this->counter_05_input();
}

void expr_251_out1_set(number v) {
    this->expr_251_out1 = v;
    this->counter_05_resetnow_set(this->expr_251_out1);
}

void expr_251_in1_set(number in1) {
    this->expr_251_in1 = in1;
    this->expr_251_out1_set(this->expr_251_in1 + this->expr_251_in2);//#map:+_obj-87:1
}

void expr_251_in2_set(number v) {
    this->expr_251_in2 = v;
}

void receive_38_output_list_set(const list& v) {
    this->receive_38_output_list = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->counter_06_resetnow_set(converted);
    }

    {
        if (v->length > 1)
            this->expr_251_in2_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_251_in1_set(converted);
    }
}

void send_69_input_list_set(const list& v) {
    this->send_69_input_list = jsCreateListCopy(v);
    this->p_32_target_reset_counter_list_set(v);
    this->p_31_target_reset_counter_list_set(v);
    this->receive_45_output_list_set(v);
    this->p_28_target_reset_counter_list_set(v);
    this->p_27_target_reset_counter_list_set(v);
    this->receive_41_output_list_set(v);
    this->receive_38_output_list_set(v);
}

void message_50_out_set(const list& v) {
    this->send_69_input_list_set(v);
}

void message_50_bangval_bang() {
    this->sendParameter(27, true);
    this->message_50_out_set({0});
}

void route_71_match1_bang_bang() {
    this->message_50_bangval_bang();
}

void route_71_match1_number_set(number v) {
    RNBO_UNUSED(v);
    this->message_50_bangval_bang();
}

void route_71_match1_list_set(const list& v) {
    RNBO_UNUSED(v);
    this->message_50_bangval_bang();
}

void receive_40_output_number_set(number v) {
    this->receive_40_output_number = v;
    this->gate_25_onoff_set(v);
}

void send_74_input_number_set(number v) {
    this->send_74_input_number = v;
    this->receive_40_output_number_set(v);
}

void route_71_nomatch_number_set(number v) {
    this->send_74_input_number_set(v);
}

void p_27_in2_number_set(number v) {
    this->p_27->updateTime(this->_currentTime);
    this->p_27->eventinlet_02_out1_number_set(v);
}

void receive_42_output_number_set(number v) {
    this->receive_42_output_number = v;
    this->p_27_in2_number_set(v);
}

void send_81_input_number_set(number v) {
    this->send_81_input_number = v;
    this->receive_42_output_number_set(v);
}

void gate_25_out1_number_set(number v) {
    this->gate_25_out1_number = v;
    this->send_81_input_number_set(v);
}

void p_28_in2_number_set(number v) {
    this->p_28->updateTime(this->_currentTime);
    this->p_28->eventinlet_04_out1_number_set(v);
}

void receive_44_output_number_set(number v) {
    this->receive_44_output_number = v;
    this->p_28_in2_number_set(v);
}

void send_80_input_number_set(number v) {
    this->send_80_input_number = v;
    this->receive_44_output_number_set(v);
}

void gate_25_out2_number_set(number v) {
    this->gate_25_out2_number = v;
    this->send_80_input_number_set(v);
}

void p_31_in2_number_set(number v) {
    this->p_31->updateTime(this->_currentTime);
    this->p_31->eventinlet_18_out1_number_set(v);
}

void receive_46_output_number_set(number v) {
    this->receive_46_output_number = v;
    this->p_31_in2_number_set(v);
}

void send_79_input_number_set(number v) {
    this->send_79_input_number = v;
    this->receive_46_output_number_set(v);
}

void gate_25_out3_number_set(number v) {
    this->gate_25_out3_number = v;
    this->send_79_input_number_set(v);
}

void p_32_in2_number_set(number v) {
    this->p_32->updateTime(this->_currentTime);
    this->p_32->eventinlet_20_out1_number_set(v);
}

void receive_47_output_number_set(number v) {
    this->receive_47_output_number = v;
    this->p_32_in2_number_set(v);
}

void send_78_input_number_set(number v) {
    this->send_78_input_number = v;
    this->receive_47_output_number_set(v);
}

void gate_25_out4_number_set(number v) {
    this->gate_25_out4_number = v;
    this->send_78_input_number_set(v);
}

void gate_25_input_number_set(number v) {
    if (this->gate_25_onoff == 1)
        this->gate_25_out1_number_set(v);
    else if (this->gate_25_onoff == 2)
        this->gate_25_out2_number_set(v);
    else if (this->gate_25_onoff == 3)
        this->gate_25_out3_number_set(v);
    else if (this->gate_25_onoff == 4)
        this->gate_25_out4_number_set(v);
}

void receive_40_output_list_set(const list& v) {
    this->receive_40_output_list = jsCreateListCopy(v);

    {
        if (v->length > 1)
            this->gate_25_input_number_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->gate_25_onoff_set(converted);
    }
}

void send_74_input_list_set(const list& v) {
    this->send_74_input_list = jsCreateListCopy(v);
    this->receive_40_output_list_set(v);
}

void route_71_nomatch_list_set(const list& v) {
    this->send_74_input_list_set(v);
}

void route_71_input_list_set(const list& v) {
    if ((bool)(!(bool)(v->length)))
        this->route_71_nomatch_bang_bang();
    else {
        number check = v[0];
        list input = jsCreateListCopy(v);
        input->shift();
        bool nomatch = true;

        if (check == this->route_71_selector1) {
            if (input->length == 0)
                this->route_71_match1_bang_bang();
            else if (input->length == 1)
                this->route_71_match1_number_set(input[0]);
            else
                this->route_71_match1_list_set(input);

            nomatch = false;
        }

        if ((bool)(nomatch)) {
            if (v->length == 1) {
                this->route_71_nomatch_number_set(v[0]);
            } else {
                this->route_71_nomatch_list_set(v);
            }
        }
    }
}

void route_71_input_number_set(number v) {
    this->route_71_input_list_set({v});
}

void receive_39_output_number_set(number v) {
    this->receive_39_output_number = v;
    this->metro_01_on_set(v);
    this->route_71_input_number_set(v);
}

void send_65_input_number_set(number v) {
    this->send_65_input_number = v;
    this->receive_49_output_number_set(v);
    this->p_32_target_playing_number_set(v);
    this->p_31_target_playing_number_set(v);
    this->p_28_target_playing_number_set(v);
    this->receive_43_output_number_set(v);
    this->p_27_target_playing_number_set(v);
    this->receive_39_output_number_set(v);
}

static number param_14_value_constrain(number v) {
    v = (v > 1 ? 1 : (v < 0.01 ? 0.01 : v));
    return v;
}

void dspexpr_69_in2_set(number v) {
    this->dspexpr_69_in2 = v;
}

void receive_37_output_number_set(number v) {
    this->receive_37_output_number = v;
    this->dspexpr_69_in2_set(v);
}

void send_66_input_number_set(number v) {
    this->send_66_input_number = v;
    this->receive_37_output_number_set(v);
}

static number param_15_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum9_number_set(number v) {
    this->p_33->receive_29_output_number_set(v);
}

void send_67_input_number_set(number v) {
    this->send_67_input_number = v;
    this->p_33_target_drum9_number_set(v);
}

static number param_16_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum1_number_set(number v) {
    this->p_33->receive_17_output_number_set(v);
}

void send_68_input_number_set(number v) {
    this->send_68_input_number = v;
    this->p_33_target_drum1_number_set(v);
}

static number param_17_value_constrain(number v) {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void p_32_target_key_number_set(number v) {
    this->p_32->receive_15_output_number_set(v);
}

void p_31_target_key_number_set(number v) {
    this->p_31->receive_11_output_number_set(v);
}

void p_28_target_key_number_set(number v) {
    this->p_28->receive_07_output_number_set(v);
}

void p_27_target_key_number_set(number v) {
    this->p_27->receive_03_output_number_set(v);
}

void send_70_input_number_set(number v) {
    this->send_70_input_number = v;
    this->p_32_target_key_number_set(v);
    this->p_31_target_key_number_set(v);
    this->p_28_target_key_number_set(v);
    this->p_27_target_key_number_set(v);
}

static number param_19_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum10_number_set(number v) {
    this->p_33->receive_30_output_number_set(v);
}

void send_72_input_number_set(number v) {
    this->send_72_input_number = v;
    this->p_33_target_drum10_number_set(v);
}

static number param_20_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum2_number_set(number v) {
    this->p_33->receive_19_output_number_set(v);
}

void send_73_input_number_set(number v) {
    this->send_73_input_number = v;
    this->p_33_target_drum2_number_set(v);
}

static number param_21_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum11_number_set(number v) {
    this->p_33->receive_31_output_number_set(v);
}

void send_76_input_number_set(number v) {
    this->send_76_input_number = v;
    this->p_33_target_drum11_number_set(v);
}

static number param_22_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum3_number_set(number v) {
    this->p_33->receive_21_output_number_set(v);
}

void send_77_input_number_set(number v) {
    this->send_77_input_number = v;
    this->p_33_target_drum3_number_set(v);
}

static number param_23_value_constrain(number v) {
    v = (v > 200 ? 200 : (v < 0 ? 0 : v));
    return v;
}

void metro_01_interval_set(number v) {
    this->metro_01_interval_setter(v);
    v = this->metro_01_interval;
}

void expr_252_out1_set(number v) {
    this->expr_252_out1 = v;
    this->metro_01_interval_set(this->expr_252_out1);
}

void expr_252_in1_set(number in1) {
    this->expr_252_in1 = in1;

    this->expr_252_out1_set(
        ((this->expr_252_in1 == 0. ? 0. : (number)1000 / this->expr_252_in1)) * 60 / (number)4
    );//#map:expr_obj-48:1
}

static number param_24_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum12_number_set(number v) {
    this->p_33->receive_32_output_number_set(v);
}

void send_82_input_number_set(number v) {
    this->send_82_input_number = v;
    this->p_33_target_drum12_number_set(v);
}

static number param_25_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum4_number_set(number v) {
    this->p_33->receive_23_output_number_set(v);
}

void send_83_input_number_set(number v) {
    this->send_83_input_number = v;
    this->p_33_target_drum4_number_set(v);
}

static number param_26_value_constrain(number v) {
    v = (v > 8 ? 8 : (v < 0 ? 0 : v));
    return v;
}

void p_32_target_octave_number_set(number v) {
    this->p_32->receive_13_output_number_set(v);
}

void p_31_target_octave_number_set(number v) {
    this->p_31->receive_09_output_number_set(v);
}

void p_28_target_octave_number_set(number v) {
    this->p_28->receive_05_output_number_set(v);
}

void p_27_target_octave_number_set(number v) {
    this->p_27->receive_01_output_number_set(v);
}

void send_84_input_number_set(number v) {
    this->send_84_input_number = v;
    this->p_32_target_octave_number_set(v);
    this->p_31_target_octave_number_set(v);
    this->p_28_target_octave_number_set(v);
    this->p_27_target_octave_number_set(v);
}

void expr_254_out1_set(number v) {
    this->expr_254_out1 = v;
    this->send_84_input_number_set(this->expr_254_out1);
}

void expr_254_in1_set(number in1) {
    this->expr_254_in1 = in1;
    this->expr_254_out1_set(this->expr_254_in1 * this->expr_254_in2);//#map:*_obj-6:1
}

static number param_27_value_constrain(number v) {
    v = (v > 100 ? 100 : (v < 0 ? 0 : v));
    return v;
}

void patcher_01_mix_set(number v) {
    {
        this->patcher_01->setParameterValue(1, v, this->_currentTime);
    }
}

static number param_28_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum13_number_set(number v) {
    this->p_33->receive_33_output_number_set(v);
}

void send_86_input_number_set(number v) {
    this->send_86_input_number = v;
    this->p_33_target_drum13_number_set(v);
}

static number param_29_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum5_number_set(number v) {
    this->p_33->receive_25_output_number_set(v);
}

void send_87_input_number_set(number v) {
    this->send_87_input_number = v;
    this->p_33_target_drum5_number_set(v);
}

static number param_30_value_constrain(number v) {
    v = (v > 4 ? 4 : (v < 0 ? 0 : v));
    return v;
}

void p_27_in1_number_set(number v) {
    this->p_27->updateTime(this->_currentTime);
    this->p_27->eventinlet_01_out1_number_set(v);
}

static number param_31_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum14_number_set(number v) {
    this->p_33->receive_34_output_number_set(v);
}

void send_88_input_number_set(number v) {
    this->send_88_input_number = v;
    this->p_33_target_drum14_number_set(v);
}

static number param_32_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum6_number_set(number v) {
    this->p_33->receive_26_output_number_set(v);
}

void send_89_input_number_set(number v) {
    this->send_89_input_number = v;
    this->p_33_target_drum6_number_set(v);
}

static number param_33_value_constrain(number v) {
    v = (v > 4 ? 4 : (v < 0 ? 0 : v));
    return v;
}

void p_28_in1_number_set(number v) {
    this->p_28->updateTime(this->_currentTime);
    this->p_28->eventinlet_03_out1_number_set(v);
}

static number param_34_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum15_number_set(number v) {
    this->p_33->receive_35_output_number_set(v);
}

void send_90_input_number_set(number v) {
    this->send_90_input_number = v;
    this->p_33_target_drum15_number_set(v);
}

static number param_35_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum7_number_set(number v) {
    this->p_33->receive_27_output_number_set(v);
}

void send_91_input_number_set(number v) {
    this->send_91_input_number = v;
    this->p_33_target_drum7_number_set(v);
}

static number param_36_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum16_number_set(number v) {
    this->p_33->receive_36_output_number_set(v);
}

void send_92_input_number_set(number v) {
    this->send_92_input_number = v;
    this->p_33_target_drum16_number_set(v);
}

static number param_37_value_constrain(number v) {
    v = (v > 15 ? 15 : (v < 0 ? 0 : v));
    return v;
}

void p_33_target_drum8_number_set(number v) {
    this->p_33->receive_28_output_number_set(v);
}

void send_93_input_number_set(number v) {
    this->send_93_input_number = v;
    this->p_33_target_drum8_number_set(v);
}

static number param_38_value_constrain(number v) {
    v = (v > 4 ? 4 : (v < 0 ? 0 : v));
    return v;
}

void p_31_in1_number_set(number v) {
    this->p_31->updateTime(this->_currentTime);
    this->p_31->eventinlet_17_out1_number_set(v);
}

static number param_39_value_constrain(number v) {
    v = (v > 4 ? 4 : (v < 0 ? 0 : v));
    return v;
}

void p_32_in1_number_set(number v) {
    this->p_32->updateTime(this->_currentTime);
    this->p_32->eventinlet_19_out1_number_set(v);
}

void counter_06_input_bang() {
    this->counter_06_output_set(this->counter_06_count);
    this->counter_06_inc();

    if (this->counter_06_count > this->counter_06_maximum) {
        if (this->counter_06_direction == 2) {
            this->counter_06_phase = !(bool)(this->counter_06_phase);
            this->counter_06_count = this->counter_06_maximum;
            this->counter_06_inc();
        } else
            this->counter_06_count = this->counter_06_minimum;

        if ((bool)(!(bool)(this->counter_06_overflow_number))) {
            if (this->counter_06_carryflag == 1)
                this->counter_06_overflow_bang_bang();
            else
                this->counter_06_overflow_number_set(1);
        }

        this->counter_06_carry_set(this->counter_06_carry + 1);
    } else if ((bool)(this->counter_06_overflow_number) && this->counter_06_carryflag == 0)
        this->counter_06_overflow_number_set(0);

    if (this->counter_06_count < this->counter_06_minimum) {
        if (this->counter_06_direction == 2) {
            this->counter_06_phase = !(bool)(this->counter_06_phase);
            this->counter_06_count = this->counter_06_minimum;
            this->counter_06_inc();
        } else
            this->counter_06_count = this->counter_06_maximum;

        if ((bool)(!(bool)(this->counter_06_underflow_number))) {
            if (this->counter_06_carryflag == 1)
                this->counter_06_underflow_bang_bang();
            else
                this->counter_06_underflow_number_set(1);
        }

        this->counter_06_carry_set(this->counter_06_carry + 1);
    } else if ((bool)(this->counter_06_underflow_number) && this->counter_06_carryflag == 0)
        this->counter_06_underflow_number_set(0);
}

void counter_07_output_set(number v) {
    this->counter_07_output = v;
    this->gate_25_input_number_set(v);
    this->counter_06_input_bang();
}

void select_01_nomatch_bang_bang() {}

void select_01_input_bang_bang() {
    this->select_01_nomatch_bang_bang();
}

void counter_07_overflow_bang_bang() {
    this->select_01_input_bang_bang();
}

static number counter_07_overflow_number_constrain(number v) {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_08_input_bang() {
    this->counter_08_output_set(this->counter_08_count);
    this->counter_08_inc();

    if (this->counter_08_count > this->counter_08_maximum) {
        if (this->counter_08_direction == 2) {
            this->counter_08_phase = !(bool)(this->counter_08_phase);
            this->counter_08_count = this->counter_08_maximum;
            this->counter_08_inc();
        } else
            this->counter_08_count = this->counter_08_minimum;

        if ((bool)(!(bool)(this->counter_08_overflow_number))) {
            if (this->counter_08_carryflag == 1)
                this->counter_08_overflow_bang_bang();
            else
                this->counter_08_overflow_number_set(1);
        }

        this->counter_08_carry_set(this->counter_08_carry + 1);
    } else if ((bool)(this->counter_08_overflow_number) && this->counter_08_carryflag == 0)
        this->counter_08_overflow_number_set(0);

    if (this->counter_08_count < this->counter_08_minimum) {
        if (this->counter_08_direction == 2) {
            this->counter_08_phase = !(bool)(this->counter_08_phase);
            this->counter_08_count = this->counter_08_minimum;
            this->counter_08_inc();
        } else
            this->counter_08_count = this->counter_08_maximum;

        if ((bool)(!(bool)(this->counter_08_underflow_number))) {
            if (this->counter_08_carryflag == 1)
                this->counter_08_underflow_bang_bang();
            else
                this->counter_08_underflow_number_set(1);
        }

        this->counter_08_carry_set(this->counter_08_carry + 1);
    } else if ((bool)(this->counter_08_underflow_number) && this->counter_08_carryflag == 0)
        this->counter_08_underflow_number_set(0);
}

void select_01_match1_bang() {
    this->counter_08_input_bang();
}

void select_01_nomatch_number_set(number ) {}

void select_01_input_number_set(number v) {
    if (v == this->select_01_test1)
        this->select_01_match1_bang();
    else
        this->select_01_nomatch_number_set(v);
}

void counter_07_overflow_number_set(number v) {
    v = this->counter_07_overflow_number_constrain(v);
    this->counter_07_overflow_number = v;
    this->select_01_input_number_set(v);
}

void counter_07_carry_set(number v) {
    this->counter_07_carry = v;
}

void counter_07_underflow_bang_bang() {}

static number counter_07_underflow_number_constrain(number v) {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_07_underflow_number_set(number v) {
    v = this->counter_07_underflow_number_constrain(v);
    this->counter_07_underflow_number = v;
}

void counter_07_input_bang() {
    this->counter_07_output_set(this->counter_07_count);
    this->counter_07_inc();

    if (this->counter_07_count > this->counter_07_maximum) {
        if (this->counter_07_direction == 2) {
            this->counter_07_phase = !(bool)(this->counter_07_phase);
            this->counter_07_count = this->counter_07_maximum;
            this->counter_07_inc();
        } else
            this->counter_07_count = this->counter_07_minimum;

        if ((bool)(!(bool)(this->counter_07_overflow_number))) {
            if (this->counter_07_carryflag == 1)
                this->counter_07_overflow_bang_bang();
            else
                this->counter_07_overflow_number_set(1);
        }

        this->counter_07_carry_set(this->counter_07_carry + 1);
    } else if ((bool)(this->counter_07_overflow_number) && this->counter_07_carryflag == 0)
        this->counter_07_overflow_number_set(0);

    if (this->counter_07_count < this->counter_07_minimum) {
        if (this->counter_07_direction == 2) {
            this->counter_07_phase = !(bool)(this->counter_07_phase);
            this->counter_07_count = this->counter_07_minimum;
            this->counter_07_inc();
        } else
            this->counter_07_count = this->counter_07_maximum;

        if ((bool)(!(bool)(this->counter_07_underflow_number))) {
            if (this->counter_07_carryflag == 1)
                this->counter_07_underflow_bang_bang();
            else
                this->counter_07_underflow_number_set(1);
        }

        this->counter_07_carry_set(this->counter_07_carry + 1);
    } else if ((bool)(this->counter_07_underflow_number) && this->counter_07_carryflag == 0)
        this->counter_07_underflow_number_set(0);
}

void send_75_input_bang_bang() {}

void metro_01_tickout_bang() {
    this->counter_07_input_bang();
    this->send_75_input_bang_bang();
}

void patcher_01_jitter_set(number v) {
    {
        this->patcher_01->setParameterValue(2, v, this->_currentTime);
    }
}

void patcher_01_diff_set(number v) {
    {
        this->patcher_01->setParameterValue(5, v, this->_currentTime);
    }
}

void patcher_01_damp_set(number v) {
    {
        this->patcher_01->setParameterValue(3, v, this->_currentTime);
    }
}

void loadmess_10_message_bang() {
    list v = this->loadmess_10_message;

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->patcher_01_jitter_set(converted);
    }

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->patcher_01_diff_set(converted);
    }

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->patcher_01_damp_set(converted);
    }
}

void patcher_01_decay_set(number v) {
    {
        this->patcher_01->setParameterValue(0, v, this->_currentTime);
    }
}

void patcher_01_size_set(number v) {
    {
        this->patcher_01->setParameterValue(4, v, this->_currentTime);
    }
}

void loadmess_11_message_bang() {
    list v = this->loadmess_11_message;

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->patcher_01_decay_set(converted);
    }

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->patcher_01_size_set(converted);
    }
}

void numberobj_47_output_set(number v) {
    this->p_27_in1_number_set(v);
}

void metro_02_on_set(number v) {
    this->metro_02_on = v;
    this->getEngine()->flushClockEvents(this, 1935387534, false);;

    if ((bool)(v)) {
        {
            this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
        }
    }
}

void toggle_01_value_set(number v) {
    this->toggle_01_value = v;
    this->sendParameter(29, false);
    this->metro_02_on_set(v);
}

void loadmess_12_message_bang() {
    list v = this->loadmess_12_message;

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->toggle_01_value_set(converted);
    }
}

void trigger_13_out2_bang() {
    this->counter_09_input_bang();
}

void p_30_in1_number_set(number v) {
    for (Index i = 0; i < 4; i++) {
        if (i + 1 == this->p_30_target || 0 == this->p_30_target) {
            this->p_30[(Index)i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 4; i++) {
        if (i + 1 == this->p_30_target || 0 == this->p_30_target) {
            this->p_30[i]->eventinlet_15_out1_number_set(v);
        }
    }
}

void trigger_13_out1_set(number v) {
    this->p_30_in1_number_set(v);
}

void trigger_13_input_number_set(number v) {
    this->trigger_13_out2_bang();
    this->trigger_13_out1_set(rnbo_trunc(v));
}

void listqueue_01_out_set(number v) {
    this->trigger_13_input_number_set(v);
}

void listqueue_01_input_bang_bang() {
    if (this->listqueue_01_queued->length > 0) {
        number tmp = this->listqueue_01_queued->pop();
        this->listqueue_01_reportSize();
        this->listqueue_01_out_set(tmp);
    }
}

void metro_02_tickout_bang() {
    this->listqueue_01_input_bang_bang();
}

void patcher_01_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
    RNBO_UNUSED(port);
    RNBO_UNUSED(channel);
    RNBO_UNUSED(status);
    this->patcher_01->processMidiEvent(_currentTime, 0, data, length);
}

void p_27_perform(Index n) {
    // subpatcher: chord_chooser_1
    this->p_27->process(nullptr, 0, nullptr, 0, n);
}

void p_28_perform(Index n) {
    // subpatcher: chord_chooser_2
    this->p_28->process(nullptr, 0, nullptr, 0, n);
}

void p_30_perform(Sample * out1, Index n) {
    // subpatcher: pluck_voice
    SampleArray<1> outs = {out1};

    for (number chan = 0; chan < 1; chan++)
        zeroSignal(outs[(Index)chan], n);

    for (Index i = 0; i < 4; i++)
        this->p_30[(Index)i]->process(nullptr, 0, outs, 1, n);
}

void p_29_perform(Sample * in1, Sample * in2, Sample * out1, Sample * out2, Index n) {
    SampleArray<2> ins = {in1, in2};
    SampleArray<2> outs = {out1, out2};
    this->p_29->process(ins, 2, outs, 2, n);
}

void limi_01_perform(const Sample * input1, Sample * output1, Index n) {
    RNBO_UNUSED(output1);
    RNBO_UNUSED(input1);
    auto __limi_01_lookaheadInv = this->limi_01_lookaheadInv;
    auto __limi_01_threshold = this->limi_01_threshold;
    auto __limi_01_lookahead = this->limi_01_lookahead;
    auto __limi_01_gainBuffer = this->limi_01_gainBuffer;
    auto __limi_01_recover = this->limi_01_recover;
    auto __limi_01_last = this->limi_01_last;
    auto __limi_01_postamp = this->limi_01_postamp;
    auto __limi_01_lookaheadIndex = this->limi_01_lookaheadIndex;
    auto __limi_01_lookaheadBuffers = this->limi_01_lookaheadBuffers;
    auto __limi_01_preamp = this->limi_01_preamp;
    auto __limi_01_dcblock = this->limi_01_dcblock;
    auto __limi_01_bypass = this->limi_01_bypass;
    ConstSampleArray<1> input = {input1};
    SampleArray<1> output = {output1};

    if ((bool)(__limi_01_bypass)) {
        for (Index i = 0; i < n; i++) {
            for (Index j = 0; j < 1; j++) {
                output[(Index)j][(Index)i] = input[(Index)j][(Index)i];
            }
        }
    } else {
        number v;

        for (Index i = 0; i < n; i++) {
            number hotSample = 0;

            for (Index j = 0; j < 1; j++) {
                auto smps = input[(Index)j];
                v = ((bool)(__limi_01_dcblock) ? this->limi_01_dc_next(j, smps[(Index)i], 0.9997) : smps[(Index)i]);
                v *= __limi_01_preamp;
                __limi_01_lookaheadBuffers[(Index)j][__limi_01_lookaheadIndex] = v * __limi_01_postamp;
                v = rnbo_fabs(v);

                if (v > hotSample)
                    hotSample = v;
            }

            {
                if (__limi_01_last > 0.01)
                    v = __limi_01_last + __limi_01_recover * __limi_01_last;
                else
                    v = __limi_01_last + __limi_01_recover;
            }

            if (v > 1)
                v = 1;

            __limi_01_gainBuffer[__limi_01_lookaheadIndex] = v;
            int lookaheadPlayback = (int)(__limi_01_lookaheadIndex - (int)(__limi_01_lookahead));

            if (lookaheadPlayback < 0)
                lookaheadPlayback += (int)(__limi_01_lookahead);

            if (hotSample * v > __limi_01_threshold) {
                number newgain;
                number curgain = __limi_01_threshold / hotSample;
                number inc = __limi_01_threshold - curgain;
                number acc = 0.0;
                number flag = 0;

                for (Index j = 0; flag == 0 && j < (Index)(__limi_01_lookahead); j++) {
                    int k = (int)(__limi_01_lookaheadIndex - (int)(j));

                    if (k < 0)
                        k += (int)(__limi_01_lookahead);

                    {
                        newgain = curgain + inc * (acc * acc);
                    }

                    if (newgain < __limi_01_gainBuffer[(Index)k])
                        __limi_01_gainBuffer[(Index)k] = newgain;
                    else
                        flag = 1;

                    acc = acc + __limi_01_lookaheadInv;
                }
            }

            for (Index j = 0; j < 1; j++) {
                output[(Index)j][(Index)i] = __limi_01_lookaheadBuffers[(Index)j][(Index)lookaheadPlayback] * __limi_01_gainBuffer[(Index)lookaheadPlayback];
            }

            __limi_01_last = __limi_01_gainBuffer[__limi_01_lookaheadIndex];
            __limi_01_lookaheadIndex++;

            if (__limi_01_lookaheadIndex >= __limi_01_lookahead)
                __limi_01_lookaheadIndex = 0;
        }
    }

    this->limi_01_lookaheadIndex = __limi_01_lookaheadIndex;
    this->limi_01_last = __limi_01_last;
}

void signalsend_06_perform(const Sample * input, Sample * send, Index n) {
    for (Index i = 0; i < n; i++) {
        send[(Index)i] = input[(Index)i];
    }
}

void signalreceive_08_perform(const Sample * receive, Sample * output, Index n) {
    for (Index i = 0; i < n; i++) {
        output[(Index)i] = receive[(Index)i];
    }
}

void dspexpr_69_perform(const Sample * in1, number in2, Sample * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = (in2 == 0 ? 0 : rnbo_fround((in2 == 0. ? 0. : in1[(Index)i] * 1 / in2)) * in2);//#map:_###_obj_###_:1
    }
}

void patcher_01_perform(
    Sample * in1,
    Sample * in2,
    Sample * source_aDecay,
    Sample * source_aDamp,
    Sample * source_aJitter,
    Sample * source_aDiff,
    Sample * source_aSize,
    Sample * out1,
    Sample * out2,
    Index n
) {
    // subpatcher: plateverb
    SampleArray<2> ins = {in1, in2};

    SampleArray<7> outs = {
        out1,
        out2,
        source_aDecay,
        source_aDamp,
        source_aJitter,
        source_aDiff,
        source_aSize
    };

    this->patcher_01->process(ins, 2, outs, 7, n);
}

void p_31_perform(Index n) {
    // subpatcher: chord_chooser_3
    this->p_31->process(nullptr, 0, nullptr, 0, n);
}

void p_32_perform(Index n) {
    // subpatcher: chord_chooser_4
    this->p_32->process(nullptr, 0, nullptr, 0, n);
}

void groove_01_perform(
    number rate_auto,
    number begin,
    number end,
    Sample * out1,
    Sample * out2,
    Sample * sync,
    Index n
) {
    RNBO_UNUSED(out2);
    RNBO_UNUSED(out1);
    RNBO_UNUSED(end);
    RNBO_UNUSED(begin);
    auto __groove_01_crossfade = this->groove_01_crossfade;
    auto __groove_01_loop = this->groove_01_loop;
    auto __groove_01_playStatus = this->groove_01_playStatus;
    auto __groove_01_readIndex = this->groove_01_readIndex;
    auto __groove_01_incomingChange = this->groove_01_incomingChange;
    auto __groove_01_changeIncomingInSamples = this->groove_01_changeIncomingInSamples;
    SampleArray<2> out = {out1, out2};
    SampleIndex bufferLength = (SampleIndex)(this->groove_01_buffer->getSize());
    Index i = 0;

    if (bufferLength > 1) {
        number effectiveChannels = this->minimum(this->groove_01_buffer->getChannels(), 2);
        number srMult = 0.001 * this->groove_01_buffer->getSampleRate();
        number srInv = (number)1 / this->samplerate();
        number rateMult = this->groove_01_buffer->getSampleRate() * srInv;

        for (; i < n; i++) {
            Index channel = 0;
            number offset = 0;
            number loopMin = 0 * srMult;
            loopMin = (loopMin > bufferLength - 1 ? bufferLength - 1 : (loopMin < 0 ? 0 : loopMin));
            number loopMax = bufferLength;
            loopMax = (loopMax > bufferLength ? bufferLength : (loopMax < 0 ? 0 : loopMax));

            if (loopMin >= loopMax) {
                offset = loopMax;
                loopMax = bufferLength;
                loopMin -= offset;
            }

            number loopLength = loopMax - loopMin;
            number currentRate = rate_auto * rateMult;
            number currentSync = 0;

            if (__groove_01_changeIncomingInSamples > 0) {
                __groove_01_changeIncomingInSamples--;

                if (__groove_01_changeIncomingInSamples <= 0) {
                    if (__groove_01_incomingChange == 1) {
                        if (currentRate < 0) {
                            __groove_01_readIndex = loopMax - 1;
                        } else {
                            __groove_01_readIndex = loopMin;
                        }

                        __groove_01_playStatus = 1;
                    } else if (__groove_01_incomingChange == 0) {
                        __groove_01_playStatus = 0;
                    }

                    __groove_01_incomingChange = 2;
                }
            }

            if (loopLength > 0) {
                if (currentRate != 0) {
                    if (__groove_01_playStatus == 1) {
                        if ((bool)(__groove_01_loop)) {
                            while (__groove_01_readIndex < loopMin) {
                                __groove_01_readIndex += loopLength;
                            }

                            while (__groove_01_readIndex >= loopMax) {
                                __groove_01_readIndex -= loopLength;
                            }
                        } else if (__groove_01_readIndex >= loopMax || __groove_01_readIndex < loopMin) {
                            __groove_01_playStatus = 0;
                            break;
                        }

                        for (; channel < effectiveChannels; channel++) {
                            number outSample = (currentRate == 1 ? this->groove_01_getSample((Index)(channel), rnbo_trunc(__groove_01_readIndex), offset, bufferLength) : this->groove_01_interpolatedSample(
                                (Index)(channel),
                                __groove_01_readIndex,
                                loopMax,
                                loopLength,
                                offset,
                                bufferLength
                            ));

                            if (__groove_01_crossfade > 0) {
                                out[(Index)channel][(Index)i] = this->groove_01_crossfadedSample(
                                    outSample,
                                    __groove_01_readIndex,
                                    (Index)(channel),
                                    currentRate,
                                    loopMin,
                                    loopMax,
                                    loopLength,
                                    offset,
                                    bufferLength
                                );
                            } else {
                                out[(Index)channel][(Index)i] = outSample;
                            }
                        }

                        __groove_01_readIndex += currentRate;
                    }
                }
            }

            for (; channel < 2; channel++) {
                if (__groove_01_playStatus <= 0)
                    sync[(Index)i] = 0;

                out[(Index)channel][(Index)i] = 0;
            }
        }
    }

    for (; i < n; i++) {
        if (__groove_01_playStatus <= 0)
            sync[(Index)i] = 0;

        for (number channel = 0; channel < 2; channel++) {
            out[(Index)channel][(Index)i] = 0;
        }
    }

    this->groove_01_changeIncomingInSamples = __groove_01_changeIncomingInSamples;
    this->groove_01_incomingChange = __groove_01_incomingChange;
    this->groove_01_readIndex = __groove_01_readIndex;
    this->groove_01_playStatus = __groove_01_playStatus;
}

void groove_02_perform(
    number rate_auto,
    number begin,
    number end,
    Sample * out1,
    Sample * out2,
    Sample * sync,
    Index n
) {
    RNBO_UNUSED(out2);
    RNBO_UNUSED(out1);
    RNBO_UNUSED(end);
    RNBO_UNUSED(begin);
    auto __groove_02_crossfade = this->groove_02_crossfade;
    auto __groove_02_loop = this->groove_02_loop;
    auto __groove_02_playStatus = this->groove_02_playStatus;
    auto __groove_02_readIndex = this->groove_02_readIndex;
    auto __groove_02_incomingChange = this->groove_02_incomingChange;
    auto __groove_02_changeIncomingInSamples = this->groove_02_changeIncomingInSamples;
    SampleArray<2> out = {out1, out2};
    SampleIndex bufferLength = (SampleIndex)(this->groove_02_buffer->getSize());
    Index i = 0;

    if (bufferLength > 1) {
        number effectiveChannels = this->minimum(this->groove_02_buffer->getChannels(), 2);
        number srMult = 0.001 * this->groove_02_buffer->getSampleRate();
        number srInv = (number)1 / this->samplerate();
        number rateMult = this->groove_02_buffer->getSampleRate() * srInv;

        for (; i < n; i++) {
            Index channel = 0;
            number offset = 0;
            number loopMin = 0 * srMult;
            loopMin = (loopMin > bufferLength - 1 ? bufferLength - 1 : (loopMin < 0 ? 0 : loopMin));
            number loopMax = bufferLength;
            loopMax = (loopMax > bufferLength ? bufferLength : (loopMax < 0 ? 0 : loopMax));

            if (loopMin >= loopMax) {
                offset = loopMax;
                loopMax = bufferLength;
                loopMin -= offset;
            }

            number loopLength = loopMax - loopMin;
            number currentRate = rate_auto * rateMult;
            number currentSync = 0;

            if (__groove_02_changeIncomingInSamples > 0) {
                __groove_02_changeIncomingInSamples--;

                if (__groove_02_changeIncomingInSamples <= 0) {
                    if (__groove_02_incomingChange == 1) {
                        if (currentRate < 0) {
                            __groove_02_readIndex = loopMax - 1;
                        } else {
                            __groove_02_readIndex = loopMin;
                        }

                        __groove_02_playStatus = 1;
                    } else if (__groove_02_incomingChange == 0) {
                        __groove_02_playStatus = 0;
                    }

                    __groove_02_incomingChange = 2;
                }
            }

            if (loopLength > 0) {
                if (currentRate != 0) {
                    if (__groove_02_playStatus == 1) {
                        if ((bool)(__groove_02_loop)) {
                            while (__groove_02_readIndex < loopMin) {
                                __groove_02_readIndex += loopLength;
                            }

                            while (__groove_02_readIndex >= loopMax) {
                                __groove_02_readIndex -= loopLength;
                            }
                        } else if (__groove_02_readIndex >= loopMax || __groove_02_readIndex < loopMin) {
                            __groove_02_playStatus = 0;
                            break;
                        }

                        for (; channel < effectiveChannels; channel++) {
                            number outSample = (currentRate == 1 ? this->groove_02_getSample((Index)(channel), rnbo_trunc(__groove_02_readIndex), offset, bufferLength) : this->groove_02_interpolatedSample(
                                (Index)(channel),
                                __groove_02_readIndex,
                                loopMax,
                                loopLength,
                                offset,
                                bufferLength
                            ));

                            if (__groove_02_crossfade > 0) {
                                out[(Index)channel][(Index)i] = this->groove_02_crossfadedSample(
                                    outSample,
                                    __groove_02_readIndex,
                                    (Index)(channel),
                                    currentRate,
                                    loopMin,
                                    loopMax,
                                    loopLength,
                                    offset,
                                    bufferLength
                                );
                            } else {
                                out[(Index)channel][(Index)i] = outSample;
                            }
                        }

                        __groove_02_readIndex += currentRate;
                    }
                }
            }

            for (; channel < 2; channel++) {
                if (__groove_02_playStatus <= 0)
                    sync[(Index)i] = 0;

                out[(Index)channel][(Index)i] = 0;
            }
        }
    }

    for (; i < n; i++) {
        if (__groove_02_playStatus <= 0)
            sync[(Index)i] = 0;

        for (number channel = 0; channel < 2; channel++) {
            out[(Index)channel][(Index)i] = 0;
        }
    }

    this->groove_02_changeIncomingInSamples = __groove_02_changeIncomingInSamples;
    this->groove_02_incomingChange = __groove_02_incomingChange;
    this->groove_02_readIndex = __groove_02_readIndex;
    this->groove_02_playStatus = __groove_02_playStatus;
}

void groove_03_perform(
    number rate_auto,
    number begin,
    number end,
    Sample * out1,
    Sample * out2,
    Sample * sync,
    Index n
) {
    RNBO_UNUSED(out2);
    RNBO_UNUSED(out1);
    RNBO_UNUSED(end);
    RNBO_UNUSED(begin);
    auto __groove_03_crossfade = this->groove_03_crossfade;
    auto __groove_03_loop = this->groove_03_loop;
    auto __groove_03_playStatus = this->groove_03_playStatus;
    auto __groove_03_readIndex = this->groove_03_readIndex;
    auto __groove_03_incomingChange = this->groove_03_incomingChange;
    auto __groove_03_changeIncomingInSamples = this->groove_03_changeIncomingInSamples;
    SampleArray<2> out = {out1, out2};
    SampleIndex bufferLength = (SampleIndex)(this->groove_03_buffer->getSize());
    Index i = 0;

    if (bufferLength > 1) {
        number effectiveChannels = this->minimum(this->groove_03_buffer->getChannels(), 2);
        number srMult = 0.001 * this->groove_03_buffer->getSampleRate();
        number srInv = (number)1 / this->samplerate();
        number rateMult = this->groove_03_buffer->getSampleRate() * srInv;

        for (; i < n; i++) {
            Index channel = 0;
            number offset = 0;
            number loopMin = 0 * srMult;
            loopMin = (loopMin > bufferLength - 1 ? bufferLength - 1 : (loopMin < 0 ? 0 : loopMin));
            number loopMax = bufferLength;
            loopMax = (loopMax > bufferLength ? bufferLength : (loopMax < 0 ? 0 : loopMax));

            if (loopMin >= loopMax) {
                offset = loopMax;
                loopMax = bufferLength;
                loopMin -= offset;
            }

            number loopLength = loopMax - loopMin;
            number currentRate = rate_auto * rateMult;
            number currentSync = 0;

            if (__groove_03_changeIncomingInSamples > 0) {
                __groove_03_changeIncomingInSamples--;

                if (__groove_03_changeIncomingInSamples <= 0) {
                    if (__groove_03_incomingChange == 1) {
                        if (currentRate < 0) {
                            __groove_03_readIndex = loopMax - 1;
                        } else {
                            __groove_03_readIndex = loopMin;
                        }

                        __groove_03_playStatus = 1;
                    } else if (__groove_03_incomingChange == 0) {
                        __groove_03_playStatus = 0;
                    }

                    __groove_03_incomingChange = 2;
                }
            }

            if (loopLength > 0) {
                if (currentRate != 0) {
                    if (__groove_03_playStatus == 1) {
                        if ((bool)(__groove_03_loop)) {
                            while (__groove_03_readIndex < loopMin) {
                                __groove_03_readIndex += loopLength;
                            }

                            while (__groove_03_readIndex >= loopMax) {
                                __groove_03_readIndex -= loopLength;
                            }
                        } else if (__groove_03_readIndex >= loopMax || __groove_03_readIndex < loopMin) {
                            __groove_03_playStatus = 0;
                            break;
                        }

                        for (; channel < effectiveChannels; channel++) {
                            number outSample = (currentRate == 1 ? this->groove_03_getSample((Index)(channel), rnbo_trunc(__groove_03_readIndex), offset, bufferLength) : this->groove_03_interpolatedSample(
                                (Index)(channel),
                                __groove_03_readIndex,
                                loopMax,
                                loopLength,
                                offset,
                                bufferLength
                            ));

                            if (__groove_03_crossfade > 0) {
                                out[(Index)channel][(Index)i] = this->groove_03_crossfadedSample(
                                    outSample,
                                    __groove_03_readIndex,
                                    (Index)(channel),
                                    currentRate,
                                    loopMin,
                                    loopMax,
                                    loopLength,
                                    offset,
                                    bufferLength
                                );
                            } else {
                                out[(Index)channel][(Index)i] = outSample;
                            }
                        }

                        __groove_03_readIndex += currentRate;
                    }
                }
            }

            for (; channel < 2; channel++) {
                if (__groove_03_playStatus <= 0)
                    sync[(Index)i] = 0;

                out[(Index)channel][(Index)i] = 0;
            }
        }
    }

    for (; i < n; i++) {
        if (__groove_03_playStatus <= 0)
            sync[(Index)i] = 0;

        for (number channel = 0; channel < 2; channel++) {
            out[(Index)channel][(Index)i] = 0;
        }
    }

    this->groove_03_changeIncomingInSamples = __groove_03_changeIncomingInSamples;
    this->groove_03_incomingChange = __groove_03_incomingChange;
    this->groove_03_readIndex = __groove_03_readIndex;
    this->groove_03_playStatus = __groove_03_playStatus;
}

void groove_04_perform(
    number rate_auto,
    number begin,
    number end,
    Sample * out1,
    Sample * out2,
    Sample * sync,
    Index n
) {
    RNBO_UNUSED(out2);
    RNBO_UNUSED(out1);
    RNBO_UNUSED(end);
    RNBO_UNUSED(begin);
    auto __groove_04_crossfade = this->groove_04_crossfade;
    auto __groove_04_loop = this->groove_04_loop;
    auto __groove_04_playStatus = this->groove_04_playStatus;
    auto __groove_04_readIndex = this->groove_04_readIndex;
    auto __groove_04_incomingChange = this->groove_04_incomingChange;
    auto __groove_04_changeIncomingInSamples = this->groove_04_changeIncomingInSamples;
    SampleArray<2> out = {out1, out2};
    SampleIndex bufferLength = (SampleIndex)(this->groove_04_buffer->getSize());
    Index i = 0;

    if (bufferLength > 1) {
        number effectiveChannels = this->minimum(this->groove_04_buffer->getChannels(), 2);
        number srMult = 0.001 * this->groove_04_buffer->getSampleRate();
        number srInv = (number)1 / this->samplerate();
        number rateMult = this->groove_04_buffer->getSampleRate() * srInv;

        for (; i < n; i++) {
            Index channel = 0;
            number offset = 0;
            number loopMin = 0 * srMult;
            loopMin = (loopMin > bufferLength - 1 ? bufferLength - 1 : (loopMin < 0 ? 0 : loopMin));
            number loopMax = bufferLength;
            loopMax = (loopMax > bufferLength ? bufferLength : (loopMax < 0 ? 0 : loopMax));

            if (loopMin >= loopMax) {
                offset = loopMax;
                loopMax = bufferLength;
                loopMin -= offset;
            }

            number loopLength = loopMax - loopMin;
            number currentRate = rate_auto * rateMult;
            number currentSync = 0;

            if (__groove_04_changeIncomingInSamples > 0) {
                __groove_04_changeIncomingInSamples--;

                if (__groove_04_changeIncomingInSamples <= 0) {
                    if (__groove_04_incomingChange == 1) {
                        if (currentRate < 0) {
                            __groove_04_readIndex = loopMax - 1;
                        } else {
                            __groove_04_readIndex = loopMin;
                        }

                        __groove_04_playStatus = 1;
                    } else if (__groove_04_incomingChange == 0) {
                        __groove_04_playStatus = 0;
                    }

                    __groove_04_incomingChange = 2;
                }
            }

            if (loopLength > 0) {
                if (currentRate != 0) {
                    if (__groove_04_playStatus == 1) {
                        if ((bool)(__groove_04_loop)) {
                            while (__groove_04_readIndex < loopMin) {
                                __groove_04_readIndex += loopLength;
                            }

                            while (__groove_04_readIndex >= loopMax) {
                                __groove_04_readIndex -= loopLength;
                            }
                        } else if (__groove_04_readIndex >= loopMax || __groove_04_readIndex < loopMin) {
                            __groove_04_playStatus = 0;
                            break;
                        }

                        for (; channel < effectiveChannels; channel++) {
                            number outSample = (currentRate == 1 ? this->groove_04_getSample((Index)(channel), rnbo_trunc(__groove_04_readIndex), offset, bufferLength) : this->groove_04_interpolatedSample(
                                (Index)(channel),
                                __groove_04_readIndex,
                                loopMax,
                                loopLength,
                                offset,
                                bufferLength
                            ));

                            if (__groove_04_crossfade > 0) {
                                out[(Index)channel][(Index)i] = this->groove_04_crossfadedSample(
                                    outSample,
                                    __groove_04_readIndex,
                                    (Index)(channel),
                                    currentRate,
                                    loopMin,
                                    loopMax,
                                    loopLength,
                                    offset,
                                    bufferLength
                                );
                            } else {
                                out[(Index)channel][(Index)i] = outSample;
                            }
                        }

                        __groove_04_readIndex += currentRate;
                    }
                }
            }

            for (; channel < 2; channel++) {
                if (__groove_04_playStatus <= 0)
                    sync[(Index)i] = 0;

                out[(Index)channel][(Index)i] = 0;
            }
        }
    }

    for (; i < n; i++) {
        if (__groove_04_playStatus <= 0)
            sync[(Index)i] = 0;

        for (number channel = 0; channel < 2; channel++) {
            out[(Index)channel][(Index)i] = 0;
        }
    }

    this->groove_04_changeIncomingInSamples = __groove_04_changeIncomingInSamples;
    this->groove_04_incomingChange = __groove_04_incomingChange;
    this->groove_04_readIndex = __groove_04_readIndex;
    this->groove_04_playStatus = __groove_04_playStatus;
}

void signaladder_01_perform(
    const Sample * in1,
    const Sample * in2,
    const Sample * in3,
    const Sample * in4,
    Sample * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
    }
}

void signalsend_07_perform(const Sample * input, Sample * send, Index n) {
    for (Index i = 0; i < n; i++) {
        send[(Index)i] = input[(Index)i];
    }
}

void signalreceive_07_perform(const Sample * receive, Sample * output, Index n) {
    for (Index i = 0; i < n; i++) {
        output[(Index)i] = receive[(Index)i];
    }
}

void signaladder_02_perform(const Sample * in1, const Sample * in2, Sample * out, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i];
    }
}

void signaladder_03_perform(
    const Sample * in1,
    const Sample * in2,
    const Sample * in3,
    const Sample * in4,
    Sample * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
    }
}

void signalsend_08_perform(const Sample * input, Sample * send, Index n) {
    for (Index i = 0; i < n; i++) {
        send[(Index)i] = input[(Index)i];
    }
}

void signalreceive_09_perform(const Sample * receive, Sample * output, Index n) {
    for (Index i = 0; i < n; i++) {
        output[(Index)i] = receive[(Index)i];
    }
}

void signaladder_04_perform(const Sample * in1, const Sample * in2, Sample * out, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i];
    }
}

void p_33_perform(Index n) {
    // subpatcher: drum_machine
    this->p_33->process(nullptr, 0, nullptr, 0, n);
}

void p_34_perform(Index n) {
    // subpatcher: buffers
    this->p_34->process(nullptr, 0, nullptr, 0, n);
}

void stackprotect_perform(Index n) {
    RNBO_UNUSED(n);
    auto __stackprotect_count = this->stackprotect_count;
    __stackprotect_count = 0;
    this->stackprotect_count = __stackprotect_count;
}

void metro_01_interval_setter(number v) {
    this->metro_01_interval = (v > 0 ? v : 0);
}

void numberobj_47_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_47_currentFormat != 6) {
        localvalue = rnbo_trunc(localvalue);
    }

    this->numberobj_47_value = localvalue;
}

void metro_02_interval_setter(number v) {
    this->metro_02_interval = (v > 0 ? v : 0);
}

void limi_01_lookahead_setter(number v) {
    this->limi_01_lookahead = (v > 512 ? 512 : (v < 0 ? 0 : v));
    this->limi_01_lookaheadInv = (number)1 / this->limi_01_lookahead;
}

void limi_01_preamp_setter(number v) {
    this->limi_01_preamp = rnbo_pow(10., v * 0.05);
}

void limi_01_postamp_setter(number v) {
    this->limi_01_postamp = rnbo_pow(10., v * 0.05);
}

void limi_01_threshold_setter(number v) {
    this->limi_01_threshold = rnbo_pow(10., v * 0.05);
}

void param_13_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_13_value;
}

void param_13_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_13_value_set(preset["value"]);
}

void param_14_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_14_value;
}

void param_14_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_14_value_set(preset["value"]);
}

void param_15_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_15_value;
}

void param_15_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_15_value_set(preset["value"]);
}

void param_16_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_16_value;
}

void param_16_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_16_value_set(preset["value"]);
}

void param_17_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_17_value;
}

void param_17_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_17_value_set(preset["value"]);
}

void counter_05_inc() {
    this->counter_05_count = ((bool)(this->counter_05_phase) ? this->counter_05_count + 1 : this->counter_05_count - 1);
}

void counter_05_input() {
    this->counter_05_output_set(this->counter_05_count);
    this->counter_05_inc();

    if (this->counter_05_count > this->counter_05_maximum) {
        if (this->counter_05_direction == 2) {
            this->counter_05_phase = !(bool)(this->counter_05_phase);
            this->counter_05_count = this->counter_05_maximum;
            this->counter_05_inc();
        } else
            this->counter_05_count = this->counter_05_minimum;

        if ((bool)(!(bool)(this->counter_05_overflow_number))) {
            if (this->counter_05_carryflag == 1)
                this->counter_05_overflow_bang_bang();
            else
                this->counter_05_overflow_number_set(1);
        }

        this->counter_05_carry_set(this->counter_05_carry + 1);
    } else if ((bool)(this->counter_05_overflow_number) && this->counter_05_carryflag == 0)
        this->counter_05_overflow_number_set(0);

    if (this->counter_05_count < this->counter_05_minimum) {
        if (this->counter_05_direction == 2) {
            this->counter_05_phase = !(bool)(this->counter_05_phase);
            this->counter_05_count = this->counter_05_minimum;
            this->counter_05_inc();
        } else
            this->counter_05_count = this->counter_05_maximum;

        if ((bool)(!(bool)(this->counter_05_underflow_number))) {
            if (this->counter_05_carryflag == 1)
                this->counter_05_underflow_bang_bang();
            else
                this->counter_05_underflow_number_set(1);
        }

        this->counter_05_carry_set(this->counter_05_carry + 1);
    } else if ((bool)(this->counter_05_underflow_number) && this->counter_05_carryflag == 0)
        this->counter_05_underflow_number_set(0);
}

void param_18_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_18_value;
}

void param_18_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_18_value_set(preset["value"]);
}

void counter_06_inc() {
    this->counter_06_count = ((bool)(this->counter_06_phase) ? this->counter_06_count + 1 : this->counter_06_count - 1);
}

void counter_06_input() {
    this->counter_06_output_set(this->counter_06_count);
    this->counter_06_inc();

    if (this->counter_06_count > this->counter_06_maximum) {
        if (this->counter_06_direction == 2) {
            this->counter_06_phase = !(bool)(this->counter_06_phase);
            this->counter_06_count = this->counter_06_maximum;
            this->counter_06_inc();
        } else
            this->counter_06_count = this->counter_06_minimum;

        if ((bool)(!(bool)(this->counter_06_overflow_number))) {
            if (this->counter_06_carryflag == 1)
                this->counter_06_overflow_bang_bang();
            else
                this->counter_06_overflow_number_set(1);
        }

        this->counter_06_carry_set(this->counter_06_carry + 1);
    } else if ((bool)(this->counter_06_overflow_number) && this->counter_06_carryflag == 0)
        this->counter_06_overflow_number_set(0);

    if (this->counter_06_count < this->counter_06_minimum) {
        if (this->counter_06_direction == 2) {
            this->counter_06_phase = !(bool)(this->counter_06_phase);
            this->counter_06_count = this->counter_06_minimum;
            this->counter_06_inc();
        } else
            this->counter_06_count = this->counter_06_maximum;

        if ((bool)(!(bool)(this->counter_06_underflow_number))) {
            if (this->counter_06_carryflag == 1)
                this->counter_06_underflow_bang_bang();
            else
                this->counter_06_underflow_number_set(1);
        }

        this->counter_06_carry_set(this->counter_06_carry + 1);
    } else if ((bool)(this->counter_06_underflow_number) && this->counter_06_carryflag == 0)
        this->counter_06_underflow_number_set(0);
}

void param_19_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_19_value;
}

void param_19_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_19_value_set(preset["value"]);
}

void param_20_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_20_value;
}

void param_20_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_20_value_set(preset["value"]);
}

void metro_01_onTransportChanged(number ) {}

void metro_01_onBeatTimeChanged(number ) {}

void param_21_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_21_value;
}

void param_21_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_21_value_set(preset["value"]);
}

void param_22_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_22_value;
}

void param_22_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_22_value_set(preset["value"]);
}

void counter_07_inc() {
    this->counter_07_count = ((bool)(this->counter_07_phase) ? this->counter_07_count + 1 : this->counter_07_count - 1);
}

void param_23_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_23_value;
}

void param_23_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_23_value_set(preset["value"]);
}

void counter_08_inc() {
    this->counter_08_count = ((bool)(this->counter_08_phase) ? this->counter_08_count + 1 : this->counter_08_count - 1);
}

void counter_08_input() {
    this->counter_08_output_set(this->counter_08_count);
    this->counter_08_inc();

    if (this->counter_08_count > this->counter_08_maximum) {
        if (this->counter_08_direction == 2) {
            this->counter_08_phase = !(bool)(this->counter_08_phase);
            this->counter_08_count = this->counter_08_maximum;
            this->counter_08_inc();
        } else
            this->counter_08_count = this->counter_08_minimum;

        if ((bool)(!(bool)(this->counter_08_overflow_number))) {
            if (this->counter_08_carryflag == 1)
                this->counter_08_overflow_bang_bang();
            else
                this->counter_08_overflow_number_set(1);
        }

        this->counter_08_carry_set(this->counter_08_carry + 1);
    } else if ((bool)(this->counter_08_overflow_number) && this->counter_08_carryflag == 0)
        this->counter_08_overflow_number_set(0);

    if (this->counter_08_count < this->counter_08_minimum) {
        if (this->counter_08_direction == 2) {
            this->counter_08_phase = !(bool)(this->counter_08_phase);
            this->counter_08_count = this->counter_08_minimum;
            this->counter_08_inc();
        } else
            this->counter_08_count = this->counter_08_maximum;

        if ((bool)(!(bool)(this->counter_08_underflow_number))) {
            if (this->counter_08_carryflag == 1)
                this->counter_08_underflow_bang_bang();
            else
                this->counter_08_underflow_number_set(1);
        }

        this->counter_08_carry_set(this->counter_08_carry + 1);
    } else if ((bool)(this->counter_08_underflow_number) && this->counter_08_carryflag == 0)
        this->counter_08_underflow_number_set(0);
}

void param_24_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_24_value;
}

void param_24_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_24_value_set(preset["value"]);
}

void param_25_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_25_value;
}

void param_25_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_25_value_set(preset["value"]);
}

void param_26_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_26_value;
}

void param_26_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_26_value_set(preset["value"]);
}

void param_27_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_27_value;
}

void param_27_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_27_value_set(preset["value"]);
}

void numberobj_47_init() {
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-36"), 1, this->_currentTime);
}

void numberobj_47_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_47_value;
}

void numberobj_47_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_47_value_set(preset["value"]);
}

void param_28_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_28_value;
}

void param_28_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_28_value_set(preset["value"]);
}

void param_29_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_29_value;
}

void param_29_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_29_value_set(preset["value"]);
}

void toggle_01_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_01_value;
}

void toggle_01_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_01_value_set(preset["value"]);
}

void metro_02_onTransportChanged(number ) {}

void metro_02_onBeatTimeChanged(number ) {}

void param_30_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_30_value;
}

void param_30_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_30_value_set(preset["value"]);
}

void listqueue_01_reportSize() {
    this->listqueue_01_size_set(this->listqueue_01_queued->length);
}

void param_31_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_31_value;
}

void param_31_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_31_value_set(preset["value"]);
}

void param_32_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_32_value;
}

void param_32_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_32_value_set(preset["value"]);
}

void counter_09_inc() {
    this->counter_09_count = ((bool)(this->counter_09_phase) ? this->counter_09_count + 1 : this->counter_09_count - 1);
}

void counter_09_input() {
    this->counter_09_output_set(this->counter_09_count);
    this->counter_09_inc();

    if (this->counter_09_count > this->counter_09_maximum) {
        if (this->counter_09_direction == 2) {
            this->counter_09_phase = !(bool)(this->counter_09_phase);
            this->counter_09_count = this->counter_09_maximum;
            this->counter_09_inc();
        } else
            this->counter_09_count = this->counter_09_minimum;

        if ((bool)(!(bool)(this->counter_09_overflow_number))) {
            if (this->counter_09_carryflag == 1)
                this->counter_09_overflow_bang_bang();
            else
                this->counter_09_overflow_number_set(1);
        }

        this->counter_09_carry_set(this->counter_09_carry + 1);
    } else if ((bool)(this->counter_09_overflow_number) && this->counter_09_carryflag == 0)
        this->counter_09_overflow_number_set(0);

    if (this->counter_09_count < this->counter_09_minimum) {
        if (this->counter_09_direction == 2) {
            this->counter_09_phase = !(bool)(this->counter_09_phase);
            this->counter_09_count = this->counter_09_minimum;
            this->counter_09_inc();
        } else
            this->counter_09_count = this->counter_09_maximum;

        if ((bool)(!(bool)(this->counter_09_underflow_number))) {
            if (this->counter_09_carryflag == 1)
                this->counter_09_underflow_bang_bang();
            else
                this->counter_09_underflow_number_set(1);
        }

        this->counter_09_carry_set(this->counter_09_carry + 1);
    } else if ((bool)(this->counter_09_underflow_number) && this->counter_09_carryflag == 0)
        this->counter_09_underflow_number_set(0);
}

void param_33_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_33_value;
}

void param_33_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_33_value_set(preset["value"]);
}

number limi_01_dc1_next(number x, number gain) {
    number y = x - this->limi_01_dc1_xm1 + this->limi_01_dc1_ym1 * gain;
    this->limi_01_dc1_xm1 = x;
    this->limi_01_dc1_ym1 = y;
    return y;
}

void limi_01_dc1_reset() {
    this->limi_01_dc1_xm1 = 0;
    this->limi_01_dc1_ym1 = 0;
}

void limi_01_dc1_dspsetup() {
    this->limi_01_dc1_reset();
}

number limi_01_dc_next(Index i, number x, number gain) {
    switch ((int)i) {
    default:
        return this->limi_01_dc1_next(x, gain);
    }

    return 0;
}

void limi_01_dc_reset(Index i) {
    switch ((int)i) {
    default:
        return this->limi_01_dc1_reset();
    }
}

void limi_01_dc_dspsetup(Index i) {
    switch ((int)i) {
    default:
        return this->limi_01_dc1_dspsetup();
    }
}

void limi_01_reset() {
    this->limi_01_recover = (number)1000 / (this->limi_01_release * this->samplerate());

    {
        this->limi_01_recover *= 0.707;
    }
}

void limi_01_dspsetup(bool force) {
    if ((bool)(this->limi_01_setupDone) && (bool)(!(bool)(force)))
        return;

    this->limi_01_reset();
    this->limi_01_setupDone = true;
    this->limi_01_dc1_dspsetup();
}

void param_34_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_34_value;
}

void param_34_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_34_value_set(preset["value"]);
}

void param_35_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_35_value;
}

void param_35_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_35_value_set(preset["value"]);
}

void param_36_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_36_value;
}

void param_36_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_36_value_set(preset["value"]);
}

void param_37_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_37_value;
}

void param_37_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_37_value_set(preset["value"]);
}

void param_38_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_38_value;
}

void param_38_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_38_value_set(preset["value"]);
}

void param_39_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_39_value;
}

void param_39_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_39_value_set(preset["value"]);
}

number groove_01_getSample(
    Index channel,
    SampleIndex index,
    SampleIndex offset,
    SampleIndex bufferLength
) {
    if (offset > 0) {
        index += offset;

        if (index >= bufferLength)
            index -= bufferLength;
    }

    return this->groove_01_buffer->getSample(channel, index);
}

number groove_01_interpolatedSample(
    Index channel,
    number index,
    SampleIndex end,
    SampleIndex length,
    SampleIndex offset,
    SampleIndex bufferLength
) {
    SampleIndex index1 = (SampleIndex)(rnbo_trunc(index));
    number i_x = index - index1;
    number i_1px = 1. + i_x;
    number i_1mx = 1. - i_x;
    number i_2mx = 2. - i_x;
    number i_a = i_1mx * i_2mx;
    number i_b = i_1px * i_x;
    number i_p1 = -.1666667 * i_a * i_x;
    number i_p2 = .5 * i_1px * i_a;
    number i_p3 = .5 * i_b * i_2mx;
    number i_p4 = -.1666667 * i_b * i_1mx;
    SampleIndex index2 = (SampleIndex)(index1 + 1);

    if (index2 >= end)
        index2 -= length;

    SampleIndex index3 = (SampleIndex)(index1 + 2);

    if (index3 >= end)
        index3 -= length;

    SampleIndex index4 = (SampleIndex)(index1 + 3);

    if (index4 >= end)
        index4 -= length;

    return this->groove_01_getSample(channel, index1, offset, bufferLength) * i_p1 + this->groove_01_getSample(channel, index2, offset, bufferLength) * i_p2 + this->groove_01_getSample(channel, index3, offset, bufferLength) * i_p3 + this->groove_01_getSample(channel, index4, offset, bufferLength) * i_p4;
}

number groove_01_crossfadedSample(
    SampleValue out,
    number readIndex,
    Index channel,
    number rate,
    number loopMin,
    number loopMax,
    number loopLength,
    number offset,
    number bufferLength
) {
    number crossFadeStart1 = this->maximum(loopMin - this->groove_01_crossfadeInSamples, 0);
    number crossFadeEnd1 = this->minimum(crossFadeStart1 + this->groove_01_crossfadeInSamples, bufferLength);
    number crossFadeStart2 = crossFadeStart1 + loopLength;
    number crossFadeEnd2 = this->minimum(crossFadeEnd1 + loopLength, bufferLength);
    number crossFadeLength = crossFadeEnd2 - crossFadeStart2;

    if (crossFadeLength > 0) {
        crossFadeEnd1 = crossFadeStart1 + crossFadeLength;
        number diff = -1;
        number addFactor = 0;

        if (readIndex >= crossFadeStart2) {
            diff = readIndex - crossFadeStart2;
            addFactor = -1;
        } else if (readIndex < crossFadeEnd1) {
            diff = crossFadeEnd1 - readIndex + loopMax - crossFadeStart2;
            addFactor = 1;
        }

        if (diff >= 0) {
            number out2ReadIndex = readIndex + loopLength * addFactor;
            number out2 = (rate == 1 ? this->groove_01_getSample(channel, rnbo_trunc(out2ReadIndex), offset, bufferLength) : this->groove_01_interpolatedSample(channel, out2ReadIndex, loopMax, loopLength, offset, bufferLength));
            number out2Factor = diff / crossFadeLength;
            number out1Factor = 1 - out2Factor;
            return out * out1Factor + out2 * out2Factor;
        }
    }

    return out;
}

void groove_01_dspsetup(bool force) {
    if ((bool)(this->groove_01_setupDone) && (bool)(!(bool)(force)))
        return;

    this->groove_01_crossfadeInSamples = this->mstosamps(this->groove_01_crossfade);
    this->groove_01_setupDone = true;
}

number groove_02_getSample(
    Index channel,
    SampleIndex index,
    SampleIndex offset,
    SampleIndex bufferLength
) {
    if (offset > 0) {
        index += offset;

        if (index >= bufferLength)
            index -= bufferLength;
    }

    return this->groove_02_buffer->getSample(channel, index);
}

number groove_02_interpolatedSample(
    Index channel,
    number index,
    SampleIndex end,
    SampleIndex length,
    SampleIndex offset,
    SampleIndex bufferLength
) {
    SampleIndex index1 = (SampleIndex)(rnbo_trunc(index));
    number i_x = index - index1;
    number i_1px = 1. + i_x;
    number i_1mx = 1. - i_x;
    number i_2mx = 2. - i_x;
    number i_a = i_1mx * i_2mx;
    number i_b = i_1px * i_x;
    number i_p1 = -.1666667 * i_a * i_x;
    number i_p2 = .5 * i_1px * i_a;
    number i_p3 = .5 * i_b * i_2mx;
    number i_p4 = -.1666667 * i_b * i_1mx;
    SampleIndex index2 = (SampleIndex)(index1 + 1);

    if (index2 >= end)
        index2 -= length;

    SampleIndex index3 = (SampleIndex)(index1 + 2);

    if (index3 >= end)
        index3 -= length;

    SampleIndex index4 = (SampleIndex)(index1 + 3);

    if (index4 >= end)
        index4 -= length;

    return this->groove_02_getSample(channel, index1, offset, bufferLength) * i_p1 + this->groove_02_getSample(channel, index2, offset, bufferLength) * i_p2 + this->groove_02_getSample(channel, index3, offset, bufferLength) * i_p3 + this->groove_02_getSample(channel, index4, offset, bufferLength) * i_p4;
}

number groove_02_crossfadedSample(
    SampleValue out,
    number readIndex,
    Index channel,
    number rate,
    number loopMin,
    number loopMax,
    number loopLength,
    number offset,
    number bufferLength
) {
    number crossFadeStart1 = this->maximum(loopMin - this->groove_02_crossfadeInSamples, 0);
    number crossFadeEnd1 = this->minimum(crossFadeStart1 + this->groove_02_crossfadeInSamples, bufferLength);
    number crossFadeStart2 = crossFadeStart1 + loopLength;
    number crossFadeEnd2 = this->minimum(crossFadeEnd1 + loopLength, bufferLength);
    number crossFadeLength = crossFadeEnd2 - crossFadeStart2;

    if (crossFadeLength > 0) {
        crossFadeEnd1 = crossFadeStart1 + crossFadeLength;
        number diff = -1;
        number addFactor = 0;

        if (readIndex >= crossFadeStart2) {
            diff = readIndex - crossFadeStart2;
            addFactor = -1;
        } else if (readIndex < crossFadeEnd1) {
            diff = crossFadeEnd1 - readIndex + loopMax - crossFadeStart2;
            addFactor = 1;
        }

        if (diff >= 0) {
            number out2ReadIndex = readIndex + loopLength * addFactor;
            number out2 = (rate == 1 ? this->groove_02_getSample(channel, rnbo_trunc(out2ReadIndex), offset, bufferLength) : this->groove_02_interpolatedSample(channel, out2ReadIndex, loopMax, loopLength, offset, bufferLength));
            number out2Factor = diff / crossFadeLength;
            number out1Factor = 1 - out2Factor;
            return out * out1Factor + out2 * out2Factor;
        }
    }

    return out;
}

void groove_02_dspsetup(bool force) {
    if ((bool)(this->groove_02_setupDone) && (bool)(!(bool)(force)))
        return;

    this->groove_02_crossfadeInSamples = this->mstosamps(this->groove_02_crossfade);
    this->groove_02_setupDone = true;
}

number groove_03_getSample(
    Index channel,
    SampleIndex index,
    SampleIndex offset,
    SampleIndex bufferLength
) {
    if (offset > 0) {
        index += offset;

        if (index >= bufferLength)
            index -= bufferLength;
    }

    return this->groove_03_buffer->getSample(channel, index);
}

number groove_03_interpolatedSample(
    Index channel,
    number index,
    SampleIndex end,
    SampleIndex length,
    SampleIndex offset,
    SampleIndex bufferLength
) {
    SampleIndex index1 = (SampleIndex)(rnbo_trunc(index));
    number i_x = index - index1;
    number i_1px = 1. + i_x;
    number i_1mx = 1. - i_x;
    number i_2mx = 2. - i_x;
    number i_a = i_1mx * i_2mx;
    number i_b = i_1px * i_x;
    number i_p1 = -.1666667 * i_a * i_x;
    number i_p2 = .5 * i_1px * i_a;
    number i_p3 = .5 * i_b * i_2mx;
    number i_p4 = -.1666667 * i_b * i_1mx;
    SampleIndex index2 = (SampleIndex)(index1 + 1);

    if (index2 >= end)
        index2 -= length;

    SampleIndex index3 = (SampleIndex)(index1 + 2);

    if (index3 >= end)
        index3 -= length;

    SampleIndex index4 = (SampleIndex)(index1 + 3);

    if (index4 >= end)
        index4 -= length;

    return this->groove_03_getSample(channel, index1, offset, bufferLength) * i_p1 + this->groove_03_getSample(channel, index2, offset, bufferLength) * i_p2 + this->groove_03_getSample(channel, index3, offset, bufferLength) * i_p3 + this->groove_03_getSample(channel, index4, offset, bufferLength) * i_p4;
}

number groove_03_crossfadedSample(
    SampleValue out,
    number readIndex,
    Index channel,
    number rate,
    number loopMin,
    number loopMax,
    number loopLength,
    number offset,
    number bufferLength
) {
    number crossFadeStart1 = this->maximum(loopMin - this->groove_03_crossfadeInSamples, 0);
    number crossFadeEnd1 = this->minimum(crossFadeStart1 + this->groove_03_crossfadeInSamples, bufferLength);
    number crossFadeStart2 = crossFadeStart1 + loopLength;
    number crossFadeEnd2 = this->minimum(crossFadeEnd1 + loopLength, bufferLength);
    number crossFadeLength = crossFadeEnd2 - crossFadeStart2;

    if (crossFadeLength > 0) {
        crossFadeEnd1 = crossFadeStart1 + crossFadeLength;
        number diff = -1;
        number addFactor = 0;

        if (readIndex >= crossFadeStart2) {
            diff = readIndex - crossFadeStart2;
            addFactor = -1;
        } else if (readIndex < crossFadeEnd1) {
            diff = crossFadeEnd1 - readIndex + loopMax - crossFadeStart2;
            addFactor = 1;
        }

        if (diff >= 0) {
            number out2ReadIndex = readIndex + loopLength * addFactor;
            number out2 = (rate == 1 ? this->groove_03_getSample(channel, rnbo_trunc(out2ReadIndex), offset, bufferLength) : this->groove_03_interpolatedSample(channel, out2ReadIndex, loopMax, loopLength, offset, bufferLength));
            number out2Factor = diff / crossFadeLength;
            number out1Factor = 1 - out2Factor;
            return out * out1Factor + out2 * out2Factor;
        }
    }

    return out;
}

void groove_03_dspsetup(bool force) {
    if ((bool)(this->groove_03_setupDone) && (bool)(!(bool)(force)))
        return;

    this->groove_03_crossfadeInSamples = this->mstosamps(this->groove_03_crossfade);
    this->groove_03_setupDone = true;
}

number groove_04_getSample(
    Index channel,
    SampleIndex index,
    SampleIndex offset,
    SampleIndex bufferLength
) {
    if (offset > 0) {
        index += offset;

        if (index >= bufferLength)
            index -= bufferLength;
    }

    return this->groove_04_buffer->getSample(channel, index);
}

number groove_04_interpolatedSample(
    Index channel,
    number index,
    SampleIndex end,
    SampleIndex length,
    SampleIndex offset,
    SampleIndex bufferLength
) {
    SampleIndex index1 = (SampleIndex)(rnbo_trunc(index));
    number i_x = index - index1;
    number i_1px = 1. + i_x;
    number i_1mx = 1. - i_x;
    number i_2mx = 2. - i_x;
    number i_a = i_1mx * i_2mx;
    number i_b = i_1px * i_x;
    number i_p1 = -.1666667 * i_a * i_x;
    number i_p2 = .5 * i_1px * i_a;
    number i_p3 = .5 * i_b * i_2mx;
    number i_p4 = -.1666667 * i_b * i_1mx;
    SampleIndex index2 = (SampleIndex)(index1 + 1);

    if (index2 >= end)
        index2 -= length;

    SampleIndex index3 = (SampleIndex)(index1 + 2);

    if (index3 >= end)
        index3 -= length;

    SampleIndex index4 = (SampleIndex)(index1 + 3);

    if (index4 >= end)
        index4 -= length;

    return this->groove_04_getSample(channel, index1, offset, bufferLength) * i_p1 + this->groove_04_getSample(channel, index2, offset, bufferLength) * i_p2 + this->groove_04_getSample(channel, index3, offset, bufferLength) * i_p3 + this->groove_04_getSample(channel, index4, offset, bufferLength) * i_p4;
}

number groove_04_crossfadedSample(
    SampleValue out,
    number readIndex,
    Index channel,
    number rate,
    number loopMin,
    number loopMax,
    number loopLength,
    number offset,
    number bufferLength
) {
    number crossFadeStart1 = this->maximum(loopMin - this->groove_04_crossfadeInSamples, 0);
    number crossFadeEnd1 = this->minimum(crossFadeStart1 + this->groove_04_crossfadeInSamples, bufferLength);
    number crossFadeStart2 = crossFadeStart1 + loopLength;
    number crossFadeEnd2 = this->minimum(crossFadeEnd1 + loopLength, bufferLength);
    number crossFadeLength = crossFadeEnd2 - crossFadeStart2;

    if (crossFadeLength > 0) {
        crossFadeEnd1 = crossFadeStart1 + crossFadeLength;
        number diff = -1;
        number addFactor = 0;

        if (readIndex >= crossFadeStart2) {
            diff = readIndex - crossFadeStart2;
            addFactor = -1;
        } else if (readIndex < crossFadeEnd1) {
            diff = crossFadeEnd1 - readIndex + loopMax - crossFadeStart2;
            addFactor = 1;
        }

        if (diff >= 0) {
            number out2ReadIndex = readIndex + loopLength * addFactor;
            number out2 = (rate == 1 ? this->groove_04_getSample(channel, rnbo_trunc(out2ReadIndex), offset, bufferLength) : this->groove_04_interpolatedSample(channel, out2ReadIndex, loopMax, loopLength, offset, bufferLength));
            number out2Factor = diff / crossFadeLength;
            number out1Factor = 1 - out2Factor;
            return out * out1Factor + out2 * out2Factor;
        }
    }

    return out;
}

void groove_04_dspsetup(bool force) {
    if ((bool)(this->groove_04_setupDone) && (bool)(!(bool)(force)))
        return;

    this->groove_04_crossfadeInSamples = this->mstosamps(this->groove_04_crossfade);
    this->groove_04_setupDone = true;
}

number globaltransport_getTempoAtSample(SampleIndex sampleOffset) {
    RNBO_UNUSED(sampleOffset);
    return (this->vs > 0 ? this->globaltransport_tempo[(Index)sampleOffset] : this->globaltransport_lastTempo);
}

number globaltransport_getTempo() {
    return this->globaltransport_getTempoAtSample(this->sampleOffsetIntoNextAudioBuffer);
}

number globaltransport_getStateAtSample(SampleIndex sampleOffset) {
    RNBO_UNUSED(sampleOffset);
    return (this->vs > 0 ? this->globaltransport_state[(Index)sampleOffset] : this->globaltransport_lastState);
}

number globaltransport_getState() {
    return this->globaltransport_getStateAtSample(this->sampleOffsetIntoNextAudioBuffer);
}

number globaltransport_getBeatTimeAtMsTime(MillisecondTime time) {
    number i = 2;

    while (i < this->globaltransport_beatTimeChanges->length && this->globaltransport_beatTimeChanges[(Index)(i + 1)] <= time) {
        i += 2;
    }

    i -= 2;
    number beatTimeBase = this->globaltransport_beatTimeChanges[(Index)i];

    if (this->globaltransport_getState() == 0)
        return beatTimeBase;

    number beatTimeBaseMsTime = this->globaltransport_beatTimeChanges[(Index)(i + 1)];
    number diff = time - beatTimeBaseMsTime;
    return beatTimeBase + this->mstobeats(diff);
}

bool globaltransport_setTempo(number tempo, bool notify) {
    if ((bool)(notify)) {
        this->processTempoEvent(this->currenttime(), tempo);
        this->globaltransport_notify = true;
    } else if (this->globaltransport_getTempo() != tempo) {
        MillisecondTime ct = this->currenttime();
        this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTimeAtMsTime(ct));
        this->globaltransport_beatTimeChanges->push(ct);

        fillSignal(
            this->globaltransport_tempo,
            this->vs,
            tempo,
            (Index)(this->sampleOffsetIntoNextAudioBuffer)
        );

        this->globaltransport_lastTempo = tempo;
        this->globaltransport_tempoNeedsReset = true;
        return true;
    }

    return false;
}

number globaltransport_getBeatTime() {
    return this->globaltransport_getBeatTimeAtMsTime(this->currenttime());
}

bool globaltransport_setState(number state, bool notify) {
    if ((bool)(notify)) {
        this->processTransportEvent(this->currenttime(), TransportState(state));
        this->globaltransport_notify = true;
    } else if (this->globaltransport_getState() != state) {
        fillSignal(
            this->globaltransport_state,
            this->vs,
            state,
            (Index)(this->sampleOffsetIntoNextAudioBuffer)
        );

        this->globaltransport_lastState = TransportState(state);
        this->globaltransport_stateNeedsReset = true;

        if (state == 0) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime());
            this->globaltransport_beatTimeChanges->push(this->currenttime());
        }

        return true;
    }

    return false;
}

bool globaltransport_setBeatTime(number beattime, bool notify) {
    if ((bool)(notify)) {
        this->processBeatTimeEvent(this->currenttime(), beattime);
        this->globaltransport_notify = true;
        return false;
    } else {
        bool beatTimeHasChanged = false;
        float oldBeatTime = (float)(this->globaltransport_getBeatTime());
        float newBeatTime = (float)(beattime);

        if (oldBeatTime != newBeatTime) {
            beatTimeHasChanged = true;
        }

        this->globaltransport_beatTimeChanges->push(beattime);
        this->globaltransport_beatTimeChanges->push(this->currenttime());
        return beatTimeHasChanged;
    }
}

number globaltransport_getBeatTimeAtSample(SampleIndex sampleOffset) {
    MillisecondTime msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBeatTimeAtMsTime(this->currenttime() + msOffset);
}

array<number, 2> globaltransport_getTimeSignatureAtMsTime(MillisecondTime time) {
    number i = 3;

    while (i < this->globaltransport_timeSignatureChanges->length && this->globaltransport_timeSignatureChanges[(Index)(i + 2)] <= time) {
        i += 3;
    }

    i -= 3;

    return {
        this->globaltransport_timeSignatureChanges[(Index)i],
        this->globaltransport_timeSignatureChanges[(Index)(i + 1)]
    };
}

array<number, 2> globaltransport_getTimeSignature() {
    return this->globaltransport_getTimeSignatureAtMsTime(this->currenttime());
}

array<number, 2> globaltransport_getTimeSignatureAtSample(SampleIndex sampleOffset) {
    MillisecondTime msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getTimeSignatureAtMsTime(this->currenttime() + msOffset);
}

bool globaltransport_setTimeSignature(number numerator, number denominator, bool notify) {
    if ((bool)(notify)) {
        this->processTimeSignatureEvent(this->currenttime(), (int)(numerator), (int)(denominator));
        this->globaltransport_notify = true;
    } else {
        array<number, 2> currentSig = this->globaltransport_getTimeSignature();

        if (currentSig[0] != numerator || currentSig[1] != denominator) {
            this->globaltransport_timeSignatureChanges->push(numerator);
            this->globaltransport_timeSignatureChanges->push(denominator);
            this->globaltransport_timeSignatureChanges->push(this->currenttime());
            return true;
        }
    }

    return false;
}

void globaltransport_advance() {
    if ((bool)(this->globaltransport_tempoNeedsReset)) {
        fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
        this->globaltransport_tempoNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTempoEvent(this->globaltransport_lastTempo);
        }
    }

    if ((bool)(this->globaltransport_stateNeedsReset)) {
        fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
        this->globaltransport_stateNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTransportEvent(TransportState(this->globaltransport_lastState));
        }
    }

    if (this->globaltransport_beatTimeChanges->length > 2) {
        this->globaltransport_beatTimeChanges[0] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 2)];
        this->globaltransport_beatTimeChanges[1] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 1)];
        this->globaltransport_beatTimeChanges->length = 2;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendBeatTimeEvent(this->globaltransport_beatTimeChanges[0]);
        }
    }

    if (this->globaltransport_timeSignatureChanges->length > 3) {
        this->globaltransport_timeSignatureChanges[0] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 3)];
        this->globaltransport_timeSignatureChanges[1] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 2)];
        this->globaltransport_timeSignatureChanges[2] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 1)];
        this->globaltransport_timeSignatureChanges->length = 3;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTimeSignatureEvent(
                (int)(this->globaltransport_timeSignatureChanges[0]),
                (int)(this->globaltransport_timeSignatureChanges[1])
            );
        }
    }

    this->globaltransport_notify = false;
}

void globaltransport_dspsetup(bool force) {
    if ((bool)(this->globaltransport_setupDone) && (bool)(!(bool)(force)))
        return;

    fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
    this->globaltransport_tempoNeedsReset = false;
    fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
    this->globaltransport_stateNeedsReset = false;
    this->globaltransport_setupDone = true;
}

bool stackprotect_check() {
    this->stackprotect_count++;

    if (this->stackprotect_count > 128) {
        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
        return true;
    }

    return false;
}

void updateTime(MillisecondTime time) {
    this->_currentTime = time;
    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));

    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;

    if (this->sampleOffsetIntoNextAudioBuffer < 0)
        this->sampleOffsetIntoNextAudioBuffer = 0;
}

void assign_defaults()
{
    send_65_input_number = 0;
    param_13_value = 0;
    send_66_input_number = 0;
    param_14_value = 0.01;
    send_67_input_number = 0;
    send_68_input_number = 0;
    param_15_value = 0;
    param_16_value = 0;
    dspexpr_69_in1 = 0;
    dspexpr_69_in2 = 1;
    patcher_01_target = 0;
    receive_37_output_number = 0;
    send_69_input_number = 0;
    send_70_input_number = 0;
    param_17_value = 0;
    route_70_selector1 = 0;
    counter_05_carryflag = 0;
    counter_05_direction = 0;
    counter_05_resetnext = 0;
    counter_05_resetnow = 0;
    counter_05_maximum = 16;
    counter_05_output = 0;
    counter_05_underflow_number = 0;
    counter_05_overflow_number = 0;
    counter_05_carry = 0;
    counter_05_minimum = 1;
    param_18_value = 0;
    counter_06_carryflag = 0;
    counter_06_direction = 0;
    counter_06_resetnext = 0;
    counter_06_resetnow = 0;
    counter_06_maximum = 1;
    counter_06_output = 0;
    counter_06_underflow_number = 0;
    counter_06_overflow_number = 0;
    counter_06_carry = 0;
    counter_06_minimum = 0;
    send_71_input_number = 0;
    send_72_input_number = 0;
    send_73_input_number = 0;
    param_19_value = 0;
    param_20_value = 0;
    send_74_input_number = 0;
    route_71_selector1 = 0;
    expr_251_in1 = 0;
    expr_251_in2 = 1;
    expr_251_out1 = 0;
    receive_38_output_number = 0;
    receive_39_output_number = 0;
    receive_40_output_number = 0;
    send_75_input_number = 0;
    metro_01_on = 0;
    metro_01_interval = 500;
    metro_01_interval_setter(metro_01_interval);
    loadmess_10_message = { 50 };
    send_76_input_number = 0;
    send_77_input_number = 0;
    param_21_value = 0;
    param_22_value = 0;
    send_78_input_number = 0;
    send_79_input_number = 0;
    send_80_input_number = 0;
    send_81_input_number = 0;
    gate_25_onoff = 0;
    gate_25_out1_number = 0;
    gate_25_out2_number = 0;
    gate_25_out3_number = 0;
    gate_25_out4_number = 0;
    expr_252_in1 = 0;
    expr_252_out1 = 0;
    counter_07_carryflag = 0;
    counter_07_direction = 0;
    counter_07_resetnext = 0;
    counter_07_resetnow = 0;
    counter_07_maximum = 16;
    counter_07_output = 0;
    counter_07_underflow_number = 0;
    counter_07_overflow_number = 0;
    counter_07_carry = 0;
    counter_07_minimum = 1;
    param_23_value = 110;
    select_01_test1 = 1;
    counter_08_carryflag = 0;
    counter_08_direction = 0;
    counter_08_resetnext = 0;
    counter_08_resetnow = 0;
    counter_08_maximum = 4;
    counter_08_output = 0;
    counter_08_underflow_number = 0;
    counter_08_overflow_number = 0;
    counter_08_carry = 0;
    counter_08_minimum = 1;
    send_82_input_number = 0;
    send_83_input_number = 0;
    param_24_value = 0;
    param_25_value = 0;
    loadmess_11_message = { 30 };
    expr_253_in1 = 0;
    expr_253_in2 = 1;
    expr_253_out1 = 0;
    receive_41_output_number = 0;
    param_26_value = 4;
    send_84_input_number = 0;
    expr_254_in1 = 0;
    expr_254_in2 = 12;
    expr_254_out1 = 0;
    send_85_input_number = 0;
    param_27_value = 50;
    numberobj_47_value = 0;
    numberobj_47_value_setter(numberobj_47_value);
    send_86_input_number = 0;
    send_87_input_number = 0;
    param_28_value = 0;
    param_29_value = 0;
    loadmess_12_message = { 1 };
    toggle_01_value = 1;
    metro_02_on = 0;
    metro_02_interval = 90;
    metro_02_interval_setter(metro_02_interval);
    p_27_target = 0;
    param_30_value = 0;
    receive_42_output_number = 0;
    listsort_01_order = 1;
    send_88_input_number = 0;
    send_89_input_number = 0;
    param_31_value = 0;
    param_32_value = 0;
    expr_255_in1 = 0;
    expr_255_in2 = 1;
    expr_255_out1 = 0;
    counter_09_carryflag = 0;
    counter_09_direction = 0;
    counter_09_resetnext = 0;
    counter_09_resetnow = 0;
    counter_09_maximum = 3;
    counter_09_output = 0;
    counter_09_underflow_number = 0;
    counter_09_overflow_number = 0;
    counter_09_carry = 0;
    counter_09_minimum = 0;
    expr_256_in1 = 0;
    expr_256_in2 = 1;
    expr_256_out1 = 0;
    receive_43_output_number = 0;
    p_28_target = 0;
    param_33_value = 0;
    limi_01_bypass = 0;
    limi_01_dcblock = 0;
    limi_01_lookahead = 100;
    limi_01_lookahead_setter(limi_01_lookahead);
    limi_01_preamp = 0;
    limi_01_preamp_setter(limi_01_preamp);
    limi_01_postamp = 0;
    limi_01_postamp_setter(limi_01_postamp);
    limi_01_threshold = 0;
    limi_01_threshold_setter(limi_01_threshold);
    limi_01_release = 1000;
    p_29_target = 0;
    p_30_target = 0;
    send_90_input_number = 0;
    send_91_input_number = 0;
    param_34_value = 0;
    param_35_value = 0;
    receive_44_output_number = 0;
    gate_26_onoff = 0;
    gate_26_out1_number = 0;
    gate_26_out2_number = 0;
    receive_45_output_number = 0;
    send_92_input_number = 0;
    send_93_input_number = 0;
    param_36_value = 0;
    param_37_value = 0;
    p_31_target = 0;
    param_38_value = 0;
    receive_46_output_number = 0;
    p_32_target = 0;
    param_39_value = 0;
    receive_47_output_number = 0;
    groove_01_rate_auto = 1;
    groove_01_begin = 0;
    groove_01_end = -1;
    groove_01_loop = 0;
    groove_01_crossfade = 0;
    groove_02_rate_auto = 1;
    groove_02_begin = 0;
    groove_02_end = -1;
    groove_02_loop = 0;
    groove_02_crossfade = 0;
    groove_03_rate_auto = 1;
    groove_03_begin = 0;
    groove_03_end = -1;
    groove_03_loop = 0;
    groove_03_crossfade = 0;
    groove_04_rate_auto = 1;
    groove_04_begin = 0;
    groove_04_end = -1;
    groove_04_loop = 0;
    groove_04_crossfade = 0;
    p_33_target = 0;
    p_34_target = 0;
    receive_48_output_number = 0;
    expr_257_in1 = 0;
    expr_257_in2 = 0;
    expr_257_out1 = 0;
    route_72_selector1 = 0;
    receive_49_output_number = 0;
    _currentTime = 0;
    audioProcessSampleCount = 0;
    sampleOffsetIntoNextAudioBuffer = 0;
    zeroBuffer = nullptr;
    dummyBuffer = nullptr;
    signals[0] = nullptr;
    signals[1] = nullptr;
    signals[2] = nullptr;
    signals[3] = nullptr;
    signals[4] = nullptr;
    signals[5] = nullptr;
    signals[6] = nullptr;
    signals[7] = nullptr;
    signals[8] = nullptr;
    signals[9] = nullptr;
    signals[10] = nullptr;
    didAllocateSignals = 0;
    vs = 0;
    maxvs = 0;
    sr = 44100;
    invsr = 0.00002267573696;
    param_13_lastValue = 0;
    param_14_lastValue = 0;
    param_15_lastValue = 0;
    param_16_lastValue = 0;
    param_17_lastValue = 0;
    counter_05_count = 1;
    counter_05_phase = true;
    param_18_lastValue = 0;
    counter_06_count = 0;
    counter_06_phase = true;
    param_19_lastValue = 0;
    param_20_lastValue = 0;
    param_21_lastValue = 0;
    param_22_lastValue = 0;
    counter_07_count = 1;
    counter_07_phase = true;
    param_23_lastValue = 0;
    counter_08_count = 1;
    counter_08_phase = true;
    param_24_lastValue = 0;
    param_25_lastValue = 0;
    param_26_lastValue = 0;
    param_27_lastValue = 0;
    numberobj_47_currentFormat = 6;
    numberobj_47_lastValue = 0;
    param_28_lastValue = 0;
    param_29_lastValue = 0;
    param_30_lastValue = 0;
    param_31_lastValue = 0;
    param_32_lastValue = 0;
    counter_09_count = 0;
    counter_09_phase = true;
    param_33_lastValue = 0;
    limi_01_last = 0;
    limi_01_lookaheadIndex = 0;
    limi_01_recover = 0;
    limi_01_lookaheadInv = 0;
    limi_01_dc1_xm1 = 0;
    limi_01_dc1_ym1 = 0;
    limi_01_setupDone = false;
    param_34_lastValue = 0;
    param_35_lastValue = 0;
    param_36_lastValue = 0;
    param_37_lastValue = 0;
    param_38_lastValue = 0;
    param_39_lastValue = 0;
    groove_01_readIndex = 0;
    groove_01_playStatus = 0;
    groove_01_changeIncomingInSamples = 0;
    groove_01_incomingChange = 2;
    groove_01_crossfadeInSamples = 0;
    groove_01_setupDone = false;
    groove_02_readIndex = 0;
    groove_02_playStatus = 0;
    groove_02_changeIncomingInSamples = 0;
    groove_02_incomingChange = 2;
    groove_02_crossfadeInSamples = 0;
    groove_02_setupDone = false;
    groove_03_readIndex = 0;
    groove_03_playStatus = 0;
    groove_03_changeIncomingInSamples = 0;
    groove_03_incomingChange = 2;
    groove_03_crossfadeInSamples = 0;
    groove_03_setupDone = false;
    groove_04_readIndex = 0;
    groove_04_playStatus = 0;
    groove_04_changeIncomingInSamples = 0;
    groove_04_incomingChange = 2;
    groove_04_crossfadeInSamples = 0;
    groove_04_setupDone = false;
    globaltransport_tempo = nullptr;
    globaltransport_tempoNeedsReset = false;
    globaltransport_lastTempo = 120;
    globaltransport_state = nullptr;
    globaltransport_stateNeedsReset = false;
    globaltransport_lastState = 0;
    globaltransport_beatTimeChanges = { 0, 0 };
    globaltransport_timeSignatureChanges = { 4, 4, 0 };
    globaltransport_notify = false;
    globaltransport_setupDone = false;
    stackprotect_count = 0;
    _voiceIndex = 0;
    _noteNumber = 0;
    isMuted = 1;
}

// member variables

    number send_65_input_number;
    list send_65_input_list;
    number param_13_value;
    number send_66_input_number;
    list send_66_input_list;
    number param_14_value;
    number send_67_input_number;
    list send_67_input_list;
    number send_68_input_number;
    list send_68_input_list;
    number param_15_value;
    number param_16_value;
    number dspexpr_69_in1;
    number dspexpr_69_in2;
    number patcher_01_target;
    number receive_37_output_number;
    list receive_37_output_list;
    number send_69_input_number;
    list send_69_input_list;
    number send_70_input_number;
    list send_70_input_list;
    number param_17_value;
    number route_70_selector1;
    Int counter_05_carryflag;
    number counter_05_direction;
    number counter_05_resetnext;
    number counter_05_resetnow;
    number counter_05_maximum;
    number counter_05_output;
    number counter_05_underflow_number;
    number counter_05_overflow_number;
    number counter_05_carry;
    number counter_05_minimum;
    number param_18_value;
    Int counter_06_carryflag;
    number counter_06_direction;
    number counter_06_resetnext;
    number counter_06_resetnow;
    number counter_06_maximum;
    number counter_06_output;
    number counter_06_underflow_number;
    number counter_06_overflow_number;
    number counter_06_carry;
    number counter_06_minimum;
    number send_71_input_number;
    list send_71_input_list;
    number send_72_input_number;
    list send_72_input_list;
    number send_73_input_number;
    list send_73_input_list;
    number param_19_value;
    number param_20_value;
    number send_74_input_number;
    list send_74_input_list;
    number route_71_selector1;
    number expr_251_in1;
    number expr_251_in2;
    number expr_251_out1;
    number receive_38_output_number;
    list receive_38_output_list;
    number receive_39_output_number;
    list receive_39_output_list;
    number receive_40_output_number;
    list receive_40_output_list;
    number send_75_input_number;
    list send_75_input_list;
    number metro_01_on;
    number metro_01_interval;
    list loadmess_10_message;
    number send_76_input_number;
    list send_76_input_list;
    number send_77_input_number;
    list send_77_input_list;
    number param_21_value;
    number param_22_value;
    number send_78_input_number;
    list send_78_input_list;
    number send_79_input_number;
    list send_79_input_list;
    number send_80_input_number;
    list send_80_input_list;
    number send_81_input_number;
    list send_81_input_list;
    number gate_25_onoff;
    number gate_25_out1_number;
    list gate_25_out1_list;
    number gate_25_out2_number;
    list gate_25_out2_list;
    number gate_25_out3_number;
    list gate_25_out3_list;
    number gate_25_out4_number;
    list gate_25_out4_list;
    number expr_252_in1;
    number expr_252_out1;
    Int counter_07_carryflag;
    number counter_07_direction;
    number counter_07_resetnext;
    number counter_07_resetnow;
    number counter_07_maximum;
    number counter_07_output;
    number counter_07_underflow_number;
    number counter_07_overflow_number;
    number counter_07_carry;
    number counter_07_minimum;
    number param_23_value;
    number select_01_test1;
    Int counter_08_carryflag;
    number counter_08_direction;
    number counter_08_resetnext;
    number counter_08_resetnow;
    number counter_08_maximum;
    number counter_08_output;
    number counter_08_underflow_number;
    number counter_08_overflow_number;
    number counter_08_carry;
    number counter_08_minimum;
    number send_82_input_number;
    list send_82_input_list;
    number send_83_input_number;
    list send_83_input_list;
    number param_24_value;
    number param_25_value;
    list loadmess_11_message;
    number expr_253_in1;
    number expr_253_in2;
    number expr_253_out1;
    number receive_41_output_number;
    list receive_41_output_list;
    number param_26_value;
    number send_84_input_number;
    list send_84_input_list;
    number expr_254_in1;
    number expr_254_in2;
    number expr_254_out1;
    number send_85_input_number;
    list send_85_input_list;
    number param_27_value;
    number numberobj_47_value;
    number send_86_input_number;
    list send_86_input_list;
    number send_87_input_number;
    list send_87_input_list;
    number param_28_value;
    number param_29_value;
    list loadmess_12_message;
    number toggle_01_value;
    number metro_02_on;
    number metro_02_interval;
    number p_27_target;
    number param_30_value;
    number receive_42_output_number;
    list receive_42_output_list;
    list listsort_01_input;
    number listsort_01_order;
    number send_88_input_number;
    list send_88_input_list;
    number send_89_input_number;
    list send_89_input_list;
    number param_31_value;
    number param_32_value;
    number expr_255_in1;
    number expr_255_in2;
    number expr_255_out1;
    Int counter_09_carryflag;
    number counter_09_direction;
    number counter_09_resetnext;
    number counter_09_resetnow;
    number counter_09_maximum;
    number counter_09_output;
    number counter_09_underflow_number;
    number counter_09_overflow_number;
    number counter_09_carry;
    number counter_09_minimum;
    number expr_256_in1;
    number expr_256_in2;
    number expr_256_out1;
    number receive_43_output_number;
    list receive_43_output_list;
    number p_28_target;
    number param_33_value;
    number limi_01_bypass;
    number limi_01_dcblock;
    number limi_01_lookahead;
    number limi_01_preamp;
    number limi_01_postamp;
    number limi_01_threshold;
    number limi_01_release;
    number p_29_target;
    number p_30_target;
    number send_90_input_number;
    list send_90_input_list;
    number send_91_input_number;
    list send_91_input_list;
    number param_34_value;
    number param_35_value;
    number receive_44_output_number;
    list receive_44_output_list;
    number gate_26_onoff;
    number gate_26_out1_number;
    list gate_26_out1_list;
    number gate_26_out2_number;
    list gate_26_out2_list;
    number receive_45_output_number;
    list receive_45_output_list;
    number send_92_input_number;
    list send_92_input_list;
    number send_93_input_number;
    list send_93_input_list;
    number param_36_value;
    number param_37_value;
    number p_31_target;
    number param_38_value;
    number receive_46_output_number;
    list receive_46_output_list;
    number p_32_target;
    number param_39_value;
    number receive_47_output_number;
    list receive_47_output_list;
    number groove_01_rate_auto;
    number groove_01_begin;
    number groove_01_end;
    number groove_01_loop;
    number groove_01_crossfade;
    number groove_02_rate_auto;
    number groove_02_begin;
    number groove_02_end;
    number groove_02_loop;
    number groove_02_crossfade;
    number groove_03_rate_auto;
    number groove_03_begin;
    number groove_03_end;
    number groove_03_loop;
    number groove_03_crossfade;
    number groove_04_rate_auto;
    number groove_04_begin;
    number groove_04_end;
    number groove_04_loop;
    number groove_04_crossfade;
    number p_33_target;
    number p_34_target;
    number receive_48_output_number;
    list receive_48_output_list;
    number expr_257_in1;
    number expr_257_in2;
    number expr_257_out1;
    number route_72_selector1;
    number receive_49_output_number;
    list receive_49_output_list;
    MillisecondTime _currentTime;
    SampleIndex audioProcessSampleCount;
    SampleIndex sampleOffsetIntoNextAudioBuffer;
    signal zeroBuffer;
    signal dummyBuffer;
    SampleValue * signals[11];
    bool didAllocateSignals;
    Index vs;
    Index maxvs;
    number sr;
    number invsr;
    number param_13_lastValue;
    number param_14_lastValue;
    number param_15_lastValue;
    number param_16_lastValue;
    number param_17_lastValue;
    number counter_05_count;
    bool counter_05_phase;
    number param_18_lastValue;
    number counter_06_count;
    bool counter_06_phase;
    number param_19_lastValue;
    number param_20_lastValue;
    number param_21_lastValue;
    number param_22_lastValue;
    number counter_07_count;
    bool counter_07_phase;
    number param_23_lastValue;
    number counter_08_count;
    bool counter_08_phase;
    number param_24_lastValue;
    number param_25_lastValue;
    number param_26_lastValue;
    number param_27_lastValue;
    Int numberobj_47_currentFormat;
    number numberobj_47_lastValue;
    number param_28_lastValue;
    number param_29_lastValue;
    number param_30_lastValue;
    list listqueue_01_queued;
    number param_31_lastValue;
    number param_32_lastValue;
    number counter_09_count;
    bool counter_09_phase;
    number param_33_lastValue;
    SampleValue limi_01_lookaheadBuffers[1][512] = { };
    SampleValue limi_01_gainBuffer[512] = { };
    number limi_01_last;
    int limi_01_lookaheadIndex;
    number limi_01_recover;
    number limi_01_lookaheadInv;
    number limi_01_dc1_xm1;
    number limi_01_dc1_ym1;
    bool limi_01_setupDone;
    number param_34_lastValue;
    number param_35_lastValue;
    number param_36_lastValue;
    number param_37_lastValue;
    number param_38_lastValue;
    number param_39_lastValue;
    Float32BufferRef groove_01_buffer;
    number groove_01_readIndex;
    Index groove_01_playStatus;
    SampleIndex groove_01_changeIncomingInSamples;
    Int groove_01_incomingChange;
    SampleIndex groove_01_crossfadeInSamples;
    bool groove_01_setupDone;
    Float32BufferRef groove_02_buffer;
    number groove_02_readIndex;
    Index groove_02_playStatus;
    SampleIndex groove_02_changeIncomingInSamples;
    Int groove_02_incomingChange;
    SampleIndex groove_02_crossfadeInSamples;
    bool groove_02_setupDone;
    Float32BufferRef groove_03_buffer;
    number groove_03_readIndex;
    Index groove_03_playStatus;
    SampleIndex groove_03_changeIncomingInSamples;
    Int groove_03_incomingChange;
    SampleIndex groove_03_crossfadeInSamples;
    bool groove_03_setupDone;
    Float32BufferRef groove_04_buffer;
    number groove_04_readIndex;
    Index groove_04_playStatus;
    SampleIndex groove_04_changeIncomingInSamples;
    Int groove_04_incomingChange;
    SampleIndex groove_04_crossfadeInSamples;
    bool groove_04_setupDone;
    signal globaltransport_tempo;
    bool globaltransport_tempoNeedsReset;
    number globaltransport_lastTempo;
    signal globaltransport_state;
    bool globaltransport_stateNeedsReset;
    number globaltransport_lastState;
    list globaltransport_beatTimeChanges;
    list globaltransport_timeSignatureChanges;
    bool globaltransport_notify;
    bool globaltransport_setupDone;
    number stackprotect_count;
    DataRef RNBODefaultMtofLookupTable256;
    DataRef perc;
    DataRef snare;
    DataRef kick;
    DataRef hat;
    Index _voiceIndex;
    Int _noteNumber;
    Index isMuted;
    indexlist paramInitIndices;
    indexlist paramInitOrder;
    RNBOSubpatcher_1051* patcher_01;
    RNBOSubpatcher_1052* p_27;
    RNBOSubpatcher_1053* p_28;
    RNBOSubpatcher_1054* p_29;
    RNBOSubpatcher_1055* p_30[4];
    RNBOSubpatcher_1056* p_31;
    RNBOSubpatcher_1057* p_32;
    RNBOSubpatcher_1058* p_33;
    RNBOSubpatcher_1059* p_34;

};

PatcherInterface* creaternbomatic()
{
    return new rnbomatic();
}

#ifndef RNBO_NO_PATCHERFACTORY

extern "C" PatcherFactoryFunctionPtr GetPatcherFactoryFunction(PlatformInterface* platformInterface)
#else

extern "C" PatcherFactoryFunctionPtr rnbomaticFactoryFunction(PlatformInterface* platformInterface)
#endif

{
    Platform::set(platformInterface);
    return creaternbomatic;
}

} // end RNBO namespace

